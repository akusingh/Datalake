
In [2]: import pandas as pd

In [3]: import os

In [4]: import glob as glob

In [5]: path = '/Users/arunsingh/Downloads/TX'

In [6]: ext = 'csv'

In [7]: os.chdir(path)

In [8]: files = [i for i in glob.glob('*.{}'.format(ext))]

In [9]: {elm:pd.ExcelFile(elm) for elm in files}
---------------------------------------------------------------------------
ImportError                               Traceback (most recent call last)
<ipython-input-9-4f35a5e8c003> in <module>()
----> 1 {elm:pd.ExcelFile(elm) for elm in files}

<ipython-input-9-4f35a5e8c003> in <dictcomp>((elm,))
----> 1 {elm:pd.ExcelFile(elm) for elm in files}

/usr/local/lib/python2.7/site-packages/pandas/io/excel.pyc in __init__(self, io, **kwds)
    352             import xlrd
    353         except ImportError:
--> 354             raise ImportError(err_msg)
    355         else:
    356             ver = tuple(map(int, xlrd.__VERSION__.split(".")[:2]))

ImportError: Install xlrd >= 0.9.0 for Excel support

In [10]: {elm:pd.read_csv(elm) for elm in files}
---------------------------------------------------------------------------
ParserError                               Traceback (most recent call last)
<ipython-input-10-ca043aae461a> in <module>()
----> 1 {elm:pd.read_csv(elm) for elm in files}

<ipython-input-10-ca043aae461a> in <dictcomp>((elm,))
----> 1 {elm:pd.read_csv(elm) for elm in files}

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)
    676                     skip_blank_lines=skip_blank_lines)
    677 
--> 678         return _read(filepath_or_buffer, kwds)
    679 
    680     parser_f.__name__ = name

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _read(filepath_or_buffer, kwds)
    444 
    445     try:
--> 446         data = parser.read(nrows)
    447     finally:
    448         parser.close()

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1034                 raise ValueError('skipfooter not supported for iteration')
   1035 
-> 1036         ret = self._engine.read(nrows)
   1037 
   1038         # May alter columns / col_dict

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1846     def read(self, nrows=None):
   1847         try:
-> 1848             data = self._reader.read(nrows)
   1849         except StopIteration:
   1850             if self._first_chunk:

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.read()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_low_memory()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._tokenize_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.raise_parser_error()

ParserError: Error tokenizing data. C error: Expected 3 fields in line 60, saw 4


In [11]: df=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_LOCATION_TYPE.csv')

In [12]: print(df.head())
   LOCATION_ID                                                 ...                                                  LOCATION_NAME                                                                                       
0  -----------                                                 ...                                                   ----------------------------------------------...                                                  
1            0                                                 ...                                                   Not Specified                                 ...                                                  
2            1                                                 ...                                                   Air/Bus/Train Terminal                        ...                                                  
3            2                                                 ...                                                   Bank/Savings and Loan                         ...                                                  
4            3                                                 ...                                                   Bar/Nightclub                                 ...                                                  

[5 rows x 3 columns]

In [13]: print(files)
['NIBRS_PROP_DESC_TYPE.csv', 'NIBRS_WEAPON_TYPE.csv', 'NIBRS_ASSIGNMENT_TYPE.csv', 'REF_RACE.csv', 'NIBRS_ARREST_TYPE.csv', 'NIBRS_SUSPECTED_DRUG.csv', 'NIBRS_AGE.csv', 'NIBRS_INJURY.csv', 'NIBRS_ARRESTEE.csv', 'NIBRS_VICTIM_INJURY.csv', 'NIBRS_PROP_LOSS_TYPE.csv', 'NIBRS_ETHNICITY.csv', 'NIBRS_PROPERTY_DESC.csv', 'NIBRS_JUSTIFIABLE_FORCE.csv', 'NIBRS_SUSPECTED_DRUG_TYPE.csv', 'NIBRS_RELATIONSHIP.csv', 'NIBRS_BIAS_MOTIVATION.csv', 'agencies.csv', 'NIBRS_USING_LIST.csv', 'NIBRS_CRIMINAL_ACT.csv', 'NIBRS_month.csv', 'NIBRS_OFFENSE_TYPE.csv', 'NIBRS_WEAPON.csv', 'NIBRS_VICTIM_TYPE.csv', 'NIBRS_BIAS_LIST.csv', 'NIBRS_incident.csv', 'NIBRS_DRUG_MEASURE_TYPE.csv', 'REF_STATE.csv', 'NIBRS_PROPERTY.csv', 'NIBRS_VICTIM_CIRCUMSTANCES.csv', 'NIBRS_ACTIVITY_TYPE.csv', 'NIBRS_CIRCUMSTANCES.csv', 'NIBRS_CLEARED_EXCEPT.csv', 'NIBRS_OFFENSE.csv', 'NIBRS_CRIMINAL_ACT_TYPE.csv', 'agency_participation.csv', 'NIBRS_OFFENDER.csv', 'NIBRS_ARRESTEE_WEAPON.csv', 'NIBRS_VICTIM_OFFENSE.csv', 'NIBRS_VICTIM.csv', 'NIBRS_LOCATION_TYPE.csv', 'NIBRS_SUSPECT_USING.csv', 'NIBRS_VICTIM_OFFENDER_REL.csv']

In [14]: elm:pd.ExcelFile(elm) for elm in files
  File "<ipython-input-14-b7d2af8254ad>", line 1
    elm:pd.ExcelFile(elm) for elm in files
       ^
SyntaxError: invalid syntax


In [15]: {elm:pd.ExcelFile(elm) for elm in files}
---------------------------------------------------------------------------
ImportError                               Traceback (most recent call last)
<ipython-input-15-4f35a5e8c003> in <module>()
----> 1 {elm:pd.ExcelFile(elm) for elm in files}

<ipython-input-15-4f35a5e8c003> in <dictcomp>((elm,))
----> 1 {elm:pd.ExcelFile(elm) for elm in files}

/usr/local/lib/python2.7/site-packages/pandas/io/excel.pyc in __init__(self, io, **kwds)
    352             import xlrd
    353         except ImportError:
--> 354             raise ImportError(err_msg)
    355         else:
    356             ver = tuple(map(int, xlrd.__VERSION__.split(".")[:2]))

ImportError: Install xlrd >= 0.9.0 for Excel support

In [16]: {elm:pd.read_csv(elm) for elm in files}
---------------------------------------------------------------------------
ParserError                               Traceback (most recent call last)
<ipython-input-16-ca043aae461a> in <module>()
----> 1 {elm:pd.read_csv(elm) for elm in files}

<ipython-input-16-ca043aae461a> in <dictcomp>((elm,))
----> 1 {elm:pd.read_csv(elm) for elm in files}

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)
    676                     skip_blank_lines=skip_blank_lines)
    677 
--> 678         return _read(filepath_or_buffer, kwds)
    679 
    680     parser_f.__name__ = name

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _read(filepath_or_buffer, kwds)
    444 
    445     try:
--> 446         data = parser.read(nrows)
    447     finally:
    448         parser.close()

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1034                 raise ValueError('skipfooter not supported for iteration')
   1035 
-> 1036         ret = self._engine.read(nrows)
   1037 
   1038         # May alter columns / col_dict

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1846     def read(self, nrows=None):
   1847         try:
-> 1848             data = self._reader.read(nrows)
   1849         except StopIteration:
   1850             if self._first_chunk:

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.read()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_low_memory()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._tokenize_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.raise_parser_error()

ParserError: Error tokenizing data. C error: Expected 3 fields in line 60, saw 4


In [17]: for elm in files
  File "<ipython-input-17-8e267a2db966>", line 1
    for elm in files
                    ^
SyntaxError: invalid syntax


In [18]: for elm in files elm:pd.read_csv(elm)
  File "<ipython-input-18-df9fda8ca20a>", line 1
    for elm in files elm:pd.read_csv(elm)
                       ^
SyntaxError: invalid syntax


In [19]: import elm
---------------------------------------------------------------------------
ImportError                               Traceback (most recent call last)
<ipython-input-19-54d247b5be29> in <module>()
----> 1 import elm

ImportError: No module named elm

In [20]: filess = glob.glob('/Users/arunsingh/Downloads/TX/*.csv')

In [21]: print(filess)
['/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_WEAPON_TYPE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_ASSIGNMENT_TYPE.csv', '/Users/arunsingh/Downloads/TX/REF_RACE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_ARREST_TYPE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_SUSPECTED_DRUG.csv', '/Users/arunsingh/Downloads/TX/NIBRS_AGE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_INJURY.csv', '/Users/arunsingh/Downloads/TX/NIBRS_ARRESTEE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_VICTIM_INJURY.csv', '/Users/arunsingh/Downloads/TX/NIBRS_PROP_LOSS_TYPE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_ETHNICITY.csv', '/Users/arunsingh/Downloads/TX/NIBRS_PROPERTY_DESC.csv', '/Users/arunsingh/Downloads/TX/NIBRS_JUSTIFIABLE_FORCE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_SUSPECTED_DRUG_TYPE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_RELATIONSHIP.csv', '/Users/arunsingh/Downloads/TX/NIBRS_BIAS_MOTIVATION.csv', '/Users/arunsingh/Downloads/TX/agencies.csv', '/Users/arunsingh/Downloads/TX/NIBRS_USING_LIST.csv', '/Users/arunsingh/Downloads/TX/NIBRS_CRIMINAL_ACT.csv', '/Users/arunsingh/Downloads/TX/NIBRS_month.csv', '/Users/arunsingh/Downloads/TX/NIBRS_OFFENSE_TYPE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_WEAPON.csv', '/Users/arunsingh/Downloads/TX/NIBRS_VICTIM_TYPE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_BIAS_LIST.csv', '/Users/arunsingh/Downloads/TX/NIBRS_incident.csv', '/Users/arunsingh/Downloads/TX/NIBRS_DRUG_MEASURE_TYPE.csv', '/Users/arunsingh/Downloads/TX/REF_STATE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_PROPERTY.csv', '/Users/arunsingh/Downloads/TX/NIBRS_VICTIM_CIRCUMSTANCES.csv', '/Users/arunsingh/Downloads/TX/NIBRS_ACTIVITY_TYPE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_CIRCUMSTANCES.csv', '/Users/arunsingh/Downloads/TX/NIBRS_CLEARED_EXCEPT.csv', '/Users/arunsingh/Downloads/TX/NIBRS_OFFENSE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_CRIMINAL_ACT_TYPE.csv', '/Users/arunsingh/Downloads/TX/agency_participation.csv', '/Users/arunsingh/Downloads/TX/NIBRS_OFFENDER.csv', '/Users/arunsingh/Downloads/TX/NIBRS_ARRESTEE_WEAPON.csv', '/Users/arunsingh/Downloads/TX/NIBRS_VICTIM_OFFENSE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_VICTIM.csv', '/Users/arunsingh/Downloads/TX/NIBRS_LOCATION_TYPE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_SUSPECT_USING.csv', '/Users/arunsingh/Downloads/TX/NIBRS_VICTIM_OFFENDER_REL.csv']

In [22]: dfs={}

In [23]: for f in files:
    ...:     dfs[os.path.splitext(os.path.basename(f))[0]] = pd.read_csv(f)
    ...:     
---------------------------------------------------------------------------
ParserError                               Traceback (most recent call last)
<ipython-input-23-937d2f8f3029> in <module>()
      1 for f in files:
----> 2     dfs[os.path.splitext(os.path.basename(f))[0]] = pd.read_csv(f)
      3 

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)
    676                     skip_blank_lines=skip_blank_lines)
    677 
--> 678         return _read(filepath_or_buffer, kwds)
    679 
    680     parser_f.__name__ = name

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _read(filepath_or_buffer, kwds)
    444 
    445     try:
--> 446         data = parser.read(nrows)
    447     finally:
    448         parser.close()

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1034                 raise ValueError('skipfooter not supported for iteration')
   1035 
-> 1036         ret = self._engine.read(nrows)
   1037 
   1038         # May alter columns / col_dict

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1846     def read(self, nrows=None):
   1847         try:
-> 1848             data = self._reader.read(nrows)
   1849         except StopIteration:
   1850             if self._first_chunk:

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.read()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_low_memory()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._tokenize_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.raise_parser_error()

ParserError: Error tokenizing data. C error: Expected 3 fields in line 60, saw 4


In [24]: 

In [24]: 

In [24]: print(filess)
['/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_WEAPON_TYPE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_ASSIGNMENT_TYPE.csv', '/Users/arunsingh/Downloads/TX/REF_RACE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_ARREST_TYPE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_SUSPECTED_DRUG.csv', '/Users/arunsingh/Downloads/TX/NIBRS_AGE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_INJURY.csv', '/Users/arunsingh/Downloads/TX/NIBRS_ARRESTEE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_VICTIM_INJURY.csv', '/Users/arunsingh/Downloads/TX/NIBRS_PROP_LOSS_TYPE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_ETHNICITY.csv', '/Users/arunsingh/Downloads/TX/NIBRS_PROPERTY_DESC.csv', '/Users/arunsingh/Downloads/TX/NIBRS_JUSTIFIABLE_FORCE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_SUSPECTED_DRUG_TYPE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_RELATIONSHIP.csv', '/Users/arunsingh/Downloads/TX/NIBRS_BIAS_MOTIVATION.csv', '/Users/arunsingh/Downloads/TX/agencies.csv', '/Users/arunsingh/Downloads/TX/NIBRS_USING_LIST.csv', '/Users/arunsingh/Downloads/TX/NIBRS_CRIMINAL_ACT.csv', '/Users/arunsingh/Downloads/TX/NIBRS_month.csv', '/Users/arunsingh/Downloads/TX/NIBRS_OFFENSE_TYPE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_WEAPON.csv', '/Users/arunsingh/Downloads/TX/NIBRS_VICTIM_TYPE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_BIAS_LIST.csv', '/Users/arunsingh/Downloads/TX/NIBRS_incident.csv', '/Users/arunsingh/Downloads/TX/NIBRS_DRUG_MEASURE_TYPE.csv', '/Users/arunsingh/Downloads/TX/REF_STATE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_PROPERTY.csv', '/Users/arunsingh/Downloads/TX/NIBRS_VICTIM_CIRCUMSTANCES.csv', '/Users/arunsingh/Downloads/TX/NIBRS_ACTIVITY_TYPE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_CIRCUMSTANCES.csv', '/Users/arunsingh/Downloads/TX/NIBRS_CLEARED_EXCEPT.csv', '/Users/arunsingh/Downloads/TX/NIBRS_OFFENSE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_CRIMINAL_ACT_TYPE.csv', '/Users/arunsingh/Downloads/TX/agency_participation.csv', '/Users/arunsingh/Downloads/TX/NIBRS_OFFENDER.csv', '/Users/arunsingh/Downloads/TX/NIBRS_ARRESTEE_WEAPON.csv', '/Users/arunsingh/Downloads/TX/NIBRS_VICTIM_OFFENSE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_VICTIM.csv', '/Users/arunsingh/Downloads/TX/NIBRS_LOCATION_TYPE.csv', '/Users/arunsingh/Downloads/TX/NIBRS_SUSPECT_USING.csv', '/Users/arunsingh/Downloads/TX/NIBRS_VICTIM_OFFENDER_REL.csv']

In [25]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv')
---------------------------------------------------------------------------
ParserError                               Traceback (most recent call last)
<ipython-input-25-77ab530f22cb> in <module>()
----> 1 NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv')

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)
    676                     skip_blank_lines=skip_blank_lines)
    677 
--> 678         return _read(filepath_or_buffer, kwds)
    679 
    680     parser_f.__name__ = name

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _read(filepath_or_buffer, kwds)
    444 
    445     try:
--> 446         data = parser.read(nrows)
    447     finally:
    448         parser.close()

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1034                 raise ValueError('skipfooter not supported for iteration')
   1035 
-> 1036         ret = self._engine.read(nrows)
   1037 
   1038         # May alter columns / col_dict

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1846     def read(self, nrows=None):
   1847         try:
-> 1848             data = self._reader.read(nrows)
   1849         except StopIteration:
   1850             if self._first_chunk:

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.read()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_low_memory()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._tokenize_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.raise_parser_error()

ParserError: Error tokenizing data. C error: Expected 3 fields in line 60, saw 4


In [26]: 

In [26]: import csv
    ...: 
    ...: def parseCsvFile ('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv'):
    ...:     dict = {}
    ...:     with open('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv') as csvfile:
    ...:         reader = csv.DictReader(csvfile)
    ...:         for row in reader:
    ...:             key = None
    ...:             for k in row:
    ...:                 stripK = k.strip()
    ...:                 stripV = row[k].strip()
    ...:                 if key == None:
    ...:                     key = stripV
    ...:                     dict[key] = {}
    ...:                 dict[key][stripK] = stripV
    ...:     return dict
  File "<ipython-input-26-674304a8222b>", line 3
    def parseCsvFile ('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv'):
                                                                             ^
SyntaxError: invalid syntax


In [27]: 

In [27]: import csv
    ...: 
    ...: def parseCsvFile (/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv):
    ...:     dict = {}
    ...:     with open('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv') as csvfile:
    ...:         reader = csv.DictReader(csvfile)
    ...:         for row in reader:
    ...:             key = None
    ...:             for k in row:
    ...:                 stripK = k.strip()
    ...:                 stripV = row[k].strip()
    ...:                 if key == None:
    ...:                     key = stripV
    ...:                     dict[key] = {}
    ...:                 dict[key][stripK] = stripV
    ...:     return dict
  File "<ipython-input-27-e808c0091a35>", line 3
    def parseCsvFile (/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv):
                      ^
SyntaxError: invalid syntax


In [28]: 

In [28]: import csv
    ...: 
    ...: def parseCsvFile (NIBRS_PROP_DESC_TYPE.csv):
    ...:     dict = {}
    ...:     with open('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv') as csvfile:
    ...:         reader = csv.DictReader(csvfile)
    ...:         for row in reader:
    ...:             key = None
    ...:             for k in row:
    ...:                 stripK = k.strip()
    ...:                 stripV = row[k].strip()
    ...:                 if key == None:
    ...:                     key = stripV
    ...:                     dict[key] = {}
    ...:                 dict[key][stripK] = stripV
    ...:     return dict
  File "<ipython-input-28-81b4e294a0b5>", line 3
    def parseCsvFile (NIBRS_PROP_DESC_TYPE.csv):
                                          ^
SyntaxError: invalid syntax


In [29]: import csv
    ...: 
    ...: def parseCsvFile (datafile):
    ...:     dict = {}
    ...:     with open('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv') as csvfile:
    ...:         reader = csv.DictReader(csvfile)
    ...:         for row in reader:
    ...:             key = None
    ...:             for k in row:
    ...:                 stripK = k.strip()
    ...:                 stripV = row[k].strip()
    ...:                 if key == None:
    ...:                     key = stripV
    ...:                     dict[key] = {}
    ...:                 dict[key][stripK] = stripV
    ...:     return dict
    ...: 

In [30]: print(reader.head(100))
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-30-7ccce160052e> in <module>()
----> 1 print(reader.head(100))

NameError: name 'reader' is not defined

In [31]: print(datafile.head(100))
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-31-71c68b2b90f6> in <module>()
----> 1 print(datafile.head(100))

NameError: name 'datafile' is not defined

In [32]: print(parseCsvFile.head(100))
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-32-d944cc44ae2c> in <module>()
----> 1 print(parseCsvFile.head(100))

AttributeError: 'function' object has no attribute 'head'

In [33]: print(parseCsvFile)
<function parseCsvFile at 0x1196122a8>

In [34]: print(reader)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-34-e5fbb0709256> in <module>()
----> 1 print(reader)

NameError: name 'reader' is not defined

In [35]: print(datafile)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-35-e5565869091c> in <module>()
----> 1 print(datafile)

NameError: name 'datafile' is not defined

In [36]: print(dict)
<type 'dict'>

In [37]: print(stripV)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-37-cd5112cf77c3> in <module>()
----> 1 print(stripV)

NameError: name 'stripV' is not defined

In [38]: print(csvfile)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-38-bec46228a749> in <module>()
----> 1 print(csvfile)

NameError: name 'csvfile' is not defined

In [39]: pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv', names=[COL1,COL2,COL3])
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-39-09968ac3d201> in <module>()
----> 1 pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv', names=[COL1,COL2,COL3])

NameError: name 'COL1' is not defined

In [40]: pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv', names=[PROP_DESC_ID,PR,PROP_DESC_NAME])
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-40-5e4662984a49> in <module>()
----> 1 pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv', names=[PROP_DESC_ID,PR,PROP_DESC_NAME])

NameError: name 'PROP_DESC_ID' is not defined

In [41]: pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv', names=['PROP_DESC_ID','PR','PROP_DESC_NAME'])
Out[41]: 
    PROP_DESC_ID  PR                                     PROP_DESC_NAME
0   PROP_DESC_ID  PR  PROP_DESC_NAME                                ...
1   ------------  --  ----------------------------------------------...
2              1  01  Aircraft                                      ...
3              2  02  Alcohol                                       ...
4              3  03  Automobile                                    ...
5              4  04  Bicycles                                      ...
6              5  05  Buses                                         ...
7              6  06  Clothes/ Furs                                 ...
8              7  07  Computer Hard/ Software                       ...
9              8  08  Consumable Goods                              ...
10             9  09  Credit/ Debit cards                           ...
11            10  10  Drugs/ Narcotics                              ...
12            11  11  Drug Equipment                                ...
13            12  12  Farm Equipment                                ...
14            13  13  Firearms                                      ...
15            14  14  Gambling Equipment                            ...
16            15  15  Industrial Equipment                          ...
17            16  16  Household Goods                               ...
18            17  17  Jewelry/ Precious Metals                      ...
19            18  18  Livestock                                     ...
20            19  19  Merchandise                                   ...
21            20  20  Money                                         ...
22            21  21  Negotiable Instruments                        ...
23            22  22  Non Negotiable Instruments                    ...
24            23  23  Office Equipment                              ...
25            24  24  Other Motor Vehicles                          ...
26            25  25  Purse/ Wallet                                 ...
27            26  26  Radio/ TV/ VCR                                ...
28            27  27  Recordings                                    ...
29            28  28  Recreational Vehicles                         ...
..           ...  ..                                                ...
40            39  39  Watercraft                                    ...
41            40  41  Aircraft Parts/ Accessories                   ...
42            41  42  Artistic Supplies/ Accessories                ...
43            42  43  Building Materials                            ...
44            43  44  Camping/ Hunting/ Fishing Equipment/ Supplies ...
45            44  45  Chemicals                                     ...
46            45  46  Collections/ Collectibles                     ...
47            46  47  Crops                                         ...
48            47  48  Documents/ Personal or Business               ...
49            48  49  Explosives                                    ...
50            49  59  Firearm Accessories                           ...
51            50  64  Fuel                                          ...
52            51  65  Identity Documents                            ...
53            52  66  Identity-Intangible                           ...
54            53  67  Law Enforcement Equipment                     ...
55            54  68  Lawn/ Yard/ Garden Equipment                  ...
56            55  69  Logging Equipment                             ...
57            56  70  Medical/ Medical Lab Equipment                ...
58            57  71                                             Metals
59            58  72  Musical Instruments                           ...
60            59  73  Pets                                          ...
61            60  74  Photographic/ Optical Equipment               ...
62            61  75  Portable Electronic Communications            ...
63            62  76  Recreational/ Sports Equipment                ...
64            63  77  Other                                         ...
65            64  78  Trailers                                      ...
66            65  79  Watercraft Equipment/ Parts/ Accessories      ...
67            66  80  Weapons-Other                                 ...
68            67  88  Pending Inventory                             ...
69            68  99  Special                                       ...

[70 rows x 3 columns]

In [42]: pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv', names=['PROP_DESC_ID','PR','PROP_DESC_NAME'],header=True)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-42-a0f4b7471b16> in <module>()
----> 1 pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv', names=['PROP_DESC_ID','PR','PROP_DESC_NAME'],header=True)

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)
    676                     skip_blank_lines=skip_blank_lines)
    677 
--> 678         return _read(filepath_or_buffer, kwds)
    679 
    680     parser_f.__name__ = name

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _read(filepath_or_buffer, kwds)
    438 
    439     # Create the parser.
--> 440     parser = TextFileReader(filepath_or_buffer, **kwds)
    441 
    442     if chunksize or iterator:

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in __init__(self, f, engine, **kwds)
    780         # might mutate self.engine
    781         self.engine = self._check_file_or_buffer(f, engine)
--> 782         self.options, self.engine = self._clean_options(options, engine)
    783 
    784         if 'has_index_names' in kwds:

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _clean_options(self, options, engine)
    937         skiprows = options['skiprows']
    938 
--> 939         _validate_header_arg(options['header'])
    940 
    941         depr_warning = ''

/usr/local/lib/python2.7/site-packages/pandas/io/common.pyc in _validate_header_arg(header)
    113 def _validate_header_arg(header):
    114     if isinstance(header, bool):
--> 115         raise TypeError("Passing a bool to header is invalid. "
    116                         "Use header=None for no header or "
    117                         "header=int or list-like of ints to specify "

TypeError: Passing a bool to header is invalid. Use header=None for no header or header=int or list-like of ints to specify the row(s) making up the column names

In [43]: pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv', names=['PROP_DESC_ID','PR','PROP_DESC_NAME'],header=None)
Out[43]: 
    PROP_DESC_ID  PR                                     PROP_DESC_NAME
0   PROP_DESC_ID  PR  PROP_DESC_NAME                                ...
1   ------------  --  ----------------------------------------------...
2              1  01  Aircraft                                      ...
3              2  02  Alcohol                                       ...
4              3  03  Automobile                                    ...
5              4  04  Bicycles                                      ...
6              5  05  Buses                                         ...
7              6  06  Clothes/ Furs                                 ...
8              7  07  Computer Hard/ Software                       ...
9              8  08  Consumable Goods                              ...
10             9  09  Credit/ Debit cards                           ...
11            10  10  Drugs/ Narcotics                              ...
12            11  11  Drug Equipment                                ...
13            12  12  Farm Equipment                                ...
14            13  13  Firearms                                      ...
15            14  14  Gambling Equipment                            ...
16            15  15  Industrial Equipment                          ...
17            16  16  Household Goods                               ...
18            17  17  Jewelry/ Precious Metals                      ...
19            18  18  Livestock                                     ...
20            19  19  Merchandise                                   ...
21            20  20  Money                                         ...
22            21  21  Negotiable Instruments                        ...
23            22  22  Non Negotiable Instruments                    ...
24            23  23  Office Equipment                              ...
25            24  24  Other Motor Vehicles                          ...
26            25  25  Purse/ Wallet                                 ...
27            26  26  Radio/ TV/ VCR                                ...
28            27  27  Recordings                                    ...
29            28  28  Recreational Vehicles                         ...
..           ...  ..                                                ...
40            39  39  Watercraft                                    ...
41            40  41  Aircraft Parts/ Accessories                   ...
42            41  42  Artistic Supplies/ Accessories                ...
43            42  43  Building Materials                            ...
44            43  44  Camping/ Hunting/ Fishing Equipment/ Supplies ...
45            44  45  Chemicals                                     ...
46            45  46  Collections/ Collectibles                     ...
47            46  47  Crops                                         ...
48            47  48  Documents/ Personal or Business               ...
49            48  49  Explosives                                    ...
50            49  59  Firearm Accessories                           ...
51            50  64  Fuel                                          ...
52            51  65  Identity Documents                            ...
53            52  66  Identity-Intangible                           ...
54            53  67  Law Enforcement Equipment                     ...
55            54  68  Lawn/ Yard/ Garden Equipment                  ...
56            55  69  Logging Equipment                             ...
57            56  70  Medical/ Medical Lab Equipment                ...
58            57  71                                             Metals
59            58  72  Musical Instruments                           ...
60            59  73  Pets                                          ...
61            60  74  Photographic/ Optical Equipment               ...
62            61  75  Portable Electronic Communications            ...
63            62  76  Recreational/ Sports Equipment                ...
64            63  77  Other                                         ...
65            64  78  Trailers                                      ...
66            65  79  Watercraft Equipment/ Parts/ Accessories      ...
67            66  80  Weapons-Other                                 ...
68            67  88  Pending Inventory                             ...
69            68  99  Special                                       ...

[70 rows x 3 columns]

In [44]: df = pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv', names=['PROP_DESC_ID','PR','PROP_DESC_NAME'],header=None)

In [45]: print(df(58))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-45-5ab05eca7758> in <module>()
----> 1 print(df(58))

TypeError: 'DataFrame' object is not callable

In [46]: print(df.head(100))
    PROP_DESC_ID  PR                                     PROP_DESC_NAME
0   PROP_DESC_ID  PR  PROP_DESC_NAME                                ...
1   ------------  --  ----------------------------------------------...
2              1  01  Aircraft                                      ...
3              2  02  Alcohol                                       ...
4              3  03  Automobile                                    ...
5              4  04  Bicycles                                      ...
6              5  05  Buses                                         ...
7              6  06  Clothes/ Furs                                 ...
8              7  07  Computer Hard/ Software                       ...
9              8  08  Consumable Goods                              ...
10             9  09  Credit/ Debit cards                           ...
11            10  10  Drugs/ Narcotics                              ...
12            11  11  Drug Equipment                                ...
13            12  12  Farm Equipment                                ...
14            13  13  Firearms                                      ...
15            14  14  Gambling Equipment                            ...
16            15  15  Industrial Equipment                          ...
17            16  16  Household Goods                               ...
18            17  17  Jewelry/ Precious Metals                      ...
19            18  18  Livestock                                     ...
20            19  19  Merchandise                                   ...
21            20  20  Money                                         ...
22            21  21  Negotiable Instruments                        ...
23            22  22  Non Negotiable Instruments                    ...
24            23  23  Office Equipment                              ...
25            24  24  Other Motor Vehicles                          ...
26            25  25  Purse/ Wallet                                 ...
27            26  26  Radio/ TV/ VCR                                ...
28            27  27  Recordings                                    ...
29            28  28  Recreational Vehicles                         ...
..           ...  ..                                                ...
40            39  39  Watercraft                                    ...
41            40  41  Aircraft Parts/ Accessories                   ...
42            41  42  Artistic Supplies/ Accessories                ...
43            42  43  Building Materials                            ...
44            43  44  Camping/ Hunting/ Fishing Equipment/ Supplies ...
45            44  45  Chemicals                                     ...
46            45  46  Collections/ Collectibles                     ...
47            46  47  Crops                                         ...
48            47  48  Documents/ Personal or Business               ...
49            48  49  Explosives                                    ...
50            49  59  Firearm Accessories                           ...
51            50  64  Fuel                                          ...
52            51  65  Identity Documents                            ...
53            52  66  Identity-Intangible                           ...
54            53  67  Law Enforcement Equipment                     ...
55            54  68  Lawn/ Yard/ Garden Equipment                  ...
56            55  69  Logging Equipment                             ...
57            56  70  Medical/ Medical Lab Equipment                ...
58            57  71                                             Metals
59            58  72  Musical Instruments                           ...
60            59  73  Pets                                          ...
61            60  74  Photographic/ Optical Equipment               ...
62            61  75  Portable Electronic Communications            ...
63            62  76  Recreational/ Sports Equipment                ...
64            63  77  Other                                         ...
65            64  78  Trailers                                      ...
66            65  79  Watercraft Equipment/ Parts/ Accessories      ...
67            66  80  Weapons-Other                                 ...
68            67  88  Pending Inventory                             ...
69            68  99  Special                                       ...

[70 rows x 3 columns]

In [47]: files = [i for i in glob.glob('*.{}'.format(ext))]

In [48]: {elm:pd.read_csv(elm) for elm in files}
---------------------------------------------------------------------------
ParserError                               Traceback (most recent call last)
<ipython-input-48-ca043aae461a> in <module>()
----> 1 {elm:pd.read_csv(elm) for elm in files}

<ipython-input-48-ca043aae461a> in <dictcomp>((elm,))
----> 1 {elm:pd.read_csv(elm) for elm in files}

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)
    676                     skip_blank_lines=skip_blank_lines)
    677 
--> 678         return _read(filepath_or_buffer, kwds)
    679 
    680     parser_f.__name__ = name

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _read(filepath_or_buffer, kwds)
    444 
    445     try:
--> 446         data = parser.read(nrows)
    447     finally:
    448         parser.close()

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1034                 raise ValueError('skipfooter not supported for iteration')
   1035 
-> 1036         ret = self._engine.read(nrows)
   1037 
   1038         # May alter columns / col_dict

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1846     def read(self, nrows=None):
   1847         try:
-> 1848             data = self._reader.read(nrows)
   1849         except StopIteration:
   1850             if self._first_chunk:

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.read()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_low_memory()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._tokenize_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.raise_parser_error()

ParserError: Error tokenizing data. C error: Expected 3 fields in line 60, saw 4


In [49]: print(files)
['NIBRS_PROP_DESC_TYPE.csv', 'NIBRS_WEAPON_TYPE.csv', 'NIBRS_ASSIGNMENT_TYPE.csv', 'REF_RACE.csv', 'NIBRS_ARREST_TYPE.csv', 'NIBRS_SUSPECTED_DRUG.csv', 'NIBRS_AGE.csv', 'NIBRS_INJURY.csv', 'NIBRS_ARRESTEE.csv', 'NIBRS_VICTIM_INJURY.csv', 'NIBRS_PROP_LOSS_TYPE.csv', 'NIBRS_ETHNICITY.csv', 'NIBRS_JUSTIFIABLE_FORCE.csv', 'NIBRS_SUSPECTED_DRUG_TYPE.csv', 'NIBRS_RELATIONSHIP.csv', 'NIBRS_BIAS_MOTIVATION.csv', 'agencies.csv', 'NIBRS_USING_LIST.csv', 'NIBRS_CRIMINAL_ACT.csv', 'NIBRS_month.csv', 'NIBRS_OFFENSE_TYPE.csv', 'NIBRS_WEAPON.csv', 'NIBRS_VICTIM_TYPE.csv', 'NIBRS_BIAS_LIST.csv', 'NIBRS_incident.csv', 'NIBRS_DRUG_MEASURE_TYPE.csv', 'REF_STATE.csv', 'NIBRS_PROPERTY.csv', 'NIBRS_VICTIM_CIRCUMSTANCES.csv', 'NIBRS_ACTIVITY_TYPE.csv', 'NIBRS_CIRCUMSTANCES.csv', 'NIBRS_CLEARED_EXCEPT.csv', 'NIBRS_OFFENSE.csv', 'NIBRS_CRIMINAL_ACT_TYPE.csv', 'agency_participation.csv', 'NIBRS_OFFENDER.csv', 'NIBRS_ARRESTEE_WEAPON.csv', 'NIBRS_VICTIM_OFFENSE.csv', 'NIBRS_VICTIM.csv', 'NIBRS_LOCATION_TYPE.csv', 'NIBRS_SUSPECT_USING.csv', 'NIBRS_VICTIM_OFFENDER_REL.csv']

In [50]: files = [i for i in glob.glob('*.{}'.format(ext))]

In [51]: {elm:pd.read_csv(elm) for elm in files}
---------------------------------------------------------------------------
ParserError                               Traceback (most recent call last)
<ipython-input-51-ca043aae461a> in <module>()
----> 1 {elm:pd.read_csv(elm) for elm in files}

<ipython-input-51-ca043aae461a> in <dictcomp>((elm,))
----> 1 {elm:pd.read_csv(elm) for elm in files}

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)
    676                     skip_blank_lines=skip_blank_lines)
    677 
--> 678         return _read(filepath_or_buffer, kwds)
    679 
    680     parser_f.__name__ = name

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _read(filepath_or_buffer, kwds)
    444 
    445     try:
--> 446         data = parser.read(nrows)
    447     finally:
    448         parser.close()

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1034                 raise ValueError('skipfooter not supported for iteration')
   1035 
-> 1036         ret = self._engine.read(nrows)
   1037 
   1038         # May alter columns / col_dict

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1846     def read(self, nrows=None):
   1847         try:
-> 1848             data = self._reader.read(nrows)
   1849         except StopIteration:
   1850             if self._first_chunk:

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.read()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_low_memory()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._tokenize_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.raise_parser_error()

ParserError: Error tokenizing data. C error: Expected 7 fields in line 9, saw 9


In [52]: print(files)
['NIBRS_WEAPON_TYPE.csv', 'NIBRS_ASSIGNMENT_TYPE.csv', 'REF_RACE.csv', 'NIBRS_ARREST_TYPE.csv', 'NIBRS_SUSPECTED_DRUG.csv', 'NIBRS_AGE.csv', 'NIBRS_INJURY.csv', 'NIBRS_ARRESTEE.csv', 'NIBRS_VICTIM_INJURY.csv', 'NIBRS_PROP_LOSS_TYPE.csv', 'NIBRS_ETHNICITY.csv', 'NIBRS_PROPERTY_DESC.csv', 'NIBRS_JUSTIFIABLE_FORCE.csv', 'NIBRS_SUSPECTED_DRUG_TYPE.csv', 'NIBRS_RELATIONSHIP.csv', 'NIBRS_BIAS_MOTIVATION.csv', 'agencies.csv', 'NIBRS_USING_LIST.csv', 'NIBRS_CRIMINAL_ACT.csv', 'NIBRS_month.csv', 'NIBRS_OFFENSE_TYPE.csv', 'NIBRS_WEAPON.csv', 'NIBRS_VICTIM_TYPE.csv', 'NIBRS_BIAS_LIST.csv', 'NIBRS_incident.csv', 'NIBRS_DRUG_MEASURE_TYPE.csv', 'REF_STATE.csv', 'NIBRS_PROPERTY.csv', 'NIBRS_VICTIM_CIRCUMSTANCES.csv', 'NIBRS_ACTIVITY_TYPE.csv', 'NIBRS_CIRCUMSTANCES.csv', 'NIBRS_CLEARED_EXCEPT.csv', 'NIBRS_OFFENSE.csv', 'NIBRS_CRIMINAL_ACT_TYPE.csv', 'agency_participation.csv', 'NIBRS_OFFENDER.csv', 'NIBRS_ARRESTEE_WEAPON.csv', 'NIBRS_VICTIM_OFFENSE.csv', 'NIBRS_VICTIM.csv', 'NIBRS_LOCATION_TYPE.csv', 'NIBRS_SUSPECT_USING.csv', 'NIBRS_VICTIM_OFFENDER_REL.csv']

In [53]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_AGE.csv')

In [54]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_ACTIVITY_TYPE.csv')
---------------------------------------------------------------------------
ParserError                               Traceback (most recent call last)
<ipython-input-54-40ff5336b77d> in <module>()
----> 1 NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_ACTIVITY_TYPE.csv')

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)
    676                     skip_blank_lines=skip_blank_lines)
    677 
--> 678         return _read(filepath_or_buffer, kwds)
    679 
    680     parser_f.__name__ = name

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _read(filepath_or_buffer, kwds)
    444 
    445     try:
--> 446         data = parser.read(nrows)
    447     finally:
    448         parser.close()

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1034                 raise ValueError('skipfooter not supported for iteration')
   1035 
-> 1036         ret = self._engine.read(nrows)
   1037 
   1038         # May alter columns / col_dict

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1846     def read(self, nrows=None):
   1847         try:
-> 1848             data = self._reader.read(nrows)
   1849         except StopIteration:
   1850             if self._first_chunk:

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.read()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_low_memory()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._tokenize_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.raise_parser_error()

ParserError: Error tokenizing data. C error: Expected 3 fields in line 9, saw 5


In [55]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_ASSIGNMENT_TYPE.csv')

In [56]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_ARREST_TYPE.csv')

In [57]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_CIRCUMSTANCES.csv')

In [58]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_BIAS_LIST.csv')
---------------------------------------------------------------------------
ParserError                               Traceback (most recent call last)
<ipython-input-58-533bc85d0b4c> in <module>()
----> 1 NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_BIAS_LIST.csv')

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)
    676                     skip_blank_lines=skip_blank_lines)
    677 
--> 678         return _read(filepath_or_buffer, kwds)
    679 
    680     parser_f.__name__ = name

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _read(filepath_or_buffer, kwds)
    444 
    445     try:
--> 446         data = parser.read(nrows)
    447     finally:
    448         parser.close()

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1034                 raise ValueError('skipfooter not supported for iteration')
   1035 
-> 1036         ret = self._engine.read(nrows)
   1037 
   1038         # May alter columns / col_dict

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1846     def read(self, nrows=None):
   1847         try:
-> 1848             data = self._reader.read(nrows)
   1849         except StopIteration:
   1850             if self._first_chunk:

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.read()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_low_memory()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._tokenize_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.raise_parser_error()

ParserError: Error tokenizing data. C error: Expected 4 fields in line 8, saw 5


In [59]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_CLEARED_EXCEPT.csv')
---------------------------------------------------------------------------
ParserError                               Traceback (most recent call last)
<ipython-input-59-4a923b2db057> in <module>()
----> 1 NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_CLEARED_EXCEPT.csv')

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)
    676                     skip_blank_lines=skip_blank_lines)
    677 
--> 678         return _read(filepath_or_buffer, kwds)
    679 
    680     parser_f.__name__ = name

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _read(filepath_or_buffer, kwds)
    444 
    445     try:
--> 446         data = parser.read(nrows)
    447     finally:
    448         parser.close()

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1034                 raise ValueError('skipfooter not supported for iteration')
   1035 
-> 1036         ret = self._engine.read(nrows)
   1037 
   1038         # May alter columns / col_dict

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1846     def read(self, nrows=None):
   1847         try:
-> 1848             data = self._reader.read(nrows)
   1849         except StopIteration:
   1850             if self._first_chunk:

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.read()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_low_memory()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._tokenize_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.raise_parser_error()

ParserError: Error tokenizing data. C error: Expected 4 fields in line 8, saw 6


In [60]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_CRIMINAL_ACT_TYPE.csv')
---------------------------------------------------------------------------
ParserError                               Traceback (most recent call last)
<ipython-input-60-f3b47c502308> in <module>()
----> 1 NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_CRIMINAL_ACT_TYPE.csv')

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)
    676                     skip_blank_lines=skip_blank_lines)
    677 
--> 678         return _read(filepath_or_buffer, kwds)
    679 
    680     parser_f.__name__ = name

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _read(filepath_or_buffer, kwds)
    444 
    445     try:
--> 446         data = parser.read(nrows)
    447     finally:
    448         parser.close()

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1034                 raise ValueError('skipfooter not supported for iteration')
   1035 
-> 1036         ret = self._engine.read(nrows)
   1037 
   1038         # May alter columns / col_dict

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1846     def read(self, nrows=None):
   1847         try:
-> 1848             data = self._reader.read(nrows)
   1849         except StopIteration:
   1850             if self._first_chunk:

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.read()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_low_memory()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._tokenize_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.raise_parser_error()

ParserError: Error tokenizing data. C error: Expected 4 fields in line 5, saw 5


In [61]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_DRUG_MEASURE_TYPE.csv')

In [62]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_INJURY.csv')

In [63]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_ETHNICITY.csv')

In [64]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_LOCATION_TYPE.csv')

In [65]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_JUSTIFIABLE_FORCE.csv')

In [66]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_OFFENSE_TYPE.csv')
---------------------------------------------------------------------------
ParserError                               Traceback (most recent call last)
<ipython-input-66-e8147a962538> in <module>()
----> 1 NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_OFFENSE_TYPE.csv')

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)
    676                     skip_blank_lines=skip_blank_lines)
    677 
--> 678         return _read(filepath_or_buffer, kwds)
    679 
    680     parser_f.__name__ = name

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _read(filepath_or_buffer, kwds)
    444 
    445     try:
--> 446         data = parser.read(nrows)
    447     finally:
    448         parser.close()

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1034                 raise ValueError('skipfooter not supported for iteration')
   1035 
-> 1036         ret = self._engine.read(nrows)
   1037 
   1038         # May alter columns / col_dict

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1846     def read(self, nrows=None):
   1847         try:
-> 1848             data = self._reader.read(nrows)
   1849         except StopIteration:
   1850             if self._first_chunk:

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.read()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_low_memory()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._tokenize_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.raise_parser_error()

ParserError: Error tokenizing data. C error: Expected 9 fields in line 9, saw 10


In [67]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv')
---------------------------------------------------------------------------
ParserError                               Traceback (most recent call last)
<ipython-input-67-77ab530f22cb> in <module>()
----> 1 NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv')

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)
    676                     skip_blank_lines=skip_blank_lines)
    677 
--> 678         return _read(filepath_or_buffer, kwds)
    679 
    680     parser_f.__name__ = name

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _read(filepath_or_buffer, kwds)
    444 
    445     try:
--> 446         data = parser.read(nrows)
    447     finally:
    448         parser.close()

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1034                 raise ValueError('skipfooter not supported for iteration')
   1035 
-> 1036         ret = self._engine.read(nrows)
   1037 
   1038         # May alter columns / col_dict

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1846     def read(self, nrows=None):
   1847         try:
-> 1848             data = self._reader.read(nrows)
   1849         except StopIteration:
   1850             if self._first_chunk:

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.read()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_low_memory()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._tokenize_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.raise_parser_error()

ParserError: Error tokenizing data. C error: Expected 3 fields in line 60, saw 4


In [68]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_LOSS_TYPE.csv')
---------------------------------------------------------------------------
ParserError                               Traceback (most recent call last)
<ipython-input-68-458bce93e890> in <module>()
----> 1 NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_LOSS_TYPE.csv')

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)
    676                     skip_blank_lines=skip_blank_lines)
    677 
--> 678         return _read(filepath_or_buffer, kwds)
    679 
    680     parser_f.__name__ = name

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _read(filepath_or_buffer, kwds)
    444 
    445     try:
--> 446         data = parser.read(nrows)
    447     finally:
    448         parser.close()

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1034                 raise ValueError('skipfooter not supported for iteration')
   1035 
-> 1036         ret = self._engine.read(nrows)
   1037 
   1038         # May alter columns / col_dict

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1846     def read(self, nrows=None):
   1847         try:
-> 1848             data = self._reader.read(nrows)
   1849         except StopIteration:
   1850             if self._first_chunk:

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.read()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_low_memory()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._tokenize_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.raise_parser_error()

ParserError: Error tokenizing data. C error: Expected 3 fields in line 10, saw 9


In [69]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_RELATIONSHIP.csv')

In [70]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_USING_LIST.csv')

In [71]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_SUSPECTED_DRUG_TYPE.csv')

In [72]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_WEAPON_TYPE.csv')

In [73]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_VICTIM_TYPE.csv')

In [74]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_ARRESTEE_WEAPON.csv')

In [75]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_ARRESTEE.csv')
/usr/local/lib/python2.7/site-packages/IPython/core/interactiveshell.py:2714: DtypeWarning: Columns (0,1,2,3,5,7,8,11) have mixed types. Specify dtype option on import or set low_memory=False.
  interactivity=interactivity, compiler=compiler, result=result)

In [76]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_ARRESTEE.csv',low_memory=False)

In [77]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_BIAS_MOTIVATION.csv')
---------------------------------------------------------------------------
EmptyDataError                            Traceback (most recent call last)
<ipython-input-77-366ccf1d915a> in <module>()
----> 1 NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_BIAS_MOTIVATION.csv')

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)
    676                     skip_blank_lines=skip_blank_lines)
    677 
--> 678         return _read(filepath_or_buffer, kwds)
    679 
    680     parser_f.__name__ = name

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _read(filepath_or_buffer, kwds)
    438 
    439     # Create the parser.
--> 440     parser = TextFileReader(filepath_or_buffer, **kwds)
    441 
    442     if chunksize or iterator:

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in __init__(self, f, engine, **kwds)
    785             self.options['has_index_names'] = kwds['has_index_names']
    786 
--> 787         self._make_engine(self.engine)
    788 
    789     def close(self):

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _make_engine(self, engine)
   1012     def _make_engine(self, engine='c'):
   1013         if engine == 'c':
-> 1014             self._engine = CParserWrapper(self.f, **self.options)
   1015         else:
   1016             if engine == 'python':

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in __init__(self, src, **kwds)
   1706         kwds['usecols'] = self.usecols
   1707 
-> 1708         self._reader = parsers.TextReader(src, **kwds)
   1709 
   1710         passed_names = self.names is None

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.__cinit__()

EmptyDataError: No columns to parse from file

In [78]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_CRIMINAL_ACT.csv')

In [79]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_incident.csv')
/usr/local/lib/python2.7/site-packages/IPython/core/interactiveshell.py:2714: DtypeWarning: Columns (0,1,2,3,9,11) have mixed types. Specify dtype option on import or set low_memory=False.
  interactivity=interactivity, compiler=compiler, result=result)

In [80]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_incident.csv',low_memory=False)

In [81]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_month.csv')
/usr/local/lib/python2.7/site-packages/IPython/core/interactiveshell.py:2714: DtypeWarning: Columns (0,1,2,3,4,14) have mixed types. Specify dtype option on import or set low_memory=False.
  interactivity=interactivity, compiler=compiler, result=result)

In [82]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_month.csv',low_memory=False)

In [83]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_OFFENDER.csv')

In [84]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_OFFENSE.csv')
/usr/local/lib/python2.7/site-packages/IPython/core/interactiveshell.py:2714: DtypeWarning: Columns (0,1,2,3,5) have mixed types. Specify dtype option on import or set low_memory=False.
  interactivity=interactivity, compiler=compiler, result=result)

In [85]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_OFFENSE.csv',low_memory=False)

In [86]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROPERTY_DESC.csv')

In [87]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROPERTY.csv')

In [88]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_SUSPECT_USING.csv')
/usr/local/lib/python2.7/site-packages/IPython/core/interactiveshell.py:2714: DtypeWarning: Columns (0,1,2) have mixed types. Specify dtype option on import or set low_memory=False.
  interactivity=interactivity, compiler=compiler, result=result)

In [89]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_SUSPECT_USING.csv',low_memory=False)

In [90]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_SUSPECTED_DRUG.csv')

In [91]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_VICTIM_CIRCUMSTANCES.csv')

In [92]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_VICTIM_INJURY.csv')

In [93]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_VICTIM_OFFENDER_REL.csv')

In [94]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_VICTIM_OFFENSE.csv')

In [95]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_VICTIM.csv')
/usr/local/lib/python2.7/site-packages/IPython/core/interactiveshell.py:2714: DtypeWarning: Columns (0,1,2,3,4,8,9,11,12) have mixed types. Specify dtype option on import or set low_memory=False.
  interactivity=interactivity, compiler=compiler, result=result)

In [96]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_VICTIM.csv',low_memory=False)

In [97]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_WEAPON.csv')

In [98]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/REF_STATE.csv')

In [99]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/REF_RACE.csv')
---------------------------------------------------------------------------
ParserError                               Traceback (most recent call last)
<ipython-input-99-b2f6a71e4b24> in <module>()
----> 1 NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/REF_RACE.csv')

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)
    676                     skip_blank_lines=skip_blank_lines)
    677 
--> 678         return _read(filepath_or_buffer, kwds)
    679 
    680     parser_f.__name__ = name

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _read(filepath_or_buffer, kwds)
    444 
    445     try:
--> 446         data = parser.read(nrows)
    447     finally:
    448         parser.close()

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1034                 raise ValueError('skipfooter not supported for iteration')
   1035 
-> 1036         ret = self._engine.read(nrows)
   1037 
   1038         # May alter columns / col_dict

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1846     def read(self, nrows=None):
   1847         try:
-> 1848             data = self._reader.read(nrows)
   1849         except StopIteration:
   1850             if self._first_chunk:

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.read()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_low_memory()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._tokenize_rows()

pandas/_libs/parsers.pyx in pandas._libs.parsers.raise_parser_error()

ParserError: Error tokenizing data. C error: Expected 7 fields in line 9, saw 9


In [100]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/agency_participation.csv')

In [101]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/agencies.csv')

In [102]: climate=pd.read_csv('/Users/arunsingh/Downloads/TX/DFV-Daily-Weather-2017.tsv',delimiter='\t')
---------------------------------------------------------------------------
IOError                                   Traceback (most recent call last)
<ipython-input-102-a8e34974598a> in <module>()
----> 1 climate=pd.read_csv('/Users/arunsingh/Downloads/TX/DFV-Daily-Weather-2017.tsv',delimiter='\t')

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)
    676                     skip_blank_lines=skip_blank_lines)
    677 
--> 678         return _read(filepath_or_buffer, kwds)
    679 
    680     parser_f.__name__ = name

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _read(filepath_or_buffer, kwds)
    438 
    439     # Create the parser.
--> 440     parser = TextFileReader(filepath_or_buffer, **kwds)
    441 
    442     if chunksize or iterator:

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in __init__(self, f, engine, **kwds)
    785             self.options['has_index_names'] = kwds['has_index_names']
    786 
--> 787         self._make_engine(self.engine)
    788 
    789     def close(self):

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _make_engine(self, engine)
   1012     def _make_engine(self, engine='c'):
   1013         if engine == 'c':
-> 1014             self._engine = CParserWrapper(self.f, **self.options)
   1015         else:
   1016             if engine == 'python':

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in __init__(self, src, **kwds)
   1706         kwds['usecols'] = self.usecols
   1707 
-> 1708         self._reader = parsers.TextReader(src, **kwds)
   1709 
   1710         passed_names = self.names is None

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.__cinit__()

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._setup_parser_source()

IOError: File /Users/arunsingh/Downloads/TX/DFV-Daily-Weather-2017.tsv does not exist

In [103]: climate=pd.read_csv('/Users/arunsingh/Downloads/DFV-Daily-Weather-2017.tsv',delimiter='\t')

In [104]: print(climate.head())
         Date  TempMax  TempMin  TempAvg  TempDep  HDD  CDD Precipitation NewSnow SnowDepth
0  2017-01-01       66       43     54.5      9.1   10    0          0.07     0.0         0
1  2017-01-02       73       54     63.5     18.1    1    0          0.50     0.0         0
2  2017-01-03       61       39     50.0      4.6   15    0          0.00     0.0         0
3  2017-01-04       40       32     36.0     -9.4   29    0          0.00     0.0         0
4  2017-01-05       40       26     33.0    -12.4   32    0          0.00     0.0         0

In [105]: print(climate.head(100))
          Date  TempMax  TempMin  TempAvg  TempDep  HDD  CDD Precipitation NewSnow SnowDepth
0   2017-01-01       66       43     54.5      9.1   10    0          0.07     0.0         0
1   2017-01-02       73       54     63.5     18.1    1    0          0.50     0.0         0
2   2017-01-03       61       39     50.0      4.6   15    0          0.00     0.0         0
3   2017-01-04       40       32     36.0     -9.4   29    0          0.00     0.0         0
4   2017-01-05       40       26     33.0    -12.4   32    0          0.00     0.0         0
5   2017-01-06       27       19     23.0    -22.4   42    0          0.01     0.1         0
6   2017-01-07       40       14     27.0    -18.4   38    0          0.00     0.0         T
7   2017-01-08       49       20     34.5    -11.0   30    0          0.00     0.0         0
8   2017-01-09       69       36     52.5      7.0   12    0          0.00     0.0         0
9   2017-01-10       79       57     68.0     22.5    0    3          0.00     0.0         0
10  2017-01-11       80       56     68.0     22.4    0    3          0.00     0.0         0
11  2017-01-12       78       46     62.0     16.4    3    0          0.00     0.0         0
12  2017-01-13       49       41     45.0     -0.6   20    0          0.20     0.0         0
13  2017-01-14       44       39     41.5     -4.2   23    0          0.01     0.0         0
14  2017-01-15       66       43     54.5      8.8   10    0          3.16     0.0         0
15  2017-01-16       66       48     57.0     11.2    8    0          0.01     0.0         0
16  2017-01-17       51       43     47.0      1.2   18    0          0.29     0.0         0
17  2017-01-18       54       48     51.0      5.1   14    0          0.12     0.0         0
18  2017-01-19       67       48     57.5     11.5    7    0          0.00     0.0         0
19  2017-01-20       78       47     62.5     16.5    2    0          0.00     0.0         0
20  2017-01-21       73       48     60.5     14.4    4    0          0.02     0.0         0
21  2017-01-22       66       48     57.0     10.8    8    0          0.00     0.0         0
22  2017-01-23       68       41     54.5      8.2   10    0          0.00     0.0         0
23  2017-01-24       80       45     62.5     16.1    2    0          0.00     0.0         0
24  2017-01-25       64       42     53.0      6.5   12    0          0.00     0.0         0
25  2017-01-26       53       33     43.0     -3.6   22    0          0.00     0.0         0
26  2017-01-27       57       33     45.0     -1.7   20    0          0.00     0.0         0
27  2017-01-28       58       38     48.0      1.2   17    0          0.00     0.0         0
28  2017-01-29       69       42     55.5      8.6    9    0          0.00     0.0         0
29  2017-01-30       78       41     59.5     12.5    5    0          0.00     0.0         0
..         ...      ...      ...      ...      ...  ...  ...           ...     ...       ...
70  2017-03-12       55       43     49.0     -7.6   16    0             T     0.0         0
71  2017-03-13       66       44     55.0     -1.8   10    0          0.01     0.0         0
72  2017-03-14       66       37     51.5     -5.6   13    0          0.00     0.0         0
73  2017-03-15       67       45     56.0     -1.4    9    0          0.00     0.0         0
74  2017-03-16       75       54     64.5      6.8    0    0          0.00     0.0         0
75  2017-03-17       80       67     73.5     15.6    0    9          0.00     0.0         0
76  2017-03-18       85       65     75.0     16.8    0   10          0.00     0.0         0
77  2017-03-19       86       63     74.5     16.0    0   10          0.00     0.0         0
78  2017-03-20       92       67     79.5     20.8    0   15          0.00     0.0         0
79  2017-03-21       87       63     75.0     16.0    0   10          0.00     0.0         0
80  2017-03-22       86       65     75.5     16.2    0   11          0.00     0.0         0
81  2017-03-23       87       66     76.5     17.0    0   12          0.00     0.0         0
82  2017-03-24       80       59     69.5      9.7    0    5          0.32     0.0         0
83  2017-03-25       74       55     64.5      4.5    0    0          0.00     0.0         0
84  2017-03-26       86       51     68.5      8.2    0    4          0.00     0.0         0
85  2017-03-27       73       59     66.0      5.4    0    1          0.00     0.0         0
86  2017-03-28       82       59     70.5      9.7    0    6             T     0.0         0
87  2017-03-29       83       58     70.5      9.4    0    6          0.55     0.0         0
88  2017-03-30       80       53     66.5      5.2    0    2          0.00     0.0         0
89  2017-03-31       86       54     70.0      8.4    0    5          0.00     0.0         0
90  2017-04-01       77       59     68.0      6.2    0    3          0.00     0.0         0
91  2017-04-02       72       60     66.0      3.9    0    1          2.14     0.0         0
92  2017-04-03       80       51     65.5      3.2    0    1          0.00     0.0         0
93  2017-04-04       86       58     72.0      9.4    0    7          0.00     0.0         0
94  2017-04-05       73       49     61.0     -1.8    4    0          0.00     0.0         0
95  2017-04-06       78       47     62.5     -0.6    2    0          0.00     0.0         0
96  2017-04-07       80       51     65.5      2.2    0    1          0.00     0.0         0
97  2017-04-08       83       60     71.5      7.9    0    7          0.00     0.0         0
98  2017-04-09       84       67     75.5     11.7    0   11          0.00     0.0         0
99  2017-04-10       82       66     74.0      9.9    0    9          0.53     0.0         0

[100 rows x 10 columns]

In [106]: print(climate.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 365 entries, 0 to 364
Data columns (total 10 columns):
Date             365 non-null object
TempMax          365 non-null int64
TempMin          365 non-null int64
TempAvg          365 non-null float64
TempDep          365 non-null float64
HDD              365 non-null int64
CDD              365 non-null int64
Precipitation    365 non-null object
NewSnow          365 non-null object
SnowDepth        365 non-null object
dtypes: float64(2), int64(4), object(4)
memory usage: 28.6+ KB
None

In [107]: cliamte.Date.value_counts(dropna=False).head()
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-107-67dedd44b621> in <module>()
----> 1 cliamte.Date.value_counts(dropna=False).head()

NameError: name 'cliamte' is not defined

In [108]: climate.Date.value_counts(dropna=False).head()
Out[108]: 
2017-11-13    1
2017-07-20    1
2017-04-03    1
2017-05-01    1
2017-04-07    1
Name: Date, dtype: int64

In [109]: climate.TempMax.value_counts(dropna=False).head()
Out[109]: 
94    17
96    16
82    15
80    15
95    14
Name: TempMax, dtype: int64

In [110]: climate.TempMax.value_counts(dropna=False).head(1000)
Out[110]: 
94     17
96     16
82     15
80     15
95     14
93     14
88     13
91     12
86     11
77     11
90     11
85     11
66     10
84     10
92      9
78      9
83      8
73      8
81      7
72      7
76      7
87      7
89      7
100     7
74      6
69      6
71      6
98      6
79      6
61      6
       ..
49      5
99      5
67      4
97      4
51      3
58      3
53      3
54      3
55      3
57      3
64      3
40      3
62      3
63      3
68      3
56      2
101     2
35      1
41      1
43      1
46      1
44      1
102     1
47      1
48      1
50      1
52      1
60      1
65      1
27      1
Name: TempMax, Length: 61, dtype: int64

In [111]: climate.TempMin.value_counts(dropna=False).head()
Out[111]: 
73    15
75    14
74    14
79    13
62    12
Name: TempMin, dtype: int64

In [112]: climate.TempMin.value_counts(dropna=False).head(1000)
Out[112]: 
73    15
75    14
74    14
79    13
62    12
59    11
70    11
66    10
78    10
72    10
69    10
65     9
47     9
46     9
45     9
50     9
67     9
77     9
49     8
48     8
80     8
54     8
51     7
76     7
58     7
60     7
43     7
41     7
57     6
63     6
42     6
55     6
37     5
53     5
56     5
64     5
38     4
35     4
61     4
34     4
81     4
71     4
36     4
33     3
40     3
39     3
32     2
52     2
68     2
44     2
23     1
19     1
20     1
22     1
83     1
26     1
27     1
30     1
14     1
Name: TempMin, dtype: int64

In [113]: climate.TempAvg.value_counts(dropna=False).head(1000)
Out[113]: 
84.0    12
87.0    10
73.5     9
84.5     8
86.5     8
83.0     7
87.5     7
61.5     7
82.0     7
75.5     7
77.0     7
79.0     7
80.5     7
63.5     7
66.5     7
75.0     6
70.5     6
68.0     6
51.5     6
74.5     6
85.5     5
89.0     5
66.0     5
71.0     5
69.5     5
57.0     5
62.5     5
64.0     4
70.0     4
72.0     4
        ..
37.5     2
36.0     2
71.5     2
52.0     2
51.0     2
68.5     2
60.0     2
57.5     2
27.0     1
34.5     1
23.0     1
33.0     1
50.0     1
47.0     1
29.0     1
53.0     1
43.0     1
48.0     1
46.0     1
58.5     1
44.5     1
69.0     1
90.0     1
92.5     1
45.5     1
46.5     1
43.5     1
40.5     1
40.0     1
55.0     1
Name: TempAvg, Length: 104, dtype: int64

In [114]: climate.TempDep.value_counts(dropna=False).head(1000)
Out[114]: 
 6.5     5
-0.5     4
 4.7     4
 1.3     4
 9.9     4
 9.4     4
-1.8     4
 2.1     4
 1.1     4
-3.6     4
 5.7     4
 4.6     4
-2.8     4
-3.5     4
 2.3     4
 3.9     4
 1.2     3
 8.2     3
-0.6     3
-3.3     3
 0.2     3
-3.4     3
 1.6     3
 8.6     3
-5.5     3
 3.3     3
 2.9     3
 5.2     3
 1.4     3
 4.9     3
        ..
-2.2     1
 5.4     1
-16.3    1
-4.2     1
 15.3    1
-18.4    1
 9.1     1
 6.2     1
 12.3    1
 2.7     1
 7.4     1
 4.2     1
 8.9     1
-6.4     1
-4.9     1
 1.8     1
-4.4     1
 13.8    1
 3.6     1
 4.8     1
 21.3    1
 7.9     1
-12.3    1
 22.8    1
-3.7     1
-2.9     1
-6.8     1
 18.1    1
-22.4    1
-11.0    1
Name: TempDep, Length: 209, dtype: int64

In [115]: climate.HDD.value_counts(dropna=False).head(1000)
Out[115]: 
0     241
1      11
3      10
2       9
13      8
8       7
11      6
16      6
5       5
7       5
9       5
4       5
12      4
10      4
23      4
14      4
6       4
20      4
17      3
15      3
18      2
19      2
27      2
29      2
30      1
32      1
36      1
24      1
25      1
38      1
21      1
22      1
42      1
Name: HDD, dtype: int64

In [116]: climate.CDD.value_counts(dropna=False).head(1000)
Out[116]: 
0     127
22     18
19     15
9      13
20     12
10     12
6      11
16     11
12     11
18     11
2      10
17     10
11     10
24      9
3       9
5       9
21      8
15      8
1       7
13      7
14      7
23      7
7       6
8       6
25      4
26      3
4       3
28      1
Name: CDD, dtype: int64

In [117]: climate.Precipitation.value_counts(dropna=False).head(1000)
Out[117]: 
0.00    254
T        32
0.01      8
0.04      5
0.02      4
0.05      3
0.32      3
0.14      3
0.17      3
0.29      2
0.07      2
0.12      2
0.51      2
0.15      2
0.08      2
0.20      2
0.33      2
0.06      1
0.09      1
3.84      1
0.43      1
0.45      1
0.47      1
0.03      1
0.46      1
1.19      1
0.62      1
3.16      1
1.20      1
2.14      1
0.81      1
0.53      1
0.99      1
0.31      1
0.34      1
1.07      1
0.74      1
0.56      1
0.18      1
0.19      1
0.50      1
1.71      1
0.13      1
0.16      1
0.73      1
2.95      1
1.78      1
1.21      1
0.27      1
0.87      1
0.55      1
Name: Precipitation, dtype: int64

In [118]: climate.NewSnow.value_counts(dropna=False).head(1000)
Out[118]: 
0.0    363
T        1
0.1      1
Name: NewSnow, dtype: int64

In [119]: climate.SnowDepth.value_counts(dropna=False).head(1000)
Out[119]: 
0    364
T      1
Name: SnowDepth, dtype: int64

In [120]: NIBRS_AGE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_AGE.csv')

In [121]: print(NIBRS_AGE.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 7 entries, 0 to 6
Data columns (total 3 columns):
    AGE_ID                                                                                              7 non-null object
AG                                                                                                      7 non-null object
AGE_NAME                                                                                                7 non-null object
dtypes: object(3)
memory usage: 240.0+ bytes
None

In [122]: RangeIndex: 7 entries, 0 to 6
     ...: Data columns (total 3 columns):
     ...:     AGE_ID                                                                                              7 non-null object
     ...: AG                                                                                                      7 non-null object
     ...: AGE_NAME                                                                                                7 non-null object
     ...: dtypes: object(3)
  File "<ipython-input-122-fafee68d5c78>", line 1
    RangeIndex: 7 entries, 0 to 6
              ^
SyntaxError: invalid syntax


In [123]: NIBRS_AGE.AGE_ID.value_counts(dropna=False).head(1000)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-123-3bcf33c9342c> in <module>()
----> 1 NIBRS_AGE.AGE_ID.value_counts(dropna=False).head(1000)

/usr/local/lib/python2.7/site-packages/pandas/core/generic.pyc in __getattr__(self, name)
   4374             if self._info_axis._can_hold_identifiers_and_holds_name(name):
   4375                 return self[name]
-> 4376             return object.__getattribute__(self, name)
   4377 
   4378     def __setattr__(self, name, value):

AttributeError: 'DataFrame' object has no attribute 'AGE_ID'

In [124]: print(NIBRS_AGE.columns)
Index([u'    AGE_ID', u'AG',
       u'AGE_NAME                                                                                            '],
      dtype='object')

In [125]: NIBRS_AGE.    AGE_ID.value_counts(dropna=False).head(1000)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-125-6e1774b1c1aa> in <module>()
----> 1 NIBRS_AGE.    AGE_ID.value_counts(dropna=False).head(1000)

/usr/local/lib/python2.7/site-packages/pandas/core/generic.pyc in __getattr__(self, name)
   4374             if self._info_axis._can_hold_identifiers_and_holds_name(name):
   4375                 return self[name]
-> 4376             return object.__getattribute__(self, name)
   4377 
   4378     def __setattr__(self, name, value):

AttributeError: 'DataFrame' object has no attribute 'AGE_ID'

In [126]: NIBRS_ASSIGNMENT_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_ASSIGNMENT_TYPE.csv')

In [127]: print(NIBRS_ASSIGNMENT_TYPE.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 8 entries, 0 to 7
Data columns (total 3 columns):
ASSIGNMENT_TYPE_ID                                                                                      8 non-null object
A                                                                                                       8 non-null object
ASSIGNMENT_TYPE_NAME                                                                                    8 non-null object
dtypes: object(3)
memory usage: 264.0+ bytes
None

In [128]: NIBRS_ASSIGNMENT_TYPE.ASSIGNMENT_TYPE_ID.value_counts(dropna=False).head(1000)
Out[128]: 
------------------    1
                 5    1
                 4    1
                 7    1
                 6    1
                 1    1
                 3    1
                 2    1
Name: ASSIGNMENT_TYPE_ID, dtype: int64

In [129]: NIBRS_ASSIGNMENT_TYPE.A.value_counts(dropna=False).head(1000)
Out[129]: 
L    1
-    1
J    1
K    1
H    1
I    1
F    1
G    1
Name: A, dtype: int64

In [130]: NIBRS_ASSIGNMENT_TYPE.ASSIGNMENT_TYPE_NAME.value_counts(dropna=False).head(1000)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-130-1affbd6bb710> in <module>()
----> 1 NIBRS_ASSIGNMENT_TYPE.ASSIGNMENT_TYPE_NAME.value_counts(dropna=False).head(1000)

/usr/local/lib/python2.7/site-packages/pandas/core/generic.pyc in __getattr__(self, name)
   4374             if self._info_axis._can_hold_identifiers_and_holds_name(name):
   4375                 return self[name]
-> 4376             return object.__getattribute__(self, name)
   4377 
   4378     def __setattr__(self, name, value):

AttributeError: 'DataFrame' object has no attribute 'ASSIGNMENT_TYPE_NAME'

In [131]: print(NIBRS_ASSIGNMENT_TYPE.columns)
Index([u'ASSIGNMENT_TYPE_ID', u'A',
       u'ASSIGNMENT_TYPE_NAME                                                                                '],
      dtype='object')

In [132]: NIBRS_AGE.AGE_ID.value_counts(dropna=False).head(1000)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-132-3bcf33c9342c> in <module>()
----> 1 NIBRS_AGE.AGE_ID.value_counts(dropna=False).head(1000)

/usr/local/lib/python2.7/site-packages/pandas/core/generic.pyc in __getattr__(self, name)
   4374             if self._info_axis._can_hold_identifiers_and_holds_name(name):
   4375                 return self[name]
-> 4376             return object.__getattribute__(self, name)
   4377 
   4378     def __setattr__(self, name, value):

AttributeError: 'DataFrame' object has no attribute 'AGE_ID'

In [133]: NIBRS_ARREST_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_ARREST_TYPE.csv')

In [134]: print(NIBRS_ARREST_TYPE.columns))
  File "<ipython-input-134-c509dc5addf8>", line 1
    print(NIBRS_ARREST_TYPE.columns))
                                    ^
SyntaxError: invalid syntax


In [135]: print(NIBRS_ARREST_TYPE.columns)
Index([u'ARREST_TYPE_ID', u'A',
       u'ARREST_TYPE_NAME                                                                                    '],
      dtype='object')

In [136]: print(NIBRS_ARREST_TYPE.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 4 entries, 0 to 3
Data columns (total 3 columns):
ARREST_TYPE_ID                                                                                          4 non-null object
A                                                                                                       4 non-null object
ARREST_TYPE_NAME                                                                                        4 non-null object
dtypes: object(3)
memory usage: 168.0+ bytes
None

In [137]: NIBRS_ARREST_TYPE.ARREST_TYPE_ID.value_counts(dropna=False).head(1000)
Out[137]: 
             1    1
             3    1
             2    1
--------------    1
Name: ARREST_TYPE_ID, dtype: int64

In [138]: NIBRS_ARREST_TYPE.A.value_counts(dropna=False).head(1000)
Out[138]: 
O    1
T    1
-    1
S    1
Name: A, dtype: int64

In [139]: NIBRS_CIRCUMSTANCES=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_CIRCUMSTANCES.csv')

In [140]: print(NIBRS_CIRCUMSTANCES.columns)
Index([u'CIRCUMSTANCES_ID', u'C', u'CIRCUMSTANCES_CODE',
       u'CIRCUMSTANCES_NAME                                                                                  '],
      dtype='object')

In [141]: print(NIBRS_CIRCUMSTANCES.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 18 entries, 0 to 17
Data columns (total 4 columns):
CIRCUMSTANCES_ID                                                                                        18 non-null object
C                                                                                                       18 non-null object
CIRCUMSTANCES_CODE                                                                                      18 non-null object
CIRCUMSTANCES_NAME                                                                                      18 non-null object
dtypes: object(4)
memory usage: 648.0+ bytes
None

In [142]: NIBRS_CIRCUMSTANCES.IRCUMSTANCES_ID.value_counts(dropna=False).head(1000)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-142-4f90f8a0ff83> in <module>()
----> 1 NIBRS_CIRCUMSTANCES.IRCUMSTANCES_ID.value_counts(dropna=False).head(1000)

/usr/local/lib/python2.7/site-packages/pandas/core/generic.pyc in __getattr__(self, name)
   4374             if self._info_axis._can_hold_identifiers_and_holds_name(name):
   4375                 return self[name]
-> 4376             return object.__getattribute__(self, name)
   4377 
   4378     def __setattr__(self, name, value):

AttributeError: 'DataFrame' object has no attribute 'IRCUMSTANCES_ID'

In [143]: NIBRS_CIRCUMSTANCES.CIRCUMSTANCES_ID.value_counts(dropna=False).head(1000)
Out[143]: 
              14    1
              15    1
               1    1
               2    1
               3    1
               4    1
               5    1
               6    1
               7    1
               8    1
               9    1
              13    1
              12    1
              11    1
              10    1
              17    1
              16    1
----------------    1
Name: CIRCUMSTANCES_ID, dtype: int64

In [144]: NIBRS_CIRCUMSTANCES.C.value_counts(dropna=False).head(1000)
Out[144]: 
A    10
N     5
J     2
-     1
Name: C, dtype: int64

In [145]: NIBRS_CIRCUMSTANCES.CIRCUMSTANCES_CODE.value_counts(dropna=False).head(1000)
Out[145]: 
                34    1
                30    1
                 3    1
                 1    1
                 6    1
                 7    1
                 4    1
                 5    1
------------------    1
                 8    1
                 9    1
                10    1
                20    1
                21    1
                33    1
                32    1
                31    1
                 2    1
Name: CIRCUMSTANCES_CODE, dtype: int64

In [146]: NIBRS_DRUG_MEASURE_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_DRUG_MEASURE_TYPE.csv')

In [147]: print(NIBRS_DRUG_MEASURE_TYPE.columns)
Index([u'DRUG_MEASURE_TYPE_ID', u'DR',
       u'DRUG_MEASURE_NAME                                                                                   '],
      dtype='object')

In [148]: print(NIBRS_DRUG_MEASURE_TYPE.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 12 entries, 0 to 11
Data columns (total 3 columns):
DRUG_MEASURE_TYPE_ID                                                                                    12 non-null object
DR                                                                                                      12 non-null object
DRUG_MEASURE_NAME                                                                                       12 non-null object
dtypes: object(3)
memory usage: 360.0+ bytes
None

In [149]: NIBRS_DRUG_MEASURE_TYPE.DRUG_MEASURE_TYPE_ID.value_counts(dropna=False).head(1000)
Out[149]: 
                   9    1
                   8    1
                  11    1
                   5    1
                   3    1
                   2    1
                   1    1
                  10    1
                   7    1
                   6    1
                   4    1
--------------------    1
Name: DRUG_MEASURE_TYPE_ID, dtype: int64

In [150]: NIBRS_DRUG_MEASURE_TYPE.DR.value_counts(dropna=False).head(1000)
Out[150]: 
FO    1
NP    1
GL    1
GM    1
ML    1
--    1
DU    1
OZ    1
LB    1
XX    1
LT    1
KG    1
Name: DR, dtype: int64

In [151]: NIBRS_INJURY=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_INJURY.csv')

In [152]: print(NIBRS_INJURY.columns)
Index([u' INJURY_ID', u'I',
       u'INJURY_NAME                                                                                         '],
      dtype='object')

In [153]: print(NIBRS_INJURY.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 9 entries, 0 to 8
Data columns (total 3 columns):
 INJURY_ID                                                                                              9 non-null object
I                                                                                                       9 non-null object
INJURY_NAME                                                                                             9 non-null object
dtypes: object(3)
memory usage: 288.0+ bytes
None

In [154]: NIBRS_INJURY.I.value_counts(dropna=False).head(1000)
Out[154]: 
N    1
O    1
L    1
-    1
T    1
I    1
M    1
U    1
B    1
Name: I, dtype: int64

In [155]: NIBRS_ETHNICITY=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_ETHNICITY.csv')

In [156]: print(NIBRS_ETHNICITY.columns)
Index([u'ETHNICITY_ID', u'E',
       u'ETHNICITY_NAME                                                                                      '],
      dtype='object')

In [157]: print(NIBRS_ETHNICITY.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 5 entries, 0 to 4
Data columns (total 3 columns):
ETHNICITY_ID                                                                                            5 non-null object
E                                                                                                       5 non-null object
ETHNICITY_NAME                                                                                          5 non-null object
dtypes: object(3)
memory usage: 192.0+ bytes
None

In [158]: NIBRS_ETHNICITY.ETHNICITY_ID.value_counts(dropna=False).head(1000)
Out[158]: 
           3    1
           2    1
           1    1
           4    1
------------    1
Name: ETHNICITY_ID, dtype: int64

In [159]: NIBRS_ETHNICITY.E.value_counts(dropna=False).head(1000)
Out[159]: 
N    1
M    1
-    1
U    1
H    1
Name: E, dtype: int64

In [160]: NIBRS_LOCATION_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_LOCATION_TYPE.csv')

In [161]: print(NIBRS_LOCATION_TYPE.columns)
Index([u'LOCATION_ID', u'LO',
       u'LOCATION_NAME                                                                                       '],
      dtype='object')

In [162]: print(NIBRS_LOCATION_TYPE.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 48 entries, 0 to 47
Data columns (total 3 columns):
LOCATION_ID                                                                                             48 non-null object
LO                                                                                                      48 non-null object
LOCATION_NAME                                                                                           48 non-null object
dtypes: object(3)
memory usage: 1.2+ KB
None

In [163]: NIBRS_LOCATION_TYPE.LOCATION_ID.value_counts(dropna=False).head(1000)
Out[163]: 
         16    1
          5    1
         47    1
         39    1
         44    1
         11    1
         25    1
         38    1
         22    1
         23    1
         15    1
         14    1
         13    1
         24    1
         10    1
         17    1
         35    1
          4    1
         28    1
         29    1
         31    1
         30    1
         19    1
         33    1
         12    1
         26    1
         46    1
          6    1
          7    1
          0    1
          1    1
          2    1
          3    1
         37    1
         42    1
         21    1
          8    1
         45    1
-----------    1
         41    1
         20    1
         40    1
         34    1
         36    1
         27    1
         32    1
         43    1
         18    1
Name: LOCATION_ID, dtype: int64

In [164]: NIBRS_LOCATION_TYPE.LO.value_counts(dropna=False).head(1000)
Out[164]: 
54    1
16    1
23    1
46    1
53    1
22    1
47    1
51    1
12    1
39    1
19    1
21    1
44    1
49    1
11    1
58    1
20    1
57    1
10    1
09    1
17    1
55    1
42    1
13    1
02    1
03    1
38    1
52    1
50    1
48    1
24    1
40    1
15    1
41    1
14    1
25    1
37    1
00    1
45    1
08    1
18    1
--    1
05    1
04    1
07    1
06    1
01    1
56    1
Name: LO, dtype: int64

In [165]: NIBRS_JUSTIFIABLE_FORCE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_JUSTIFIABLE_FORCE.csv')

In [166]: print(NIBRS_JUSTIFIABLE_FORCE.columns)
Index([u'JUSTIFIABLE_FORCE_ID', u'J',
       u'JUSTIFIABLE_FORCE_NAME                                                                              '],
      dtype='object')

In [167]: print(NIBRS_JUSTIFIABLE_FORCE.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 9 entries, 0 to 8
Data columns (total 3 columns):
JUSTIFIABLE_FORCE_ID                                                                                    9 non-null object
J                                                                                                       9 non-null object
JUSTIFIABLE_FORCE_NAME                                                                                  9 non-null object
dtypes: object(3)
memory usage: 288.0+ bytes
None

In [168]: NIBRS_JUSTIFIABLE_FORCE.JUSTIFIABLE_FORCE_ID.value_counts(dropna=False).head(1000)
Out[168]: 
                   8    1
                   5    1
                   3    1
                   2    1
                   1    1
                   7    1
                   6    1
                   4    1
--------------------    1
Name: JUSTIFIABLE_FORCE_ID, dtype: int64

In [169]: NIBRS_JUSTIFIABLE_FORCE.J.value_counts(dropna=False).head(1000)
Out[169]: 
U    1
-    1
F    1
G    1
D    1
E    1
B    1
C    1
A    1
Name: J, dtype: int64

In [170]: NIBRS_RELATIONSHIP=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_RELATIONSHIP.csv')

In [171]: print(NIBRS_RELATIONSHIP.columns)
Index([u'RELATIONSHIP_ID', u'RE',
       u'RELATIONSHIP_NAME                                                                                   '],
      dtype='object')

In [172]: print(NIBRS_RELATIONSHIP.info)
<bound method DataFrame.info of     RELATIONSHIP_ID                                                 ...                                                  RELATIONSHIP_NAME                                                                                   
0   ---------------                                                 ...                                                   ----------------------------------------------...                                                  
1                 1                                                 ...                                                   Victim Was Acquaintance                       ...                                                  
2                 2                                                 ...                                                   Victim Was Babysittee                         ...                                                  
3                 3                                                 ...                                                   Victim Was Boyfriend/Girlfriend               ...                                                  
4                 4                                                 ...                                                   Victim Was Child of Boyfriend or Girlfriend   ...                                                  
5                 5                                                 ...                                                   Victim Was Child                              ...                                                  
6                 6                                                 ...                                                   Victim Was Common-Law Spouse                  ...                                                  
7                 7                                                 ...                                                   Victim was Employee                           ...                                                  
8                 8                                                 ...                                                   Victim was Employer                           ...                                                  
9                 9                                                 ...                                                   Victim Was Friend                             ...                                                  
10               10                                                 ...                                                   Victim Was Grandchild                         ...                                                  
11               11                                                 ...                                                   Victim Was Grandparent                        ...                                                  
12               12                                                 ...                                                   Homosexual Relationship                       ...                                                  
13               13                                                 ...                                                   Victim Was In-law                             ...                                                  
14               14                                                 ...                                                   Victim Was Neighbor                           ...                                                  
15               15                                                 ...                                                   Victim Was Other Family Member                ...                                                  
16               16                                                 ...                                                   Victim was Otherwise Known                    ...                                                  
17               17                                                 ...                                                   Victim Was Parent                             ...                                                  
18               18                                                 ...                                                   Relationship Unknown                          ...                                                  
19               19                                                 ...                                                   Victim Was Sibling                            ...                                                  
20               20                                                 ...                                                   Victim Was Stepchild                          ...                                                  
21               21                                                 ...                                                   Victim Was Spouse                             ...                                                  
22               22                                                 ...                                                   Victim Was Stepparent                         ...                                                  
23               23                                                 ...                                                   Victim Was Stepsibling                        ...                                                  
24               24                                                 ...                                                   Victim Was Stranger                           ...                                                  
25               25                                                 ...                                                   Victim Was Offender                           ...                                                  
26               26                                                 ...                                                   Victim was Ex-Spouse                          ...                                                  

[27 rows x 3 columns]>

In [173]: print(NIBRS_RELATIONSHIP.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 27 entries, 0 to 26
Data columns (total 3 columns):
RELATIONSHIP_ID                                                                                         27 non-null object
RE                                                                                                      27 non-null object
RELATIONSHIP_NAME                                                                                       27 non-null object
dtypes: object(3)
memory usage: 720.0+ bytes
None

In [174]: NIBRS_RELATIONSHIP.RELATIONSHIP_ID.value_counts(dropna=False).head(1000)
Out[174]: 
              1    1
              6    1
             18    1
             19    1
             21    1
             20    1
             16    1
             17    1
             10    1
             24    1
             12    1
             13    1
             26    1
             25    1
              2    1
             11    1
             22    1
---------------    1
             23    1
              9    1
              8    1
              7    1
             14    1
              5    1
              4    1
              3    1
             15    1
Name: RELATIONSHIP_ID, dtype: int64

In [175]: NIBRS_RELATIONSHIP.RE.value_counts(dropna=False).head(1000)
Out[175]: 
SE    1
ER    1
FR    1
BG    1
GP    1
HR    1
CF    1
VO    1
AQ    1
GC    1
SS    1
CS    1
XS    1
EE    1
IL    1
OK    1
--    1
OF    1
SP    1
NE    1
RU    1
ST    1
PA    1
CH    1
SC    1
SB    1
BE    1
Name: RE, dtype: int64

In [176]: NIBRS_USING_LIST=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_USING_LIST.csv')

In [177]: df.columns = df.columns.str.strip()

In [178]: print(NIBRS_USING_LIST.columns)
Index([u'SUSPECT_USING_ID', u'S',
       u'SUSPECT_USING_NAME                                                                                  '],
      dtype='object')

In [179]: NIBRS_USING_LIST.columns=NIBRS_USING_LIST.columns.str.strip()

In [180]: print(NIBRS_USING_LIST.columns)
Index([u'SUSPECT_USING_ID', u'S', u'SUSPECT_USING_NAME'], dtype='object')

In [181]: NIBRS_USING_LIST.rename(columns=lambda x: x.strip())
Out[181]: 
   SUSPECT_USING_ID  S                                 SUSPECT_USING_NAME
0  ----------------  -  ----------------------------------------------...
1                 1  A  Alcohol                                       ...
2                 2  C  Computer Equipment                            ...
3                 3  D  Drugs/Narcotics                               ...
4                 4  N  Not Applicable                                ...

In [182]: print(NIBRS_USING_LIST.columns)
Index([u'SUSPECT_USING_ID', u'S', u'SUSPECT_USING_NAME'], dtype='object')

In [183]: print(NIBRS_USING_LIST.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 5 entries, 0 to 4
Data columns (total 3 columns):
SUSPECT_USING_ID      5 non-null object
S                     5 non-null object
SUSPECT_USING_NAME    5 non-null object
dtypes: object(3)
memory usage: 192.0+ bytes
None

In [184]: NIBRS_USING_LIST.SUSPECT_USING_ID.value_counts(dropna=False).head(1000)
Out[184]: 
               4    1
               3    1
               2    1
               1    1
----------------    1
Name: SUSPECT_USING_ID, dtype: int64

In [185]: NIBRS_USING_LIST.S.value_counts(dropna=False).head(1000)
Out[185]: 
N    1
D    1
-    1
C    1
A    1
Name: S, dtype: int64

In [186]: NIBRS_USING_LIST.SUSPECT_USING_NAME.value_counts(dropna=False).head(1000)
Out[186]: 
Drugs/Narcotics                                                                                         1
Not Applicable                                                                                          1
Computer Equipment                                                                                      1
Alcohol                                                                                                 1
----------------------------------------------------------------------------------------------------    1
Name: SUSPECT_USING_NAME, dtype: int64

In [187]: NIBRS_SUSPECTED_DRUG_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_SUSPECTED_DRUG_TYPE.csv')

In [188]: NIBRS_SUSPECTED_DRUG_TYPE.rename(columns=lambda x: x.strip())
Out[188]: 
    SUSPECTED_DRUG_TYPE_ID  S                                SUSPECTED_DRUG_NAME
0   ----------------------  -  ----------------------------------------------...
1                        1  A  Crack Cocaine                                 ...
2                        2  B  Cocaine                                       ...
3                        3  C  Hashish                                       ...
4                        4  D  Heroin                                        ...
5                        5  E  Marijuana                                     ...
6                        6  F  Morphine                                      ...
7                        7  G  Opium                                         ...
8                        8  H  Other Narcotics                               ...
9                        9  I  LSD                                           ...
10                      10  J  PCP                                           ...
11                      11  K  Other Hallucingens                            ...
12                      12  L  Meth/ Amphetamines                            ...
13                      13  M  Other Stimulants                              ...
14                      14  N  Barbiturates                                  ...
15                      15  O  Other Depressants                             ...
16                      16  P  Other Drugs                                   ...
17                      17  U  Unknown                                       ...
18                      18  X  More Than 3 Types                             ...

In [189]: print(NIBRS_SUSPECTED_DRUG_TYPE.columns)
Index([u'SUSPECTED_DRUG_TYPE_ID', u'S',
       u'SUSPECTED_DRUG_NAME                                                                                 '],
      dtype='object')

In [190]: NIBRS_SUSPECTED_DRUG_TYPE.rename(columns=lambda x: x.strip())
Out[190]: 
    SUSPECTED_DRUG_TYPE_ID  S                                SUSPECTED_DRUG_NAME
0   ----------------------  -  ----------------------------------------------...
1                        1  A  Crack Cocaine                                 ...
2                        2  B  Cocaine                                       ...
3                        3  C  Hashish                                       ...
4                        4  D  Heroin                                        ...
5                        5  E  Marijuana                                     ...
6                        6  F  Morphine                                      ...
7                        7  G  Opium                                         ...
8                        8  H  Other Narcotics                               ...
9                        9  I  LSD                                           ...
10                      10  J  PCP                                           ...
11                      11  K  Other Hallucingens                            ...
12                      12  L  Meth/ Amphetamines                            ...
13                      13  M  Other Stimulants                              ...
14                      14  N  Barbiturates                                  ...
15                      15  O  Other Depressants                             ...
16                      16  P  Other Drugs                                   ...
17                      17  U  Unknown                                       ...
18                      18  X  More Than 3 Types                             ...

In [191]: print(NIBRS_SUSPECTED_DRUG_TYPE.columns)
Index([u'SUSPECTED_DRUG_TYPE_ID', u'S',
       u'SUSPECTED_DRUG_NAME                                                                                 '],
      dtype='object')

In [192]: NIBRS_SUSPECTED_DRUG_TYPE.rename(columns=lambda y: y.strip())
Out[192]: 
    SUSPECTED_DRUG_TYPE_ID  S                                SUSPECTED_DRUG_NAME
0   ----------------------  -  ----------------------------------------------...
1                        1  A  Crack Cocaine                                 ...
2                        2  B  Cocaine                                       ...
3                        3  C  Hashish                                       ...
4                        4  D  Heroin                                        ...
5                        5  E  Marijuana                                     ...
6                        6  F  Morphine                                      ...
7                        7  G  Opium                                         ...
8                        8  H  Other Narcotics                               ...
9                        9  I  LSD                                           ...
10                      10  J  PCP                                           ...
11                      11  K  Other Hallucingens                            ...
12                      12  L  Meth/ Amphetamines                            ...
13                      13  M  Other Stimulants                              ...
14                      14  N  Barbiturates                                  ...
15                      15  O  Other Depressants                             ...
16                      16  P  Other Drugs                                   ...
17                      17  U  Unknown                                       ...
18                      18  X  More Than 3 Types                             ...

In [193]: print(NIBRS_SUSPECTED_DRUG_TYPE.columns)
Index([u'SUSPECTED_DRUG_TYPE_ID', u'S',
       u'SUSPECTED_DRUG_NAME                                                                                 '],
      dtype='object')

In [194]: NIBRS_SUSPECTED_DRUG_TYPE.rename(columns=lambda y: y.strip(),inplace=True)

In [195]: print(NIBRS_SUSPECTED_DRUG_TYPE.columns)
Index([u'SUSPECTED_DRUG_TYPE_ID', u'S', u'SUSPECTED_DRUG_NAME'], dtype='object')

In [196]: NIBRS_WEAPON_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_WEAPON_TYPE.csv').rename(columns=lambda x: x.strip(),inplace=True)

In [197]: print(NIBRS_WEAPON_TYPE.columns)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-197-05ef384bbe8d> in <module>()
----> 1 print(NIBRS_WEAPON_TYPE.columns)

AttributeError: 'NoneType' object has no attribute 'columns'

In [198]: NIBRS_WEAPON_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_WEAPON_TYPE.csv').rename(columns=lambda x: x.strip())

In [199]: print(NIBRS_WEAPON_TYPE.columns)
Index([u'WEAPON_ID', u'WEA', u'WEAPON_NAME', u'S'], dtype='object')

In [200]: print(NIBRS_SUSPECTED_DRUG_TYPE.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 19 entries, 0 to 18
Data columns (total 3 columns):
SUSPECTED_DRUG_TYPE_ID    19 non-null object
S                         19 non-null object
SUSPECTED_DRUG_NAME       19 non-null object
dtypes: object(3)
memory usage: 528.0+ bytes
None

In [201]: NIBRS_SUSPECTED_DRUG_TYPE.SUSPECTED_DRUG_TYPE_ID.value_counts(dropna=False).head(1000)
Out[201]: 
                    18    1
                     9    1
                     7    1
                     4    1
                     5    1
                     2    1
                     3    1
                     1    1
                     8    1
                    15    1
----------------------    1
                    14    1
                    17    1
                    16    1
                    11    1
                    10    1
                    13    1
                    12    1
                     6    1
Name: SUSPECTED_DRUG_TYPE_ID, dtype: int64

In [202]: NIBRS_SUSPECTED_DRUG_TYPE.S.value_counts(dropna=False).head(1000)
Out[202]: 
M    1
H    1
C    1
B    1
E    1
D    1
G    1
F    1
I    1
K    1
X    1
J    1
-    1
L    1
O    1
N    1
P    1
U    1
A    1
Name: S, dtype: int64

In [203]: NIBRS_SUSPECTED_DRUG_TYPE.SUSPECTED_DRUG_NAME.value_counts(dropna=False).head(1000)
Out[203]: 
PCP                                                                                                     1
More Than 3 Types                                                                                       1
Other Stimulants                                                                                        1
Opium                                                                                                   1
Meth/ Amphetamines                                                                                      1
LSD                                                                                                     1
Morphine                                                                                                1
Heroin                                                                                                  1
Other Hallucingens                                                                                      1
Unknown                                                                                                 1
Other Depressants                                                                                       1
Cocaine                                                                                                 1
----------------------------------------------------------------------------------------------------    1
Other Drugs                                                                                             1
Barbiturates                                                                                            1
Hashish                                                                                                 1
Crack Cocaine                                                                                           1
Other Narcotics                                                                                         1
Marijuana                                                                                               1
Name: SUSPECTED_DRUG_NAME, dtype: int64

In [204]: print(NIBRS_WEAPON_TYPE.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 29 entries, 0 to 28
Data columns (total 4 columns):
WEAPON_ID      29 non-null object
WEA            29 non-null object
WEAPON_NAME    29 non-null object
S              29 non-null object
dtypes: object(4)
memory usage: 1000.0+ bytes
None

In [205]: NIBRS_WEAPON_TYPE.WEAPON_ID.value_counts(dropna=False).head(1000)
Out[205]: 
        26    1
        18    1
        20    1
         8    1
         9    1
         2    1
         3    1
        21    1
         1    1
         6    1
         7    1
         4    1
         5    1
        19    1
        28    1
        17    1
        11    1
        10    1
        13    1
        12    1
        15    1
        14    1
        22    1
        23    1
        24    1
        16    1
        25    1
----------    1
        27    1
Name: WEAPON_ID, dtype: int64

In [206]: NIBRS_WEAPON_TYPE.WEA.value_counts(dropna=False).head(1000)
Out[206]: 
95     1
70     1
13     1
20     1
11     1
12     1
16     1
17     1
---    1
15     1
75     1
60     1
14     1
30     1
55     1
99     1
12A    1
13A    1
11A    1
65     1
40     1
80     1
35     1
50     1
15A    1
90     1
85     1
14A    1
01     1
Name: WEA, dtype: int64

In [207]: NIBRS_WEAPON_TYPE.WEAPON_NAME.value_counts(dropna=False).head(1000)
Out[207]: 
Blunt Object                                                                                            1
Club/Blackjack/Brass Knuckles                                                                           1
Drugs/Narcotics/Sleeping Pills                                                                          1
Personal Weapons                                                                                        1
Firearm (Automatic)                                                                                     1
Motor Vehicle                                                                                           1
Unarmed                                                                                                 1
None                                                                                                    1
Other Firearm                                                                                           1
Firearm                                                                                                 1
Unknown                                                                                                 1
----------------------------------------------------------------------------------------------------    1
Lethal Cutting Instrument                                                                               1
Shotgun (Automatic)                                                                                     1
Shotgun                                                                                                 1
Knife/Cutting Instrument                                                                                1
Rifle                                                                                                   1
Asphyxiation                                                                                            1
Handgun                                                                                                 1
Fire/Incendiary Device                                                                                  1
Handgun (Automatic)                                                                                     1
Poison                                                                                                  1
Drowning                                                                                                1
Explosives                                                                                              1
Other                                                                                                   1
Other Firearm (Automatic)                                                                               1
Pushed or Thrown Out Window                                                                             1
Rifle (Automatic)                                                                                       1
Strangulation - Include Hanging                                                                         1
Name: WEAPON_NAME, dtype: int64

In [208]: NIBRS_WEAPON_TYPE.S.value_counts(dropna=False).head(1000)
Out[208]: 
Y    17
N    11
-     1
Name: S, dtype: int64

In [209]: NIBRS_VICTIM_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_VICTIM_TYPE.csv').rename(columns=lambda x: x.strip())

In [210]: print(NIBRS_VICTIM_TYPE.columns)
Index([u'VICTIM_TYPE_ID', u'V', u'VICTIM_TYPE_NAME'], dtype='object')

In [211]: print(NIBRS_VICTIM_TYPE.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 10 entries, 0 to 9
Data columns (total 3 columns):
VICTIM_TYPE_ID      10 non-null object
V                   10 non-null object
VICTIM_TYPE_NAME    10 non-null object
dtypes: object(3)
memory usage: 312.0+ bytes
None

In [212]: NIBRS_VICTIM_TYPE.VICTIM_TYPE_ID.value_counts(dropna=False).head(1000)
Out[212]: 
             1    1
             3    1
             2    1
             5    1
             4    1
             7    1
--------------    1
             9    1
             8    1
             6    1
Name: VICTIM_TYPE_ID, dtype: int64

In [213]: NIBRS_VICTIM_TYPE.V.value_counts(dropna=False).head(1000)
Out[213]: 
O    1
L    1
-    1
R    1
I    1
F    1
G    1
U    1
B    1
S    1
Name: V, dtype: int64

In [214]: NIBRS_VICTIM_TYPE.VICTIM_TYPE_NAME.value_counts(dropna=False).head(1000)
Out[214]: 
Unknown                                                                                                 1
Society/Public                                                                                          1
Business                                                                                                1
Financial Institution                                                                                   1
Other                                                                                                   1
Individual                                                                                              1
Law Enforcement Officer                                                                                 1
Religious Organization                                                                                  1
Government                                                                                              1
----------------------------------------------------------------------------------------------------    1
Name: VICTIM_TYPE_NAME, dtype: int64

In [215]: NIBRS_ARRESTEE_WEAPON=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_ARRESTEE_WEAPON.csv',comment='-').rename(columns=lambda x: x.strip())

In [216]: print(NIBRS_ARRESTEE_WEAPON.columns)
Index([u'DATA_YEAR', u'ARRESTEE_ID', u'WEAPON_ID',
       u'NIBRS_ARRESTEE_WEAPON_ID'],
      dtype='object')

In [217]: print(NIBRS_ARRESTEE_WEAPON.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 82631 entries, 0 to 82630
Data columns (total 4 columns):
DATA_YEAR                   82631 non-null object
ARRESTEE_ID                 82631 non-null object
WEAPON_ID                   82631 non-null object
NIBRS_ARRESTEE_WEAPON_ID    82631 non-null object
dtypes: object(4)
memory usage: 2.5+ MB
None

In [218]: print(NIBRS_ARRESTEE_WEAPON.info)
<bound method DataFrame.info of         DATA_YEAR  ARRESTEE_ID   WEAPON_ID  NIBRS_ARRESTEE_WEAPON_ID
0            2017      1337306           1                   1316256
1            2017      1337324           1                   1316274
2            2017      1337335           1                   1316284
3            2017      1338469           1                   1316335
4            2017      1339559           1                   1316414
5            2017      1339560           1                   1316415
6            2017      1339563           1                   1316418
7            2017      1340634           1                   1316486
8            2017      1341714           1                   1316560
9            2017      1341728           1                   1316574
10           2017      1349403           1                   1322070
11           2017      1350462           1                   1322151
12           2017      1335601           1                   1322260
13           2017      1336644           1                   1322305
14           2017      1336689           1                   1322350
15           2017      1337718           1                   1322375
16           2017      1337732           1                   1322389
17           2017      1343513           1                   1327850
18           2017      1344553           1                   1327885
19           2017      1348734           1                   1328144
20           2017      1314925           1                   1310787
21           2017      1317004           1                   1310867
22           2017      1317013           1                   1310875
23           2017      1342756           1                   1316598
24           2017      1344905           1                   1316730
25           2017      1345971           1                   1316814
26           2017      1345975           1                   1316818
27           2017      1347005           1                   1316872
28           2017      1348048           1                   1316937
29           2017      1338869           1                   1322443
...           ...          ...         ...                       ...
82601        2017      1359738           1                   1400841
82602        2017      1359744           1                   1400847
82603        2017      1359766           1                   1400868
82604        2017      1359781           1                   1400882
82605        2017      1360796           1                   1400920
82606        2017      1361853           1                   1401000
82607        2017      1363886           1                   1401083
82608        2017      1365954           5                   1401213
82609        2017      1365970           1                   1401229
82610        2017      1365992           1                   1401251
82611        2017      1367048           1                   1401299
82612        2017      1353390           1                   1401469
82613        2017      1353402           1                   1401481
82614        2017      1354498           7                   1401569
82615        2017      1354500           1                   1401571
82616        2017      1355594           1                   1401592
82617        2017      1356664           1                   1401651
82618        2017      1357737           1                   1401741
82619        2017      1357771           7                   1401770
82620        2017      1358757           1                   1401781
82621        2017      1369902           1                   1379421
82622        2017      1369903           1                   1379422
82623        2017      1369930           1                   1379447
82624        2017      1370999           1                   1379508
82625        2017      1371005           1                   1379514
82626        2017      1371026           1                   1379534
82627        2017      1372041           1                   1379545
82628        2017      1372044           1                   1379548
82629        2017      1373191           7                   1379622
82630        2017      1374287           5                   1379709

[82631 rows x 4 columns]>

In [219]: NIBRS_ARRESTEE_WEAPON.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[219]: 
      2017    82627
    2017          1
 DATA_YEAR        1
  2017            1
2017              1
Name: DATA_YEAR, dtype: int64

In [220]: NIBRS_ARRESTEE_WEAPON=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_ARRESTEE_WEAPON.csv',header=1,comment='-').rename(columns=lambda x: x.strip())

In [221]: NIBRS_ARRESTEE_WEAPON.DATA_YEAR.value_counts(dropna=False).head(1000)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-221-fbfe7773dd4d> in <module>()
----> 1 NIBRS_ARRESTEE_WEAPON.DATA_YEAR.value_counts(dropna=False).head(1000)

/usr/local/lib/python2.7/site-packages/pandas/core/generic.pyc in __getattr__(self, name)
   4374             if self._info_axis._can_hold_identifiers_and_holds_name(name):
   4375                 return self[name]
-> 4376             return object.__getattribute__(self, name)
   4377 
   4378     def __setattr__(self, name, value):

AttributeError: 'DataFrame' object has no attribute 'DATA_YEAR'

In [222]: print(NIBRS_ARRESTEE_WEAPON.columns)
Index([u'2017', u'1337306', u'1', u'1316256'], dtype='object')

In [223]: NIBRS_ARRESTEE_WEAPON=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_ARRESTEE_WEAPON.csv',header=0,comment='-').rename(columns=lambda x: x.strip())

In [224]: print(NIBRS_ARRESTEE_WEAPON.columns)
Index([u'DATA_YEAR', u'ARRESTEE_ID', u'WEAPON_ID',
       u'NIBRS_ARRESTEE_WEAPON_ID'],
      dtype='object')

In [225]: NIBRS_ARRESTEE_WEAPON.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[225]: 
      2017    82627
    2017          1
 DATA_YEAR        1
  2017            1
2017              1
Name: DATA_YEAR, dtype: int64

In [226]: print(NIBRS_ARRESTEE_WEAPON.info)
<bound method DataFrame.info of         DATA_YEAR  ARRESTEE_ID   WEAPON_ID  NIBRS_ARRESTEE_WEAPON_ID
0            2017      1337306           1                   1316256
1            2017      1337324           1                   1316274
2            2017      1337335           1                   1316284
3            2017      1338469           1                   1316335
4            2017      1339559           1                   1316414
5            2017      1339560           1                   1316415
6            2017      1339563           1                   1316418
7            2017      1340634           1                   1316486
8            2017      1341714           1                   1316560
9            2017      1341728           1                   1316574
10           2017      1349403           1                   1322070
11           2017      1350462           1                   1322151
12           2017      1335601           1                   1322260
13           2017      1336644           1                   1322305
14           2017      1336689           1                   1322350
15           2017      1337718           1                   1322375
16           2017      1337732           1                   1322389
17           2017      1343513           1                   1327850
18           2017      1344553           1                   1327885
19           2017      1348734           1                   1328144
20           2017      1314925           1                   1310787
21           2017      1317004           1                   1310867
22           2017      1317013           1                   1310875
23           2017      1342756           1                   1316598
24           2017      1344905           1                   1316730
25           2017      1345971           1                   1316814
26           2017      1345975           1                   1316818
27           2017      1347005           1                   1316872
28           2017      1348048           1                   1316937
29           2017      1338869           1                   1322443
...           ...          ...         ...                       ...
82601        2017      1359738           1                   1400841
82602        2017      1359744           1                   1400847
82603        2017      1359766           1                   1400868
82604        2017      1359781           1                   1400882
82605        2017      1360796           1                   1400920
82606        2017      1361853           1                   1401000
82607        2017      1363886           1                   1401083
82608        2017      1365954           5                   1401213
82609        2017      1365970           1                   1401229
82610        2017      1365992           1                   1401251
82611        2017      1367048           1                   1401299
82612        2017      1353390           1                   1401469
82613        2017      1353402           1                   1401481
82614        2017      1354498           7                   1401569
82615        2017      1354500           1                   1401571
82616        2017      1355594           1                   1401592
82617        2017      1356664           1                   1401651
82618        2017      1357737           1                   1401741
82619        2017      1357771           7                   1401770
82620        2017      1358757           1                   1401781
82621        2017      1369902           1                   1379421
82622        2017      1369903           1                   1379422
82623        2017      1369930           1                   1379447
82624        2017      1370999           1                   1379508
82625        2017      1371005           1                   1379514
82626        2017      1371026           1                   1379534
82627        2017      1372041           1                   1379545
82628        2017      1372044           1                   1379548
82629        2017      1373191           7                   1379622
82630        2017      1374287           5                   1379709

[82631 rows x 4 columns]>

In [227]: NIBRS_ARRESTEE_WEAPON.DATA_YEAR.value_counts(dropna=False,header=0).head(1000)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-227-8b14c6cd3e2f> in <module>()
----> 1 NIBRS_ARRESTEE_WEAPON.DATA_YEAR.value_counts(dropna=False,header=0).head(1000)

TypeError: value_counts() got an unexpected keyword argument 'header'

In [228]: NIBRS_ARRESTEE_WEAPON=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_ARRESTEE_WEAPON.csv').rename(columns=lambda x: x.strip())

In [229]: print(NIBRS_ARRESTEE_WEAPON.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 82633 entries, 0 to 82632
Data columns (total 4 columns):
DATA_YEAR                   82633 non-null object
ARRESTEE_ID                 82633 non-null object
WEAPON_ID                   82633 non-null object
NIBRS_ARRESTEE_WEAPON_ID    82633 non-null object
dtypes: object(4)
memory usage: 2.5+ MB
None

In [230]: NIBRS_ARRESTEE_WEAPON.DATA_YEAR.value_counts(dropna=False,header=0).head(1000)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-230-8b14c6cd3e2f> in <module>()
----> 1 NIBRS_ARRESTEE_WEAPON.DATA_YEAR.value_counts(dropna=False,header=0).head(1000)

TypeError: value_counts() got an unexpected keyword argument 'header'

In [231]: NIBRS_ARRESTEE_WEAPON.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[231]: 
      2017    82627
----------        2
    2017          1
 DATA_YEAR        1
  2017            1
2017              1
Name: DATA_YEAR, dtype: int64

In [232]: NIBRS_ARRESTEE_WEAPON=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_ARRESTEE_WEAPON.csv').rename(columns=lambda x: x.strip())

In [233]: NIBRS_ARRESTEE_WEAPON.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[233]: 
      2017    82627
----------        2
    2017          1
 DATA_YEAR        1
  2017            1
2017              1
Name: DATA_YEAR, dtype: int64

In [234]: NIBRS_ARRESTEE_WEAPON1=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_ARRESTEE_WEAPON.csv').rename(columns=lambda x: x.strip())

In [235]: NIBRS_ARRESTEE_WEAPON1.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[235]: 
      2017    82627
----------        2
    2017          1
 DATA_YEAR        1
  2017            1
2017              1
Name: DATA_YEAR, dtype: int64

In [236]: NIBRS_ARRESTEE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_ARRESTEE.csv')

In [237]: NIBRS_ARRESTEE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_ARRESTEE.csv',header=0,comment='-').rename(columns=lambda x: x.strip())
/usr/local/lib/python2.7/site-packages/IPython/core/interactiveshell.py:2714: DtypeWarning: Columns (0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17) have mixed types. Specify dtype option on import or set low_memory=False.
  interactivity=interactivity, compiler=compiler, result=result)

In [238]: NIBRS_ARRESTEE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_ARRESTEE.csv',low_memory=False,header=0,comment='-').rename(columns=lambda x: x.strip())

In [239]: print(NIBRS_ARRESTEE.columns)
Index([u'DATA_YEAR', u'ARRESTEE_ID', u'INCIDENT_ID', u'ARRESTEE_SEQ_NUM',
       u'ARREST_DA', u'ARREST_TYPE_ID', u'M', u'OFFENSE_TYPE_ID', u'AGE_ID',
       u'AGE_NUM', u'S', u'RACE_ID', u'ETHNICITY_ID', u'R', u'U', u'C',
       u'AGE_RANGE_LOW_NUM', u'AGE_RANGE_HIGH_NUM'],
      dtype='object')

In [240]: print(NIBRS_ARRESTEE.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 82517 entries, 0 to 82516
Data columns (total 18 columns):
DATA_YEAR             82517 non-null object
ARRESTEE_ID           82517 non-null object
INCIDENT_ID           82517 non-null object
ARRESTEE_SEQ_NUM      82517 non-null object
ARREST_DA             82517 non-null object
ARREST_TYPE_ID        1 non-null object
M                     1 non-null object
OFFENSE_TYPE_ID       1 non-null object
AGE_ID                1 non-null object
AGE_NUM               1 non-null object
S                     1 non-null object
RACE_ID               1 non-null object
ETHNICITY_ID          1 non-null object
R                     1 non-null object
U                     1 non-null object
C                     1 non-null object
AGE_RANGE_LOW_NUM     1 non-null object
AGE_RANGE_HIGH_NUM    1 non-null object
dtypes: object(18)
memory usage: 11.3+ MB
None

In [241]: NIBRS_ARRESTEE.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[241]: 
      2017    82514
   2017           1
 DATA_YEAR        1
 2017             1
Name: DATA_YEAR, dtype: int64

In [242]: NIBRS_ARRESTEE.ARRESTEE_ID.value_counts(dropna=False).head(1000)
Out[242]: 
    1312739    1
    1343197    1
    1327579    1
    1371652    1
    1371653    1
    1371650    1
    1371651    1
    1371656    1
    1371657    1
    1379851    1
    1371655    1
    1386786    1
    1386787    1
    1309019    1
    1309018    1
    1386782    1
    1386783    1
    1386780    1
    1386781    1
    1361674    1
    1371659    1
    1371658    1
    1381380    1
    1343191    1
    1343192    1
    1343193    1
    1382661    1
    1382660    1
    1382663    1
    1382662    1
              ..
    1319851    1
    1337816    1
    1382031    1
    1374014    1
    1374539    1
    1343123    1
    1374538    1
    1337817    1
    1374683    1
    1334852    1
    1353838    1
    1353839    1
    1353836    1
    1353837    1
    1353834    1
    1353835    1
    1353832    1
    1316882    1
    1316881    1
    1319852    1
    1382030    1
    1337813    1
    1375113    1
    1386932    1
    1362882    1
    1343121    1
    1374017    1
    1327089    1
    1378873    1
    1319855    1
Name: ARRESTEE_ID, Length: 1000, dtype: int64

In [243]: NIBRS_ARRESTEE.INCIDENT_ID.value_counts(dropna=False).head(1000)
Out[243]: 
     508014    12
    4712118    12
     404753    12
     894986     9
    4587711     8
     572854     8
    1989948     8
     476970     8
    3736793     8
    5371459     7
     419439     7
    5022457     7
    5006484     7
     391150     7
     902613     7
    3401281     7
     909153     7
    4142249     7
     895058     7
     484246     7
    5027891     6
    3554439     6
    4796979     6
    4997608     6
     578224     6
    4129646     6
     924239     6
     577206     6
    5379747     6
     436173     6
               ..
     375202     3
    5027924     3
     379640     3
     379642     3
    1271365     3
    5029716     3
    5376409     3
    2612227     3
    2627601     3
    5050917     3
     908059     3
     309341     3
    1602667     3
    5381023     3
     495962     3
    4708138     3
     322437     3
    2958710     3
    4218143     3
     428892     3
    1107010     3
     350827     3
    3983766     3
     403755     3
     894024     3
     894023     3
    2842717     3
    1498872     3
    4510263     3
    5026954     3
Name: INCIDENT_ID, Length: 1000, dtype: int64

In [244]: NIBRS_ARRESTEE.ARRESTEE_SEQ_NUM.value_counts(dropna=False).head(1000)
Out[244]: 
               1    71429
               2     9071
               3     1454
               4      361
               5      116
               6       41
               7       21
               8        9
               9        5
              10        3
              11        3
              12        3
ARRESTEE_SEQ_NUM        1
Name: ARRESTEE_SEQ_NUM, dtype: int64

In [245]: NIBRS_ARRESTEE.ARREST_DA.value_counts(dropna=False).head(1000)
Out[245]: 
10           2867
07           2852
19           2799
21           2798
20           2784
15           2780
11           2773
28           2751
01           2744
04           2729
12           2723
27           2723
08           2715
22           2712
02           2707
25           2702
18           2693
14           2678
13           2676
09           2669
23           2657
17           2654
03           2653
06           2651
24           2650
05           2610
26           2592
30           2565
16           2551
29           2507
31           1551
ARREST_DA       1
Name: ARREST_DA, dtype: int64

In [246]: NIBRS_VICTIM_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_VICTIM_TYPE.csv'comment='-').rename(columns=lambda x: x.strip())
  File "<ipython-input-246-057f789079ed>", line 1
    NIBRS_VICTIM_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_VICTIM_TYPE.csv'comment='-').rename(columns=lambda x: x.strip())
                                                                                             ^
SyntaxError: invalid syntax


In [247]: NIBRS_VICTIM_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_VICTIM_TYPE.csv',comment='-').rename(columns=lambda x: x.strip())

In [248]: NIBRS_VICTIM_TYPE.VICTIM_TYPE_ID.value_counts(dropna=False).head(1000)
Out[248]: 
9    1
8    1
7    1
6    1
5    1
4    1
3    1
2    1
1    1
Name: VICTIM_TYPE_ID, dtype: int64

In [249]: NIBRS_ARRESTEE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_ARRESTEE.csv',comment='-').rename(columns=lambda x: x.strip())

In [250]: NIBRS_ARRESTEE.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[250]: 
2017          49749
      2017    32766
   2017           1
 DATA_YEAR        1
Name: DATA_YEAR, dtype: int64

In [251]: NIBRS_ARRESTEE[0] = NIBRS_ARRESTEE[0].str.strip()
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
<ipython-input-251-a7c73132d8fd> in <module>()
----> 1 NIBRS_ARRESTEE[0] = NIBRS_ARRESTEE[0].str.strip()

/usr/local/lib/python2.7/site-packages/pandas/core/frame.pyc in __getitem__(self, key)
   2686             return self._getitem_multilevel(key)
   2687         else:
-> 2688             return self._getitem_column(key)
   2689 
   2690     def _getitem_column(self, key):

/usr/local/lib/python2.7/site-packages/pandas/core/frame.pyc in _getitem_column(self, key)
   2693         # get column
   2694         if self.columns.is_unique:
-> 2695             return self._get_item_cache(key)
   2696 
   2697         # duplicate columns & possible reduce dimensionality

/usr/local/lib/python2.7/site-packages/pandas/core/generic.pyc in _get_item_cache(self, item)
   2487         res = cache.get(item)
   2488         if res is None:
-> 2489             values = self._data.get(item)
   2490             res = self._box_item_values(item, values)
   2491             cache[item] = res

/usr/local/lib/python2.7/site-packages/pandas/core/internals.pyc in get(self, item, fastpath)
   4113 
   4114             if not isna(item):
-> 4115                 loc = self.items.get_loc(item)
   4116             else:
   4117                 indexer = np.arange(len(self.items))[isna(self.items)]

/usr/local/lib/python2.7/site-packages/pandas/core/indexes/base.pyc in get_loc(self, key, method, tolerance)
   3078                 return self._engine.get_loc(key)
   3079             except KeyError:
-> 3080                 return self._engine.get_loc(self._maybe_cast_indexer(key))
   3081 
   3082         indexer = self.get_indexer([key], method=method, tolerance=tolerance)

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

KeyError: 0

In [252]: NIBRS_ARRESTEE_WEAPON=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_ARRESTEE_WEAPON.csv',comment='-').rename(columns=lambda x: x.strip())

In [253]: print(NIBRS_ARRESTEE_WEAPON.columns)
Index([u'DATA_YEAR', u'ARRESTEE_ID', u'WEAPON_ID',
       u'NIBRS_ARRESTEE_WEAPON_ID'],
      dtype='object')

In [254]: print(NIBRS_ARRESTEE_WEAPON.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 82631 entries, 0 to 82630
Data columns (total 4 columns):
DATA_YEAR                   82631 non-null object
ARRESTEE_ID                 82631 non-null object
WEAPON_ID                   82631 non-null object
NIBRS_ARRESTEE_WEAPON_ID    82631 non-null object
dtypes: object(4)
memory usage: 2.5+ MB
None

In [255]: NIBRS_ARRESTEE_WEAPON.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[255]: 
      2017    82627
    2017          1
 DATA_YEAR        1
  2017            1
2017              1
Name: DATA_YEAR, dtype: int64

In [256]: 

In [256]: NIBRS_ARRESTEE_WEAPON.ARRESTEE_ID.value_counts(dropna=False).head(1000)
Out[256]: 
    1344946    2
    1316510    2
    1360244    2
    1380400    2
    1319784    2
    1329637    2
    1372992    2
    1320089    2
    1322823    2
    1369912    2
    1325099    2
    1376624    2
    1321481    2
    1349663    2
    1386217    2
    1365744    2
    1319236    2
    1312467    2
    1363550    2
    1332003    2
    1371126    2
    1374667    2
    1385899    2
    1386015    2
    1366015    2
    1319301    2
    1307513    2
    1371748    2
    1317120    2
    1335438    2
              ..
    1327609    1
    1360442    1
    1368272    1
    1368273    1
    1368270    1
    1368271    1
    1331168    1
    1368277    1
    1327602    1
    1383613    1
    1389227    1
    1377409    1
    1318312    1
    1351086    1
    1386803    1
    1380936    1
    1309388    1
    1321572    1
    1386667    1
    1321940    1
    1382432    1
    1383619    1
    1351819    1
    1380939    1
    1383618    1
    1309527    1
    1356942    1
    1380938    1
    1380937    1
    1309155    1
Name: ARRESTEE_ID, Length: 1000, dtype: int64

In [257]: NIBRS_ARRESTEE_WEAPON.WEAPON_ID.value_counts(dropna=False).head(1000)
Out[257]: 
         1    78383
         3     1596
         7     1361
         8      397
         2      317
        22      239
         5      119
         4      104
         6       81
        21       19
        23       11
        24        2
        25        1
 WEAPON_ID        1
Name: WEAPON_ID, dtype: int64

In [258]: NIBRS_ARRESTEE_WEAPON.NIBRS_ARRESTEE_WEAPON_ID.value_counts(dropna=False).head(1000)
Out[258]: 
                 1289922    1
                 1330888    1
                   46464    1
                   46465    1
                   46466    1
                   46467    1
                   46468    1
                   46469    1
                 1317102    1
                 1317105    1
                 1372642    1
                 1405623    1
                 1373683    1
                    8492    1
                 1284429    1
                 1312914    1
                 1405621    1
                 1289064    1
                 1410361    1
                   46463    1
                   46462    1
                   46461    1
                 1397734    1
                 1371190    1
                 1291267    1
                 1412925    1
                 1351059    1
                 1317101    1
                 1397736    1
                 1397737    1
                           ..
                 1404629    1
                 1367572    1
                 1367571    1
                 1367570    1
                 1367577    1
                 1367576    1
                 1367575    1
                 1289829    1
                 1289826    1
                 1289827    1
                 1289824    1
                 1289825    1
                 1289822    1
                 1289823    1
                 1289820    1
                 1289821    1
                 1349069    1
                 1322318    1
                 1311302    1
                 1292832    1
                 1292833    1
                 1379003    1
                 1379004    1
                 1404624    1
                 1404627    1
                 1379007    1
                 1379000    1
                 1404620    1
                 1379002    1
                 1292839    1
Name: NIBRS_ARRESTEE_WEAPON_ID, Length: 1000, dtype: int64

In [259]: NIBRS_ARRESTEE.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[259]: 
2017          49749
      2017    32766
   2017           1
 DATA_YEAR        1
Name: DATA_YEAR, dtype: int64

In [260]: NIBRS_ARRESTEE.ARRESTEE_ID.value_counts(dropna=False).head(1000)
Out[260]: 
1310718        1
1347257        1
1347279        1
    1308550    1
1347284        1
1347285        1
1347286        1
1347287        1
1355449        1
1347289        1
1347290        1
1347292        1
1347294        1
1347297        1
1347299        1
    1356039    1
1347301        1
1347303        1
    1356035    1
    1368300    1
    1367171    1
1347276        1
    1379287    1
1347259        1
1347260        1
1347261        1
1347262        1
1359940        1
1347264        1
1355450        1
              ..
1347720        1
    1320162    1
1347723        1
1347724        1
1386612        1
1347727        1
1347728        1
1347729        1
    1338150    1
1347733        1
1347734        1
    1338155    1
1347736        1
1347737        1
    1307243    1
    1384475    1
    1372559    1
1347718        1
1347716        1
    1387372    1
1387973        1
1311188        1
1347696        1
1347699        1
1347700        1
1347701        1
1347702        1
1347703        1
    1383876    1
    1355040    1
Name: ARRESTEE_ID, Length: 1000, dtype: int64

In [261]: NIBRS_ARRESTEE.INCIDENT_ID.value_counts(dropna=False).head(1000)
Out[261]: 
4712118        12
     508014    12
     404753    12
894986          9
4587711         8
     572854     8
1989948         8
476970          8
3736793         8
    4142249     7
    5371459     7
     909153     7
     391150     7
902613          7
    5022457     7
5006484         7
3401281         7
     484246     7
419439          7
     895058     7
    5048336     6
     582590     6
577206          6
4574571         6
    4129678     6
    4997608     6
5027891         6
    4129646     6
2400589         6
    5379747     6
               ..
     392153     3
    2849895     3
     308342     3
379642          3
3400807         3
469756          3
1990847         3
399532          3
5360810         3
3403299         3
    3566567     3
4986121         3
412054          3
3401767         3
468725          3
     606169     3
2209753         3
367009          3
3400816         3
2965559         3
5369432         3
393202          3
4219184         3
     381745     3
4714099         3
    3436450     3
5028187         3
305377          3
4985175         3
     612606     3
Name: INCIDENT_ID, Length: 1000, dtype: int64

In [262]: NIBRS_ARRESTEE.ARRESTEE_SEQ_NUM.value_counts(dropna=False).head(1000)
Out[262]: 
1                   43211
               1    28218
2                    5398
               2     3673
3                     850
               3      604
4                     194
               4      167
               5       61
5                      55
               6       22
6                      19
               7       11
7                      10
8                       6
               8        3
9                       3
              12        2
              10        2
              11        2
               9        2
10                      1
11                      1
ARRESTEE_SEQ_NUM        1
12                      1
Name: ARRESTEE_SEQ_NUM, dtype: int64

In [263]: NIBRS_ARRESTEE.ARREST_DA.value_counts(dropna=False).head(1000)
Out[263]: 
10           1737
12           1720
7            1720
1            1704
19           1692
21           1676
4            1670
15           1667
27           1666
20           1658
11           1645
23           1636
22           1628
13           1622
2            1622
3            1620
25           1610
18           1608
24           1607
14           1604
26           1601
6            1600
28           1600
9            1591
8            1580
30           1574
5            1561
17           1554
16           1535
29           1502
             ... 
10           1130
11           1128
20           1126
21           1122
15           1113
19           1107
17           1100
25           1092
02           1085
18           1085
22           1084
09           1078
14           1074
04           1059
27           1057
13           1054
06           1051
05           1049
24           1043
01           1040
03           1033
23           1021
16           1016
29           1005
12           1003
26            991
30            991
31            939
31            612
ARREST_DA       1
Name: ARREST_DA, Length: 63, dtype: int64

In [264]: NIBRS_ARRESTEE.ARREST_TYPE_ID.value_counts(dropna=False).head(1000)
Out[264]: 
NaN               82516
ARREST_TYPE_ID        1
Name: ARREST_TYPE_ID, dtype: int64

In [265]: NIBRS_ARRESTEE.M.value_counts(dropna=False).head(1000)
Out[265]: 
NaN    82516
M          1
Name: M, dtype: int64

In [266]: NIBRS_ARRESTEE.OFFENSE_TYPE_ID.value_counts(dropna=False).head(1000)
Out[266]: 
NaN                82516
OFFENSE_TYPE_ID        1
Name: OFFENSE_TYPE_ID, dtype: int64

In [267]: NIBRS_ARRESTEE.AGE_ID.value_counts(dropna=False).head(1000)
Out[267]: 
NaN           82516
    AGE_ID        1
Name: AGE_ID, dtype: int64

In [268]: NIBRS_ARRESTEE.AGE_NUM.value_counts(dropna=False).head(1000)
Out[268]: 
NaN           82516
   AGE_NUM        1
Name: AGE_NUM, dtype: int64

In [269]: NIBRS_ARRESTEE.S.value_counts(dropna=False).head(1000)
Out[269]: 
NaN    82516
S          1
Name: S, dtype: int64

In [270]: NIBRS_ARRESTEE.RACE_ID.value_counts(dropna=False).head(1000)
Out[270]: 
NaN           82516
   RACE_ID        1
Name: RACE_ID, dtype: int64

In [271]: NIBRS_ARRESTEE.ETHNICITY_ID.value_counts(dropna=False).head(1000)
Out[271]: 
NaN             82516
ETHNICITY_ID        1
Name: ETHNICITY_ID, dtype: int64

In [272]: 

In [272]: 

In [272]: NIBRS_ARRESTEE.R.value_counts(dropna=False).head(1000)
Out[272]: 
NaN    82516
R          1
Name: R, dtype: int64

In [273]: NIBRS_ARRESTEE.U.value_counts(dropna=False).head(1000)
Out[273]: 
NaN    82516
U          1
Name: U, dtype: int64

In [274]: NIBRS_ARRESTEE.C.value_counts(dropna=False).head(1000)
Out[274]: 
NaN    82516
C          1
Name: C, dtype: int64

In [275]: NIBRS_ARRESTEE.AGE_RANGE_LOW_NUM.value_counts(dropna=False).head(1000)
Out[275]: 
NaN                  82516
AGE_RANGE_LOW_NUM        1
Name: AGE_RANGE_LOW_NUM, dtype: int64

In [276]: NIBRS_ARRESTEE.AGE_RANGE_HIGH_NUM.value_counts(dropna=False).head(1000)
Out[276]: 
NaN                   82516
AGE_RANGE_HIGH_NUM        1
Name: AGE_RANGE_HIGH_NUM, dtype: int64

In [277]: NIBRS_BIAS_MOTIVATION=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_BIAS_MOTIVATION.csv',comment='-').rename(columns=lambda x: x.strip())
---------------------------------------------------------------------------
EmptyDataError                            Traceback (most recent call last)
<ipython-input-277-9ef5bd30ace5> in <module>()
----> 1 NIBRS_BIAS_MOTIVATION=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_BIAS_MOTIVATION.csv',comment='-').rename(columns=lambda x: x.strip())

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)
    676                     skip_blank_lines=skip_blank_lines)
    677 
--> 678         return _read(filepath_or_buffer, kwds)
    679 
    680     parser_f.__name__ = name

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _read(filepath_or_buffer, kwds)
    438 
    439     # Create the parser.
--> 440     parser = TextFileReader(filepath_or_buffer, **kwds)
    441 
    442     if chunksize or iterator:

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in __init__(self, f, engine, **kwds)
    785             self.options['has_index_names'] = kwds['has_index_names']
    786 
--> 787         self._make_engine(self.engine)
    788 
    789     def close(self):

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _make_engine(self, engine)
   1012     def _make_engine(self, engine='c'):
   1013         if engine == 'c':
-> 1014             self._engine = CParserWrapper(self.f, **self.options)
   1015         else:
   1016             if engine == 'python':

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in __init__(self, src, **kwds)
   1706         kwds['usecols'] = self.usecols
   1707 
-> 1708         self._reader = parsers.TextReader(src, **kwds)
   1709 
   1710         passed_names = self.names is None

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.__cinit__()

EmptyDataError: No columns to parse from file

In [278]: NIBRS_BIAS_MOTIVATION=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_BIAS_MOTIVATION.csv',comment='-').rename(columns=lambda x: x.strip())
---------------------------------------------------------------------------
EmptyDataError                            Traceback (most recent call last)
<ipython-input-278-9ef5bd30ace5> in <module>()
----> 1 NIBRS_BIAS_MOTIVATION=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_BIAS_MOTIVATION.csv',comment='-').rename(columns=lambda x: x.strip())

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)
    676                     skip_blank_lines=skip_blank_lines)
    677 
--> 678         return _read(filepath_or_buffer, kwds)
    679 
    680     parser_f.__name__ = name

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _read(filepath_or_buffer, kwds)
    438 
    439     # Create the parser.
--> 440     parser = TextFileReader(filepath_or_buffer, **kwds)
    441 
    442     if chunksize or iterator:

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in __init__(self, f, engine, **kwds)
    785             self.options['has_index_names'] = kwds['has_index_names']
    786 
--> 787         self._make_engine(self.engine)
    788 
    789     def close(self):

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _make_engine(self, engine)
   1012     def _make_engine(self, engine='c'):
   1013         if engine == 'c':
-> 1014             self._engine = CParserWrapper(self.f, **self.options)
   1015         else:
   1016             if engine == 'python':

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in __init__(self, src, **kwds)
   1706         kwds['usecols'] = self.usecols
   1707 
-> 1708         self._reader = parsers.TextReader(src, **kwds)
   1709 
   1710         passed_names = self.names is None

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.__cinit__()

EmptyDataError: No columns to parse from file

In [279]: NIBRS_BIAS_MOTIVATION=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_BIAS_MOTIVATION.csv')
---------------------------------------------------------------------------
EmptyDataError                            Traceback (most recent call last)
<ipython-input-279-a74070b6da90> in <module>()
----> 1 NIBRS_BIAS_MOTIVATION=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_BIAS_MOTIVATION.csv')

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)
    676                     skip_blank_lines=skip_blank_lines)
    677 
--> 678         return _read(filepath_or_buffer, kwds)
    679 
    680     parser_f.__name__ = name

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _read(filepath_or_buffer, kwds)
    438 
    439     # Create the parser.
--> 440     parser = TextFileReader(filepath_or_buffer, **kwds)
    441 
    442     if chunksize or iterator:

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in __init__(self, f, engine, **kwds)
    785             self.options['has_index_names'] = kwds['has_index_names']
    786 
--> 787         self._make_engine(self.engine)
    788 
    789     def close(self):

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _make_engine(self, engine)
   1012     def _make_engine(self, engine='c'):
   1013         if engine == 'c':
-> 1014             self._engine = CParserWrapper(self.f, **self.options)
   1015         else:
   1016             if engine == 'python':

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in __init__(self, src, **kwds)
   1706         kwds['usecols'] = self.usecols
   1707 
-> 1708         self._reader = parsers.TextReader(src, **kwds)
   1709 
   1710         passed_names = self.names is None

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.__cinit__()

EmptyDataError: No columns to parse from file

In [280]: NIBRS_CRIMINAL_ACT=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_CRIMINAL_ACT.csv',comment='-').rename(columns=lambda x: x.strip())

In [281]: print(NIBRS_CRIMINAL_ACT.columns)
Index([u'DATA_YEAR', u'CRIMINAL_ACT_ID', u'OFFENSE_ID'], dtype='object')

In [282]: print(NIBRS_CRIMINAL_ACT.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 95550 entries, 0 to 95549
Data columns (total 3 columns):
DATA_YEAR          95550 non-null object
CRIMINAL_ACT_ID    95550 non-null object
OFFENSE_ID         95550 non-null object
dtypes: object(3)
memory usage: 2.2+ MB
None

In [283]: NIBRS_CRIMINAL_ACT.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[283]: 
      2017    95547
 DATA_YEAR        1
2017              1
     2017         1
Name: DATA_YEAR, dtype: int64

In [284]: NIBRS_CRIMINAL_ACT.CRIMINAL_ACT_ID.value_counts(dropna=False).head(1000)
Out[284]: 
              6    47589
              9    36436
              8     6312
              3     1989
              1     1047
              2      854
              7      567
             10      274
              5      217
              4      134
             11       60
             14       37
             12       31
             13        2
CRIMINAL_ACT_ID        1
Name: CRIMINAL_ACT_ID, dtype: int64

In [285]: NIBRS_CRIMINAL_ACT.OFFENSE_ID.value_counts(dropna=False).head(1000)
Out[285]: 
   2478661    3
   4028148    3
    915214    3
    915215    3
    915218    3
   5677987    3
   2712265    3
   3353460    3
   3253300    3
   1701318    3
    321103    3
   2470201    3
   2258452    3
    541467    3
   4708958    3
   6164563    3
   3262449    3
    534562    3
   5289082    3
    530799    3
   3931332    3
   3931331    3
   1815018    3
   4804862    3
   4027331    3
   5971886    3
   5778301    3
   4319425    3
   3836414    3
    249781    3
             ..
   4029786    2
   5483952    2
   3244550    2
   4319898    2
   3834902    2
   4513678    2
   3023526    2
   3244552    2
   3037455    2
   3020423    2
   4514051    2
    527918    2
   3448284    2
   3931566    2
   3931567    2
    247537    2
   4029061    2
   3741442    2
    271148    2
   5289103    2
   3546914    2
    891883    2
   1260909    2
   3546910    2
   3545071    2
    303388    2
   5773916    2
   5094685    2
   4804274    2
    294582    2
Name: OFFENSE_ID, Length: 1000, dtype: int64

In [286]: NIBRS_incident=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_incident.csv',comment='-').rename(columns=lambda x: x.strip())
/usr/local/lib/python2.7/site-packages/IPython/core/interactiveshell.py:2714: DtypeWarning: Columns (0,1,2,3,6,7,8,9,10,11,12,13,14) have mixed types. Specify dtype option on import or set low_memory=False.
  interactivity=interactivity, compiler=compiler, result=result)

In [287]: NIBRS_incident=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_incident.csv',comment='-',low_memory=False).rename(columns=lambda x: x.strip())

In [288]: print(NIBRS_incident.columns)
Index([u'DATA_YEAR', u'AGENCY_ID', u'INCIDENT_ID', u'NIBRS_MONTH_ID', u'C',
       u'SUBMISSIO', u'INCIDENT_', u'R', u'INCIDENT_HOUR',
       u'CLEARED_EXCEPT_ID', u'CLEARED_E', u'INCIDENT_STATUS', u'D', u'O',
       u'DID'],
      dtype='object')

In [289]: print(NIBRS_incident.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 268052 entries, 0 to 268051
Data columns (total 15 columns):
DATA_YEAR            268052 non-null object
AGENCY_ID            268052 non-null object
INCIDENT_ID          268052 non-null object
NIBRS_MONTH_ID       268052 non-null object
C                    268052 non-null object
SUBMISSIO            268052 non-null object
INCIDENT_            268052 non-null object
R                    5 non-null object
INCIDENT_HOUR        5 non-null object
CLEARED_EXCEPT_ID    5 non-null object
CLEARED_E            5 non-null object
INCIDENT_STATUS      5 non-null object
D                    5 non-null object
O                    5 non-null object
DID                  5 non-null object
dtypes: object(15)
memory usage: 30.7+ MB
None

In [290]: NIBRS_incident.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[290]: 
      2017    268038
 DATA_YEAR         5
     2017          2
 2017              2
2017               2
  2017             1
    2017           1
   2017            1
Name: DATA_YEAR, dtype: int64

In [291]: NIBRS_incident.AGENCY_ID.value_counts(dropna=False).head(1000)
Out[291]: 
     19711    54213
     19701    28353
     19610    19937
     18963    10847
     19752     9529
     19678     7296
     19054     6490
     19209     5909
     18961     5715
     19740     5480
     18962     5292
     19056     5130
     19793     4883
     18798     4725
     19541     4414
     19474     4084
     18858     3885
     19703     3030
     19563     2529
     19024     2354
     19034     2306
     19833     1963
     19637     1785
     19594     1779
     19320     1763
     19795     1699
     19409     1646
     19010     1571
     19397     1566
     19413     1543
              ...  
     19759      125
     27352      119
     19769      118
     19373      118
     19632      109
     19437      106
     19163      101
     18875       91
     19067       74
     19591       71
     18911       67
     18789       61
     19663       59
     19478       57
     19072       56
     19680       55
     19311       48
     19607       40
     19532       37
     19598       37
     19315       37
     19050       32
     18940       32
     18821       25
     25878       21
     19230       19
     18857       10
 AGENCY_ID        5
     19501        3
     25770        3
Name: AGENCY_ID, Length: 157, dtype: int64

In [292]: NIBRS_incident.INCIDENT_ID.value_counts(dropna=False).head(1000)
Out[292]: 
INCIDENT_ID    5
    5042827    1
    2653390    1
    4548307    1
    2583615    1
    2653391    1
    5042028    1
    2583614    1
    5042029    1
    4587767    1
    4548302    1
    4587765    1
    4587764    1
    4587763    1
    4587762    1
    4587761    1
    4587760    1
    5423213    1
    5423212    1
    4548303    1
    2583619    1
    5423217    1
    5423216    1
    4587769    1
    4587768    1
    5042822    1
    4207119    1
    4207118    1
    5380114    1
    5380115    1
              ..
    2106278    1
    5367788    1
    5367789    1
    5367780    1
    5367781    1
    5367782    1
    5367783    1
    5367784    1
    5367785    1
    5367786    1
    5367787    1
     903737    1
     903730    1
     903731    1
     903732    1
    2721651    1
    2721650    1
    2721657    1
    2721656    1
    2721655    1
    2721654    1
     643066    1
    2866110    1
    2866111    1
    4550306    1
    2866113    1
    2866114    1
    2616418    1
    5374450    1
    5374451    1
Name: INCIDENT_ID, Length: 1000, dtype: int64

In [293]: NIBRS_incident.NIBRS_MONTH_ID.value_counts(dropna=False).head(1000)
Out[293]: 
        110794    4922
        224714    4848
        179146    4765
        156362    4740
        201930    4611
        133578    4598
         19658    4471
        247498    4441
         88010    4404
         65226    4303
        270282    4132
         42442    3978
        110784    2571
         65216    2517
         88000    2485
        133568    2387
        179136    2347
        156352    2345
        201920    2325
        224704    2317
         19648    2305
        247488    2263
        270272    2246
         42432    2245
        247261    2045
        270045    1971
        179045    1806
        110693    1778
        133477    1764
        201829    1764
                  ... 
        133556      34
        156413      34
         88162      34
        110318      34
         64750      34
        156504      34
        201498      34
        224609      34
        132833      34
        133543      34
        247203      34
        269564      34
        269763      34
        247423      34
         87790      34
        132757      34
         18915      33
         19438      33
        270071      33
        224866      33
        201162      33
        179124      33
        224534      33
         41670      33
         87807      33
        133461      33
        247556      33
        201895      33
        224639      33
        269982      33
Name: NIBRS_MONTH_ID, Length: 1000, dtype: int64

In [294]: NIBRS_incident.C.value_counts(dropna=False).head(1000)
Out[294]: 
     151696
N    116190
Y       161
C         5
Name: C, dtype: int64

In [295]: NIBRS_incident.SUBMISSIO.value_counts(dropna=False).head(1000)
Out[295]: 
             268047
SUBMISSIO         5
Name: SUBMISSIO, dtype: int64

In [296]: NIBRS_incident.INCIDENT_.value_counts(dropna=False).head(1000)
Out[296]: 
01           10539
10            9258
20            9117
15            9032
03            8914
13            8905
06            8869
21            8852
27            8839
07            8810
05            8807
02            8779
28            8774
18            8773
19            8767
14            8766
11            8759
04            8758
17            8736
09            8733
24            8690
12            8637
22            8594
08            8586
16            8509
25            8462
23            8413
26            8336
30            8076
29            7961
31            4996
INCIDENT_        5
Name: INCIDENT_, dtype: int64

In [297]: NIBRS_incident.R.value_counts(dropna=False).head(1000)
Out[297]: 
NaN    268047
R           5
Name: R, dtype: int64

In [298]: NIBRS_incident.INCIDENT_HOUR.value_counts(dropna=False).head(1000)
Out[298]: 
NaN              268047
INCIDENT_HOUR         5
Name: INCIDENT_HOUR, dtype: int64

In [299]: NIBRS_incident.CLEARED_EXCEPT_ID.value_counts(dropna=False).head(1000)
Out[299]: 
NaN                  268047
CLEARED_EXCEPT_ID         5
Name: CLEARED_EXCEPT_ID, dtype: int64

In [300]: NIBRS_incident.CLEARED_E.value_counts(dropna=False).head(1000)
Out[300]: 
NaN          268047
CLEARED_E         5
Name: CLEARED_E, dtype: int64

In [301]: 

In [301]: NIBRS_incident.INCIDENT_STATUS.value_counts(dropna=False).head(1000)
Out[301]: 
NaN                268047
INCIDENT_STATUS         5
Name: INCIDENT_STATUS, dtype: int64

In [302]: NIBRS_incident.D.value_counts(dropna=False).head(1000)
Out[302]: 
NaN    268047
D           5
Name: D, dtype: int64

In [303]: NIBRS_incident.O.value_counts(dropna=False).head(1000)
Out[303]: 
NaN    268047
O           5
Name: O, dtype: int64

In [304]: NIBRS_incident.DID.value_counts(dropna=False).head(1000)
Out[304]: 
NaN           268047
       DID         5
Name: DID, dtype: int64

In [305]: NIBRS_month=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_month.csv',comment='-').rename(columns=lambda x: x.strip())

In [306]: print(NIBRS_month.columns)
Index([u'DATA_YEAR', u'NIBRS_MONTH_ID', u'AGENCY_ID', u'MONTH_NUM',
       u'DATA_YEAR.1', u'R', u'REPORT_DA', u'PREPARED_', u'U', u'O',
       u'FF_LINE_NUMBER', u'D', u'DDOCNAME', u'DID', u'MONTH_PUB_STATUS'],
      dtype='object')

In [307]: print(NIBRS_month.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 268052 entries, 0 to 268051
Data columns (total 15 columns):
DATA_YEAR           268052 non-null object
NIBRS_MONTH_ID      268052 non-null object
AGENCY_ID           268052 non-null object
MONTH_NUM           268052 non-null object
DATA_YEAR.1         268052 non-null object
R                   268052 non-null object
REPORT_DA           268052 non-null object
PREPARED_           268052 non-null object
U                   268052 non-null object
O                   268052 non-null object
FF_LINE_NUMBER      268052 non-null object
D                   268052 non-null object
DDOCNAME            268052 non-null object
DID                 268052 non-null object
MONTH_PUB_STATUS    268052 non-null object
dtypes: object(15)
memory usage: 30.7+ MB
None

In [308]: NIBRS_month.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[308]: 
      2017    262134
2017            5908
 DATA_YEAR         5
  2017             5
Name: DATA_YEAR, dtype: int64

In [309]: NIBRS_month.NIBRS_MONTH_ID.value_counts(dropna=False).head(1000)
Out[309]: 
        110794    4922
        224714    4848
        179146    4765
        156362    4740
        133578    4598
         19658    4471
        247498    4441
         88010    4404
         65226    4303
        270282    4132
         42442    3978
        201930    3877
        110784    2571
         65216    2517
         88000    2485
        133568    2387
        179136    2347
        156352    2345
        224704    2317
         19648    2305
        247488    2263
        270272    2246
        247261    2045
        270045    1971
        201920    1930
        179045    1806
        110693    1778
         42432    1777
        201829    1764
        133477    1764
                  ... 
        156287      35
        156173      35
        201908      35
        247203      34
        247423      34
        269564      34
        132757      34
        269763      34
        247463      34
         87790      34
         64750      34
        133556      34
        224609      34
        179203      34
        156413      34
        202071      34
        133398      34
        132833      34
         88162      34
        110318      34
        133543      34
        178428      34
        110719      34
        269850      34
        201498      34
        156504      34
        247556      33
        224534      33
        270071      33
        269982      33
Name: NIBRS_MONTH_ID, Length: 1000, dtype: int64

In [310]: NIBRS_month.AGENCY_ID.value_counts(dropna=False).head(1000)
Out[310]: 
     19711    53479
     19701    27490
     19610    18514
     18963    10847
     19752     9529
     19678     6702
     19054     6490
     18961     5715
     19209     5527
     19740     5423
     18962     5292
     19056     5130
     19793     4883
     18798     4725
     19541     4086
     19474     4084
     18858     3885
     19703     3030
     19024     2354
     19034     2306
     19563     2299
     19833     1963
     19320     1763
     19637     1727
     19795     1699
     19409     1646
     19594     1627
     19010     1571
     19397     1566
     19413     1543
              ...  
19562            47
19645            41
     19607       40
19671            38
19619            37
     19315       37
     19598       37
19733            36
     19532       33
19676            33
     19050       32
     18940       32
19531            27
     18821       25
19657            25
19508            23
19581            22
     25878       21
     19230       19
19254            18
19185            18
18777            18
18754            14
     18857       10
 AGENCY_ID        5
19545             5
19532             4
     19501        3
     25770        3
19571             1
Name: AGENCY_ID, Length: 191, dtype: int64

In [311]: NIBRS_month.MONTH_NUM.value_counts(dropna=False).head(1000)
Out[311]: 
        11    24258
        10    23471
         5    23426
        12    23422
         7    23287
         8    22811
         6    22622
         4    21274
         3    21050
         9    20766
         1    20762
         2    14990
2              3991
9              1783
3               134
 MONTH_NUM        5
Name: MONTH_NUM, dtype: int64

In [312]: NIBRS_month.DATA_YEAR.1.value_counts(dropna=False).head(1000)
  File "<ipython-input-312-432289e2bb5e>", line 1
    NIBRS_month.DATA_YEAR.1.value_counts(dropna=False).head(1000)
                          ^
SyntaxError: invalid syntax


In [313]: NIBRS_month=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_month.csv',comment='-').rename(columns=lambda x: x.strip('.',''))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-313-adb7e8959989> in <module>()
----> 1 NIBRS_month=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_month.csv',comment='-').rename(columns=lambda x: x.strip('.',''))

/usr/local/lib/python2.7/site-packages/pandas/util/_decorators.pyc in wrapper(*args, **kwargs)
    185         @wraps(func)
    186         def wrapper(*args, **kwargs):
--> 187             return func(*args, **kwargs)
    188 
    189         if not PY2:

/usr/local/lib/python2.7/site-packages/pandas/core/frame.pyc in rename(self, *args, **kwargs)
   3779         kwargs.pop('axis', None)
   3780         kwargs.pop('mapper', None)
-> 3781         return super(DataFrame, self).rename(**kwargs)
   3782 
   3783     @Substitution(**_shared_doc_kwargs)

/usr/local/lib/python2.7/site-packages/pandas/core/generic.pyc in rename(self, *args, **kwargs)
    972                 level = self.axes[axis]._get_level_number(level)
    973             result._data = result._data.rename_axis(f, axis=baxis, copy=copy,
--> 974                                                     level=level)
    975             result._clear_item_cache()
    976 

/usr/local/lib/python2.7/site-packages/pandas/core/internals.pyc in rename_axis(self, mapper, axis, copy, level)
   3338         """
   3339         obj = self.copy(deep=copy)
-> 3340         obj.set_axis(axis, _transform_index(self.axes[axis], mapper, level))
   3341         return obj
   3342 

/usr/local/lib/python2.7/site-packages/pandas/core/internals.pyc in _transform_index(index, func, level)
   5296         return MultiIndex.from_tuples(items, names=index.names)
   5297     else:
-> 5298         items = [func(x) for x in index]
   5299         return Index(items, name=index.name, tupleize_cols=False)
   5300 

<ipython-input-313-adb7e8959989> in <lambda>(x)
----> 1 NIBRS_month=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_month.csv',comment='-').rename(columns=lambda x: x.strip('.',''))

TypeError: strip() takes at most 1 argument (2 given)

In [314]: NIBRS_month=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_month.csv',comment='-').rename(columns=lambda x: x.strip().strip('.'))

In [315]: print(NIBRS_month.columns)
Index([u'DATA_YEAR', u'NIBRS_MONTH_ID', u'AGENCY_ID', u'MONTH_NUM',
       u'DATA_YEAR.1', u'R', u'REPORT_DA', u'PREPARED_', u'U', u'O',
       u'FF_LINE_NUMBER', u'D', u'DDOCNAME', u'DID', u'MONTH_PUB_STATUS'],
      dtype='object')

In [316]: NIBRS_month=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_month.csv',comment='-').rename(columns=lambda x: x.strip().str.replace('.','_'))
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-316-fe40cbfe4591> in <module>()
----> 1 NIBRS_month=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_month.csv',comment='-').rename(columns=lambda x: x.strip().str.replace('.','_'))

/usr/local/lib/python2.7/site-packages/pandas/util/_decorators.pyc in wrapper(*args, **kwargs)
    185         @wraps(func)
    186         def wrapper(*args, **kwargs):
--> 187             return func(*args, **kwargs)
    188 
    189         if not PY2:

/usr/local/lib/python2.7/site-packages/pandas/core/frame.pyc in rename(self, *args, **kwargs)
   3779         kwargs.pop('axis', None)
   3780         kwargs.pop('mapper', None)
-> 3781         return super(DataFrame, self).rename(**kwargs)
   3782 
   3783     @Substitution(**_shared_doc_kwargs)

/usr/local/lib/python2.7/site-packages/pandas/core/generic.pyc in rename(self, *args, **kwargs)
    972                 level = self.axes[axis]._get_level_number(level)
    973             result._data = result._data.rename_axis(f, axis=baxis, copy=copy,
--> 974                                                     level=level)
    975             result._clear_item_cache()
    976 

/usr/local/lib/python2.7/site-packages/pandas/core/internals.pyc in rename_axis(self, mapper, axis, copy, level)
   3338         """
   3339         obj = self.copy(deep=copy)
-> 3340         obj.set_axis(axis, _transform_index(self.axes[axis], mapper, level))
   3341         return obj
   3342 

/usr/local/lib/python2.7/site-packages/pandas/core/internals.pyc in _transform_index(index, func, level)
   5296         return MultiIndex.from_tuples(items, names=index.names)
   5297     else:
-> 5298         items = [func(x) for x in index]
   5299         return Index(items, name=index.name, tupleize_cols=False)
   5300 

<ipython-input-316-fe40cbfe4591> in <lambda>(x)
----> 1 NIBRS_month=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_month.csv',comment='-').rename(columns=lambda x: x.strip().str.replace('.','_'))

AttributeError: 'str' object has no attribute 'str'

In [317]: NIBRS_month=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_month.csv',comment='-').rename(columns=lambda x: x.strip().replace('.','_'))

In [318]: print(NIBRS_month.columns)
Index([u'DATA_YEAR', u'NIBRS_MONTH_ID', u'AGENCY_ID', u'MONTH_NUM',
       u'DATA_YEAR_1', u'R', u'REPORT_DA', u'PREPARED_', u'U', u'O',
       u'FF_LINE_NUMBER', u'D', u'DDOCNAME', u'DID', u'MONTH_PUB_STATUS'],
      dtype='object')

In [319]: NIBRS_month.DATA_YEAR_1.value_counts(dropna=False).head(1000)
Out[319]: 
      2017    262139
2017            5908
 DATA_YEAR         5
Name: DATA_YEAR_1, dtype: int64

In [320]: NIBRS_month.DATA_YEAR = [x.strip(' ') for x in NIBRS_month.DATA_YEAR]
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-320-5c4491f4099c> in <module>()
----> 1 NIBRS_month.DATA_YEAR = [x.strip(' ') for x in NIBRS_month.DATA_YEAR]

AttributeError: 'int' object has no attribute 'strip'

In [321]: NIBRS_month.DATA_YEAR = [x.replace(' ') for x in NIBRS_month.DATA_YEAR]
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-321-04fb1ea575d4> in <module>()
----> 1 NIBRS_month.DATA_YEAR = [x.replace(' ') for x in NIBRS_month.DATA_YEAR]

TypeError: replace() takes at least 2 arguments (1 given)

In [322]: NIBRS_month.DATA_YEAR = [x.replace(' ','') for x in NIBRS_month.DATA_YEAR]
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-322-72ce8a255264> in <module>()
----> 1 NIBRS_month.DATA_YEAR = [x.replace(' ','') for x in NIBRS_month.DATA_YEAR]

AttributeError: 'int' object has no attribute 'replace'

In [323]: NIBRS_month.DATA_YEAR = NIBRS_month.DATA_YEAR.apply(lambda x: x.strip(' '))
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-323-cf8af78e246a> in <module>()
----> 1 NIBRS_month.DATA_YEAR = NIBRS_month.DATA_YEAR.apply(lambda x: x.strip(' '))

/usr/local/lib/python2.7/site-packages/pandas/core/series.pyc in apply(self, func, convert_dtype, args, **kwds)
   3192             else:
   3193                 values = self.astype(object).values
-> 3194                 mapped = lib.map_infer(values, f, convert=convert_dtype)
   3195 
   3196         if len(mapped) and isinstance(mapped[0], Series):

pandas/_libs/src/inference.pyx in pandas._libs.lib.map_infer()

<ipython-input-323-cf8af78e246a> in <lambda>(x)
----> 1 NIBRS_month.DATA_YEAR = NIBRS_month.DATA_YEAR.apply(lambda x: x.strip(' '))

AttributeError: 'int' object has no attribute 'strip'

In [324]: NIBRS_month = NIBRS_month.apply(NIBRS_month.to_string)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-324-fe0cd169d819> in <module>()
----> 1 NIBRS_month = NIBRS_month.apply(NIBRS_month.to_string)

/usr/local/lib/python2.7/site-packages/pandas/core/frame.pyc in apply(self, func, axis, broadcast, raw, reduce, result_type, args, **kwds)
   6012                          args=args,
   6013                          kwds=kwds)
-> 6014         return op.get_result()
   6015 
   6016     def applymap(self, func):

/usr/local/lib/python2.7/site-packages/pandas/core/apply.pyc in get_result(self)
    316                                       *self.args, **self.kwds)
    317 
--> 318         return super(FrameRowApply, self).get_result()
    319 
    320     def apply_broadcast(self):

/usr/local/lib/python2.7/site-packages/pandas/core/apply.pyc in get_result(self)
    140             return self.apply_raw()
    141 
--> 142         return self.apply_standard()
    143 
    144     def apply_empty_result(self):

/usr/local/lib/python2.7/site-packages/pandas/core/apply.pyc in apply_standard(self)
    246 
    247         # compute the result using the series generator
--> 248         self.apply_series_generator()
    249 
    250         # wrap results

/usr/local/lib/python2.7/site-packages/pandas/core/apply.pyc in apply_series_generator(self)
    275             try:
    276                 for i, v in enumerate(series_gen):
--> 277                     results[i] = self.f(v)
    278                     keys.append(v.name)
    279             except Exception as e:

/usr/local/lib/python2.7/site-packages/pandas/core/frame.pyc in to_string(self, buf, columns, col_space, header, index, na_rep, formatters, float_format, sparsify, index_names, justify, line_width, max_rows, max_cols, show_dimensions)
   1969                                            max_cols=max_cols,
   1970                                            show_dimensions=show_dimensions)
-> 1971         formatter.to_string()
   1972 
   1973         if buf is None:

/usr/local/lib/python2.7/site-packages/pandas/io/formats/format.pyc in to_string(self)
    654         if not self.index:
    655             text = text.replace('\n ', '\n').strip()
--> 656         self.buf.writelines(text)
    657 
    658         if self.should_show_dimensions:

/usr/local/lib/python2.7/site-packages/pandas/core/generic.pyc in __getattr__(self, name)
   4374             if self._info_axis._can_hold_identifiers_and_holds_name(name):
   4375                 return self[name]
-> 4376             return object.__getattribute__(self, name)
   4377 
   4378     def __setattr__(self, name, value):

AttributeError: ("'Series' object has no attribute 'writelines'", u'occurred at index DATA_YEAR')

In [325]: NIBRS_month.columns = [strip_non_ascii(x) for x in NIBRS_month.columns]
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-325-fcf1a2a542a1> in <module>()
----> 1 NIBRS_month.columns = [strip_non_ascii(x) for x in NIBRS_month.columns]

NameError: name 'strip_non_ascii' is not defined

In [326]: def strip_non_ascii(string):
     ...: ''' Returns the string without non ASCII characters'''
     ...: stripped = (c for c in string if 0 < ord(c) < 127)
     ...: return ''.join(stripped)
  File "<ipython-input-326-28313819820b>", line 2
    ''' Returns the string without non ASCII characters'''
                                                         ^
IndentationError: expected an indented block


In [327]: def strip_non_ascii(string):
     ...: #''' Returns the string without non ASCII characters'''
     ...: stripped = (c for c in string if 0 < ord(c) < 127)
     ...: return ''.join(stripped)
  File "<ipython-input-327-b8500d4d8d31>", line 3
    stripped = (c for c in string if 0 < ord(c) < 127)
           ^
IndentationError: expected an indented block


In [328]: def strip_non_ascii(string):
     ...: #''' Returns the string without non ASCII characters'''
     ...:     stripped = (c for c in string if 0 < ord(c) < 127)
     ...: return ''.join(stripped)
  File "<ipython-input-328-04bb312c549e>", line 4
    return ''.join(stripped)
SyntaxError: 'return' outside function


In [329]: def strip_non_ascii(string):
     ...: #''' Returns the string without non ASCII characters'''
     ...:     stripped = (c for c in string if 0 < ord(c) < 127)
     ...:     return ''.join(stripped)
     ...: 

In [330]: NIBRS_month.columns = [strip_non_ascii(x) for x in NIBRS_month.columns]

In [331]: print(NIBRS_month.columns)
Index([u'DATA_YEAR', u'NIBRS_MONTH_ID', u'AGENCY_ID', u'MONTH_NUM',
       u'DATA_YEAR_1', u'R', u'REPORT_DA', u'PREPARED_', u'U', u'O',
       u'FF_LINE_NUMBER', u'D', u'DDOCNAME', u'DID', u'MONTH_PUB_STATUS'],
      dtype='object')

In [332]: NIBRS_month = NIBRS_month.apply(NIBRS_month.to_string)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-332-fe0cd169d819> in <module>()
----> 1 NIBRS_month = NIBRS_month.apply(NIBRS_month.to_string)

/usr/local/lib/python2.7/site-packages/pandas/core/frame.pyc in apply(self, func, axis, broadcast, raw, reduce, result_type, args, **kwds)
   6012                          args=args,
   6013                          kwds=kwds)
-> 6014         return op.get_result()
   6015 
   6016     def applymap(self, func):

/usr/local/lib/python2.7/site-packages/pandas/core/apply.pyc in get_result(self)
    316                                       *self.args, **self.kwds)
    317 
--> 318         return super(FrameRowApply, self).get_result()
    319 
    320     def apply_broadcast(self):

/usr/local/lib/python2.7/site-packages/pandas/core/apply.pyc in get_result(self)
    140             return self.apply_raw()
    141 
--> 142         return self.apply_standard()
    143 
    144     def apply_empty_result(self):

/usr/local/lib/python2.7/site-packages/pandas/core/apply.pyc in apply_standard(self)
    246 
    247         # compute the result using the series generator
--> 248         self.apply_series_generator()
    249 
    250         # wrap results

/usr/local/lib/python2.7/site-packages/pandas/core/apply.pyc in apply_series_generator(self)
    275             try:
    276                 for i, v in enumerate(series_gen):
--> 277                     results[i] = self.f(v)
    278                     keys.append(v.name)
    279             except Exception as e:

/usr/local/lib/python2.7/site-packages/pandas/core/frame.pyc in to_string(self, buf, columns, col_space, header, index, na_rep, formatters, float_format, sparsify, index_names, justify, line_width, max_rows, max_cols, show_dimensions)
   1969                                            max_cols=max_cols,
   1970                                            show_dimensions=show_dimensions)
-> 1971         formatter.to_string()
   1972 
   1973         if buf is None:

/usr/local/lib/python2.7/site-packages/pandas/io/formats/format.pyc in to_string(self)
    654         if not self.index:
    655             text = text.replace('\n ', '\n').strip()
--> 656         self.buf.writelines(text)
    657 
    658         if self.should_show_dimensions:

/usr/local/lib/python2.7/site-packages/pandas/core/generic.pyc in __getattr__(self, name)
   4374             if self._info_axis._can_hold_identifiers_and_holds_name(name):
   4375                 return self[name]
-> 4376             return object.__getattribute__(self, name)
   4377 
   4378     def __setattr__(self, name, value):

AttributeError: ("'Series' object has no attribute 'writelines'", u'occurred at index DATA_YEAR')

In [333]: NIBRS_month.DATA_YEAR = [x.strip(' ') for x in NIBRS_month.DATA_YEAR]
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-333-5c4491f4099c> in <module>()
----> 1 NIBRS_month.DATA_YEAR = [x.strip(' ') for x in NIBRS_month.DATA_YEAR]

AttributeError: 'int' object has no attribute 'strip'

In [334]: NIBRS_month.DATA_YEAR = [x.strip('') for x in NIBRS_month.DATA_YEAR]
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-334-2742bbcac488> in <module>()
----> 1 NIBRS_month.DATA_YEAR = [x.strip('') for x in NIBRS_month.DATA_YEAR]

AttributeError: 'int' object has no attribute 'strip'

In [335]: NIBRS_month.DATA_YEAR = [x.replace(' ',0) for x in NIBRS_month.DATA_YEAR]
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-335-8d6be71b1741> in <module>()
----> 1 NIBRS_month.DATA_YEAR = [x.replace(' ',0) for x in NIBRS_month.DATA_YEAR]

TypeError: expected a string or other character buffer object

In [336]: NIBRS_month.DATA_YEAR = [x.replace(' ','0') for x in NIBRS_month.DATA_YEAR]
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-336-f7a8f6d1beb5> in <module>()
----> 1 NIBRS_month.DATA_YEAR = [x.replace(' ','0') for x in NIBRS_month.DATA_YEAR]

AttributeError: 'int' object has no attribute 'replace'

In [337]: NIBRS_month.DATA_YEAR = NIBRS_month.DATA_YEAR.apply(lambda x: x.strip('DATA_YEAR'))
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-337-fb4718d24ed5> in <module>()
----> 1 NIBRS_month.DATA_YEAR = NIBRS_month.DATA_YEAR.apply(lambda x: x.strip('DATA_YEAR'))

/usr/local/lib/python2.7/site-packages/pandas/core/series.pyc in apply(self, func, convert_dtype, args, **kwds)
   3192             else:
   3193                 values = self.astype(object).values
-> 3194                 mapped = lib.map_infer(values, f, convert=convert_dtype)
   3195 
   3196         if len(mapped) and isinstance(mapped[0], Series):

pandas/_libs/src/inference.pyx in pandas._libs.lib.map_infer()

<ipython-input-337-fb4718d24ed5> in <lambda>(x)
----> 1 NIBRS_month.DATA_YEAR = NIBRS_month.DATA_YEAR.apply(lambda x: x.strip('DATA_YEAR'))

AttributeError: 'int' object has no attribute 'strip'

In [338]: NIBRS_month = NIBRS_month.infer_objects()

In [339]: print(NIBRS_month.columns)
Index([u'DATA_YEAR', u'NIBRS_MONTH_ID', u'AGENCY_ID', u'MONTH_NUM',
       u'DATA_YEAR_1', u'R', u'REPORT_DA', u'PREPARED_', u'U', u'O',
       u'FF_LINE_NUMBER', u'D', u'DDOCNAME', u'DID', u'MONTH_PUB_STATUS'],
      dtype='object')

In [340]: print(NIBRS_month.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 268052 entries, 0 to 268051
Data columns (total 15 columns):
DATA_YEAR           268052 non-null object
NIBRS_MONTH_ID      268052 non-null object
AGENCY_ID           268052 non-null object
MONTH_NUM           268052 non-null object
DATA_YEAR_1         268052 non-null object
R                   268052 non-null object
REPORT_DA           268052 non-null object
PREPARED_           268052 non-null object
U                   268052 non-null object
O                   268052 non-null object
FF_LINE_NUMBER      268052 non-null object
D                   268052 non-null object
DDOCNAME            268052 non-null object
DID                 268052 non-null object
MONTH_PUB_STATUS    268052 non-null object
dtypes: object(15)
memory usage: 30.7+ MB
None

In [341]: NIBRS_month.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[341]: 
      2017    262134
2017            5908
 DATA_YEAR         5
  2017             5
Name: DATA_YEAR, dtype: int64

In [342]: NIBRS_month = NIBRS_month.astype(str)

In [343]: NIBRS_month.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[343]: 
      2017    262134
2017            5908
 DATA_YEAR         5
  2017             5
Name: DATA_YEAR, dtype: int64

In [344]: NIBRS_month1=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_month.csv')

In [345]: NIBRS_month1.DATA_YEAR.value_counts(dropna=False).head(1000)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-345-7cbe47457ab2> in <module>()
----> 1 NIBRS_month1.DATA_YEAR.value_counts(dropna=False).head(1000)

/usr/local/lib/python2.7/site-packages/pandas/core/generic.pyc in __getattr__(self, name)
   4374             if self._info_axis._can_hold_identifiers_and_holds_name(name):
   4375                 return self[name]
-> 4376             return object.__getattribute__(self, name)
   4377 
   4378     def __setattr__(self, name, value):

AttributeError: 'DataFrame' object has no attribute 'DATA_YEAR'

In [346]: print(NIBRS_month1.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 268058 entries, 0 to 268057
Data columns (total 15 columns):
 DATA_YEAR                                            268058 non-null object
NIBRS_MONTH_ID                                        268058 non-null object
 AGENCY_ID                                            268058 non-null object
 MONTH_NUM                                            268058 non-null object
 DATA_YEAR.1                                          268058 non-null object
R                                                     268058 non-null object
REPORT_DA                                             268058 non-null object
PREPARED_                                             268058 non-null object
U                                                     268058 non-null object
O                                                     268058 non-null object
FF_LINE_NUMBER                                        268058 non-null object
D                                                     268058 non-null object
DDOCNAME                                              268058 non-null object
       DID                                            268058 non-null object
MONTH_PUB_STATUS                                      268058 non-null object
dtypes: object(15)
memory usage: 30.7+ MB
None

In [347]: NIBRS_month1=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_month.csv').rename(columns=lambda x: x.strip())

In [348]: NIBRS_month1.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[348]: 
      2017    262128
2017            5914
----------         6
 DATA_YEAR         5
  2017             5
Name: DATA_YEAR, dtype: int64

In [349]: NIBRS_month['DATA_YEAR'] = NIBRS_month['DATA_YEAR_1'].astype(str
     ...: 
     ...: 
     ...: 
     ...: 
     ...: 
     ...: 
     ...: 
     ...: 
     ...: 
     ...: 
     ...: 
     ...: )

In [350]: print(NIBRS_month.volumns)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-350-ed1cecb44880> in <module>()
----> 1 print(NIBRS_month.volumns)

/usr/local/lib/python2.7/site-packages/pandas/core/generic.pyc in __getattr__(self, name)
   4374             if self._info_axis._can_hold_identifiers_and_holds_name(name):
   4375                 return self[name]
-> 4376             return object.__getattribute__(self, name)
   4377 
   4378     def __setattr__(self, name, value):

AttributeError: 'DataFrame' object has no attribute 'volumns'

In [351]: print(NIBRS_month.columns)
Index([u'DATA_YEAR', u'NIBRS_MONTH_ID', u'AGENCY_ID', u'MONTH_NUM',
       u'DATA_YEAR_1', u'R', u'REPORT_DA', u'PREPARED_', u'U', u'O',
       u'FF_LINE_NUMBER', u'D', u'DDOCNAME', u'DID', u'MONTH_PUB_STATUS'],
      dtype='object')

In [352]: NIBRS_month1.DATA_YEAR_1.value_counts(dropna=False).head(1000)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-352-59f97f2d65fa> in <module>()
----> 1 NIBRS_month1.DATA_YEAR_1.value_counts(dropna=False).head(1000)

/usr/local/lib/python2.7/site-packages/pandas/core/generic.pyc in __getattr__(self, name)
   4374             if self._info_axis._can_hold_identifiers_and_holds_name(name):
   4375                 return self[name]
-> 4376             return object.__getattribute__(self, name)
   4377 
   4378     def __setattr__(self, name, value):

AttributeError: 'DataFrame' object has no attribute 'DATA_YEAR_1'

In [353]: NIBRS_month.DATA_YEAR_1.value_counts(dropna=False).head(1000)
Out[353]: 
      2017    262139
2017            5908
 DATA_YEAR         5
Name: DATA_YEAR_1, dtype: int64

In [354]: NIBRS_month['DATA_YEAR'] = NIBRS_month['DATA_YEAR_1'].astype(str).replace('DATA_YEAR','')

In [355]: NIBRS_month.DATA_YEAR_1.value_counts(dropna=False).head(1000)
Out[355]: 
      2017    262139
2017            5908
 DATA_YEAR         5
Name: DATA_YEAR_1, dtype: int64

In [356]: 

In [356]: NIBRS_month['DATA_YEAR'] = NIBRS_month['DATA_YEAR_2'].astype(str).replace('DATA_YEAR','')
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
<ipython-input-356-d7010dd8590a> in <module>()
----> 1 NIBRS_month['DATA_YEAR'] = NIBRS_month['DATA_YEAR_2'].astype(str).replace('DATA_YEAR','')

/usr/local/lib/python2.7/site-packages/pandas/core/frame.pyc in __getitem__(self, key)
   2686             return self._getitem_multilevel(key)
   2687         else:
-> 2688             return self._getitem_column(key)
   2689 
   2690     def _getitem_column(self, key):

/usr/local/lib/python2.7/site-packages/pandas/core/frame.pyc in _getitem_column(self, key)
   2693         # get column
   2694         if self.columns.is_unique:
-> 2695             return self._get_item_cache(key)
   2696 
   2697         # duplicate columns & possible reduce dimensionality

/usr/local/lib/python2.7/site-packages/pandas/core/generic.pyc in _get_item_cache(self, item)
   2487         res = cache.get(item)
   2488         if res is None:
-> 2489             values = self._data.get(item)
   2490             res = self._box_item_values(item, values)
   2491             cache[item] = res

/usr/local/lib/python2.7/site-packages/pandas/core/internals.pyc in get(self, item, fastpath)
   4113 
   4114             if not isna(item):
-> 4115                 loc = self.items.get_loc(item)
   4116             else:
   4117                 indexer = np.arange(len(self.items))[isna(self.items)]

/usr/local/lib/python2.7/site-packages/pandas/core/indexes/base.pyc in get_loc(self, key, method, tolerance)
   3078                 return self._engine.get_loc(key)
   3079             except KeyError:
-> 3080                 return self._engine.get_loc(self._maybe_cast_indexer(key))
   3081 
   3082         indexer = self.get_indexer([key], method=method, tolerance=tolerance)

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

KeyError: 'DATA_YEAR_2'

In [357]: NIBRS_month['DATA_YEAR'] = NIBRS_month['DATA_YEAR_3'].astype(str).replace('DATA_YEAR','')
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
<ipython-input-357-eeff849d0b87> in <module>()
----> 1 NIBRS_month['DATA_YEAR'] = NIBRS_month['DATA_YEAR_3'].astype(str).replace('DATA_YEAR','')

/usr/local/lib/python2.7/site-packages/pandas/core/frame.pyc in __getitem__(self, key)
   2686             return self._getitem_multilevel(key)
   2687         else:
-> 2688             return self._getitem_column(key)
   2689 
   2690     def _getitem_column(self, key):

/usr/local/lib/python2.7/site-packages/pandas/core/frame.pyc in _getitem_column(self, key)
   2693         # get column
   2694         if self.columns.is_unique:
-> 2695             return self._get_item_cache(key)
   2696 
   2697         # duplicate columns & possible reduce dimensionality

/usr/local/lib/python2.7/site-packages/pandas/core/generic.pyc in _get_item_cache(self, item)
   2487         res = cache.get(item)
   2488         if res is None:
-> 2489             values = self._data.get(item)
   2490             res = self._box_item_values(item, values)
   2491             cache[item] = res

/usr/local/lib/python2.7/site-packages/pandas/core/internals.pyc in get(self, item, fastpath)
   4113 
   4114             if not isna(item):
-> 4115                 loc = self.items.get_loc(item)
   4116             else:
   4117                 indexer = np.arange(len(self.items))[isna(self.items)]

/usr/local/lib/python2.7/site-packages/pandas/core/indexes/base.pyc in get_loc(self, key, method, tolerance)
   3078                 return self._engine.get_loc(key)
   3079             except KeyError:
-> 3080                 return self._engine.get_loc(self._maybe_cast_indexer(key))
   3081 
   3082         indexer = self.get_indexer([key], method=method, tolerance=tolerance)

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

KeyError: 'DATA_YEAR_3'

In [358]: print(NIBRS_month.volumns)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-358-ed1cecb44880> in <module>()
----> 1 print(NIBRS_month.volumns)

/usr/local/lib/python2.7/site-packages/pandas/core/generic.pyc in __getattr__(self, name)
   4374             if self._info_axis._can_hold_identifiers_and_holds_name(name):
   4375                 return self[name]
-> 4376             return object.__getattribute__(self, name)
   4377 
   4378     def __setattr__(self, name, value):

AttributeError: 'DataFrame' object has no attribute 'volumns'

In [359]: print(NIBRS_month.columns)
Index([u'DATA_YEAR', u'NIBRS_MONTH_ID', u'AGENCY_ID', u'MONTH_NUM',
       u'DATA_YEAR_1', u'R', u'REPORT_DA', u'PREPARED_', u'U', u'O',
       u'FF_LINE_NUMBER', u'D', u'DDOCNAME', u'DID', u'MONTH_PUB_STATUS'],
      dtype='object')

In [360]: NIBRS_month['DATA_YEAR'] = NIBRS_month['DATA_YEAR_1'].astype(str).replace('DATA_YEAR','')

In [361]: print(NIBRS_month.columns)
Index([u'DATA_YEAR', u'NIBRS_MONTH_ID', u'AGENCY_ID', u'MONTH_NUM',
       u'DATA_YEAR_1', u'R', u'REPORT_DA', u'PREPARED_', u'U', u'O',
       u'FF_LINE_NUMBER', u'D', u'DDOCNAME', u'DID', u'MONTH_PUB_STATUS'],
      dtype='object')

In [362]: NIBRS_month.DATA_YEAR_1.value_counts(dropna=False).head(1000)
Out[362]: 
      2017    262139
2017            5908
 DATA_YEAR         5
Name: DATA_YEAR_1, dtype: int64

In [363]: NIBRS_month['DATA_YEAR'] = NIBRS_month['DATA_YEAR_1'].astype(str).[x.strip(' ') for x in NIBRS_month.DATA_YEAR_1].replace('DATA_YEAR','')
  File "<ipython-input-363-8ebdec3ea045>", line 1
    NIBRS_month['DATA_YEAR'] = NIBRS_month['DATA_YEAR_1'].astype(str).[x.strip(' ') for x in NIBRS_month.DATA_YEAR_1].replace('DATA_YEAR','')
                                                                      ^
SyntaxError: invalid syntax


In [364]: NIBRS_month['DATA_YEAR'] = NIBRS_month['DATA_YEAR_1'].astype(str)..apply(lambda x: x.strip('DATA_YEAR'))
  File "<ipython-input-364-1c13cf2d178d>", line 1
    NIBRS_month['DATA_YEAR'] = NIBRS_month['DATA_YEAR_1'].astype(str)..apply(lambda x: x.strip('DATA_YEAR'))
                                                                      ^
SyntaxError: invalid syntax


In [365]: NIBRS_month['DATA_YEAR'] = NIBRS_month['DATA_YEAR_1'].astype(str).apply(lambda x: x.strip('DATA_YEAR'))

In [366]: NIBRS_month.DATA_YEAR_1.value_counts(dropna=False).head(1000)
Out[366]: 
      2017    262139
2017            5908
 DATA_YEAR         5
Name: DATA_YEAR_1, dtype: int64

In [367]: NIBRS_month['DATA_YEAR'] = NIBRS_month['DATA_YEAR_1'].astype(str).apply(lambda x: x.strip(' DATA_YEAR'))

In [368]: NIBRS_month.DATA_YEAR_1.value_counts(dropna=False).head(1000)
Out[368]: 
      2017    262139
2017            5908
 DATA_YEAR         5
Name: DATA_YEAR_1, dtype: int64

In [369]: NIBRS_month['DATA_YEAR'] = NIBRS_month['DATA_YEAR_1'].astype(str).apply(lambda x: x.strip(' '))

In [370]: NIBRS_month.DATA_YEAR_1.value_counts(dropna=False).head(1000)
Out[370]: 
      2017    262139
2017            5908
 DATA_YEAR         5
Name: DATA_YEAR_1, dtype: int64

In [371]: NIBRS_month['DATA_YEAR_2'] = NIBRS_month['DATA_YEAR'].astype(str).apply(lambda x: x.strip(' '))

In [372]: NIBRS_month.DATA_YEAR_2.value_counts(dropna=False).head(1000)
Out[372]: 
2017         268047
DATA_YEAR         5
Name: DATA_YEAR_2, dtype: int64

In [373]: NIBRS_month.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[373]: 
2017         268047
DATA_YEAR         5
Name: DATA_YEAR, dtype: int64

In [374]: NIBRS_month['DATA_YEAR_2'] = NIBRS_month['DATA_YEAR'].astype(str).apply(lambda x: x.strip('DATA_YEAR'))

In [375]: NIBRS_month.DATA_YEAR_2.value_counts(dropna=False).head(1000)
Out[375]: 
2017    268047
             5
Name: DATA_YEAR_2, dtype: int64

In [376]: NIBRS_month['DATA_YEAR_2'] = NIBRS_month['DATA_YEAR'].astype(str).apply(lambda x: x.strip(' '))

In [377]: NIBRS_month.DATA_YEAR_2.value_counts(dropna=False).head(1000)
Out[377]: 
2017         268047
DATA_YEAR         5
Name: DATA_YEAR_2, dtype: int64

In [378]: NIBRS_month['DATA_YEAR_2'] = NIBRS_month['DATA_YEAR'].astype(str).apply(lambda x: x.strip('DATA_YEAR')).apply(lambda x: x.strip(' '))

In [379]: NIBRS_month.DATA_YEAR_2.value_counts(dropna=False).head(1000)
Out[379]: 
2017    268047
             5
Name: DATA_YEAR_2, dtype: int64

In [380]: NIBRS_month.replace('', np.NaN)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-380-7659bd3ca963> in <module>()
----> 1 NIBRS_month.replace('', np.NaN)

NameError: name 'np' is not defined

In [381]: import numpy as np

In [382]: NIBRS_month.replace('', np.NaN)
Out[382]: 
       DATA_YEAR  NIBRS_MONTH_ID   AGENCY_ID   MONTH_NUM DATA_YEAR_1  R     ...      FF_LINE_NUMBER  D                                           DDOCNAME         DID  MONTH_PUB_STATUS DATA_YEAR_2
0           2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
1           2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
2           2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
3           2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
4           2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
5           2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
6           2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
7           2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
8           2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
9           2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
10          2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
11          2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
12          2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
13          2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
14          2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
15          2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
16          2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
17          2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
18          2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
19          2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
20          2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
21          2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
22          2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
23          2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
24          2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
25          2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
26          2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
27          2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
28          2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
29          2017          224714       19711          10        2017  I     ...                      C  2017_10_TX2201200_NIBRS                       ...                             0        2017
...          ...             ...         ...         ...         ... ..     ...                 ... ..                                                ...         ...               ...         ...
268022      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268023      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268024      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268025      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268026      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268027      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268028      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268029      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268030      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268031      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268032      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268033      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268034      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268035      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268036      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268037      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268038      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268039      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268040      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268041      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268042      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268043      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268044      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268045      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268046      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268047      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268048      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268049      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268050      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017
268051      2017          201897       19678           9        2017  I     ...                      C  2017_09_TX2120400_NIBRS                       ...                             0        2017

[268052 rows x 16 columns]

In [383]: NIBRS_month['DATA_YEAR_2'] = NIBRS_month['DATA_YEAR'].astype(str).apply(lambda x: x.strip('DATA_YEAR')).replace('', np.NaN)

In [384]: NIBRS_month.DATA_YEAR_2.value_counts(dropna=False).head(1000)
Out[384]: 
2017    268047
NaN          5
Name: DATA_YEAR_2, dtype: int64

In [385]: NIBRS_month['DATA_YEAR_2'] = NIBRS_month['DATA_YEAR'].astype(str).apply(lambda x: x.strip('DATA_YEAR')).replace('', np.NaN).dropna(how='all')

In [386]: NIBRS_month.DATA_YEAR_2.value_counts(dropna=False).head(1000)
Out[386]: 
2017    268047
NaN          5
Name: DATA_YEAR_2, dtype: int64

In [387]: NIBRS_month['DATA_YEAR_3'] = NIBRS_month['DATA_YEAR'].astype(str).apply(lambda x: x.strip('DATA_YEAR')).replace('', np.NaN).dropna(how='all')

In [388]: NIBRS_month.DATA_YEAR_3.value_counts(dropna=False).head(1000)
Out[388]: 
2017    268047
NaN          5
Name: DATA_YEAR_3, dtype: int64

In [389]: NIBRS_month['DATA_YEAR_3'] = NIBRS_month['DATA_YEAR'].astype(str).apply(lambda x: x.strip('DATA_YEAR')).replace('', np.NaN).dropna()

In [390]: NIBRS_month.DATA_YEAR_3.value_counts(dropna=False).head(1000)
Out[390]: 
2017    268047
NaN          5
Name: DATA_YEAR_3, dtype: int64

In [391]: NIBRS_month.dropna(how='all')
Out[391]: 
       DATA_YEAR  NIBRS_MONTH_ID   AGENCY_ID   MONTH_NUM DATA_YEAR_1  R     ...      D                                           DDOCNAME         DID  MONTH_PUB_STATUS DATA_YEAR_2 DATA_YEAR_3
0           2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
1           2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
2           2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
3           2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
4           2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
5           2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
6           2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
7           2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
8           2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
9           2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
10          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
11          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
12          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
13          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
14          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
15          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
16          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
17          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
18          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
19          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
20          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
21          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
22          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
23          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
24          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
25          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
26          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
27          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
28          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
29          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        2017
...          ...             ...         ...         ...         ... ..     ...     ..                                                ...         ...               ...         ...         ...
268022      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268023      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268024      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268025      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268026      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268027      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268028      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268029      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268030      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268031      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268032      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268033      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268034      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268035      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268036      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268037      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268038      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268039      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268040      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268041      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268042      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268043      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268044      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268045      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268046      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268047      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268048      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268049      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268050      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017
268051      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        2017

[268052 rows x 17 columns]

In [392]: NIBRS_month.DATA_YEAR_3.value_counts(dropna=False).head(1000)
Out[392]: 
2017    268047
NaN          5
Name: DATA_YEAR_3, dtype: int64

In [393]: NIBRS_month['DATA_YEAR_3'] = NIBRS_month['DATA_YEAR'].astype(str).apply(lambda x: x.strip('DATA_YEAR')).replace('', np.NaN).dropna(how='all')

In [394]: NIBRS_month.DATA_YEAR_3.value_counts(dropna=False).head(1000)
Out[394]: 
2017    268047
NaN          5
Name: DATA_YEAR_3, dtype: int64

In [395]: NIBRS_month.DATA_YEAR_3.value_counts().head(1000)
Out[395]: 
2017    268047
Name: DATA_YEAR_3, dtype: int64

In [396]: NIBRS_month.DATA_YEAR_3.value_counts(dropna=False).head(1000)
Out[396]: 
2017    268047
NaN          5
Name: DATA_YEAR_3, dtype: int64

In [397]: NIBRS_month['DATA_YEAR_3'] = NIBRS_month['DATA_YEAR'].astype(str).apply(lambda x: x.strip('DATA_YEAR')).replace('', np.NaN).dropna(how='all',inplace=True)

In [398]: NIBRS_month.DATA_YEAR_3.value_counts(dropna=False).head(1000)
Out[398]: 
NaN    268052
Name: DATA_YEAR_3, dtype: int64

In [399]: NIBRS_month.DATA_YEAR_3.value_counts(dropna=False).head(1000)
Out[399]: 
NaN    268052
Name: DATA_YEAR_3, dtype: int64

In [400]: NIBRS_month.dropna(how='all')
Out[400]: 
       DATA_YEAR  NIBRS_MONTH_ID   AGENCY_ID   MONTH_NUM DATA_YEAR_1  R     ...      D                                           DDOCNAME         DID  MONTH_PUB_STATUS DATA_YEAR_2 DATA_YEAR_3
0           2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
1           2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
2           2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
3           2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
4           2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
5           2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
6           2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
7           2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
8           2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
9           2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
10          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
11          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
12          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
13          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
14          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
15          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
16          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
17          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
18          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
19          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
20          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
21          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
22          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
23          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
24          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
25          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
26          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
27          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
28          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
29          2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
...          ...             ...         ...         ...         ... ..     ...     ..                                                ...         ...               ...         ...         ...
268022      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268023      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268024      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268025      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268026      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268027      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268028      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268029      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268030      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268031      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268032      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268033      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268034      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268035      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268036      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268037      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268038      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268039      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268040      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268041      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268042      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268043      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268044      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268045      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268046      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268047      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268048      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268049      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268050      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None
268051      2017          201897       19678           9        2017  I     ...      C  2017_09_TX2120400_NIBRS                       ...                             0        2017        None

[268052 rows x 17 columns]

In [401]: NIBRS_month.dropna(how='all',inplace=True)

In [402]: NIBRS_month.head(100)
Out[402]: 
   DATA_YEAR  NIBRS_MONTH_ID   AGENCY_ID   MONTH_NUM DATA_YEAR_1  R     ...      D                                           DDOCNAME         DID  MONTH_PUB_STATUS DATA_YEAR_2 DATA_YEAR_3
0       2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
1       2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
2       2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
3       2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
4       2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
5       2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
6       2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
7       2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
8       2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
9       2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
10      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
11      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
12      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
13      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
14      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
15      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
16      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
17      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
18      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
19      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
20      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
21      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
22      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
23      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
24      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
25      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
26      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
27      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
28      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
29      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
..       ...             ...         ...         ...         ... ..     ...     ..                                                ...         ...               ...         ...         ...
70      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
71      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
72      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
73      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
74      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
75      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
76      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
77      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
78      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
79      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
80      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
81      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
82      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
83      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
84      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
85      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
86      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
87      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
88      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
89      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
90      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
91      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
92      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
93      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
94      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
95      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
96      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
97      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
98      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None
99      2017          224714       19711          10        2017  I     ...      C  2017_10_TX2201200_NIBRS                       ...                             0        2017        None

[100 rows x 17 columns]

In [403]: NIBRS_month.DATA_YEAR_3.value_counts(dropna=False).head(1000)
Out[403]: 
NaN    268052
Name: DATA_YEAR_3, dtype: int64

In [404]: NIBRS_month['DATA_YEAR_3'] = NIBRS_month['DATA_YEAR'].astype(str).apply(lambda x: x.strip('DATA_YEAR')).replace('', np.NaN).dropna(how='all'))
  File "<ipython-input-404-53f26710e4a5>", line 1
    NIBRS_month['DATA_YEAR_3'] = NIBRS_month['DATA_YEAR'].astype(str).apply(lambda x: x.strip('DATA_YEAR')).replace('', np.NaN).dropna(how='all'))
                                                                                                                                                 ^
SyntaxError: invalid syntax


In [405]: NIBRS_month['DATA_YEAR_3'] = NIBRS_month['DATA_YEAR'].astype(str).apply(lambda x: x.strip('DATA_YEAR')).replace('', np.NaN).dropna(how='all')

In [406]: NIBRS_month.DATA_YEAR_3.value_counts(dropna=False).head(1000)
Out[406]: 
2017    268047
NaN          5
Name: DATA_YEAR_3, dtype: int64

In [407]: NIBRS_month['DATA_YEAR_3'].dropna(how='all',inplace=True)

In [408]: NIBRS_month.DATA_YEAR_3.value_counts(dropna=False).head(1000)
Out[408]: 
2017    268047
Name: DATA_YEAR_3, dtype: int64

In [409]: NIBRS_month.DATA_YEAR_1.value_counts(dropna=False).head(1000)
Out[409]: 
      2017    262139
2017            5908
 DATA_YEAR         5
Name: DATA_YEAR_1, dtype: int64

In [410]: NIBRS_OFFENDER=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_OFFENDER.csv',comment='-').rename(columns=lambda x: x.strip())

In [411]: print(NIBRS_OFFENDER.columns)
Index([u'DATA_YEAR', u'OFFENDER_ID', u'INCIDENT_ID', u'OFFENDER_SEQ_NUM',
       u'AGE_ID', u'AGE_NUM', u'S', u'RACE_ID', u'ETHNICITY_ID',
       u'FF_LINE_NUMBER', u'AGE_RANGE_LOW_NUM', u'AGE_RANGE_HIGH_NUM'],
      dtype='object')

In [412]: print(NIBRS_OFFENDER.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 311477 entries, 0 to 311476
Data columns (total 12 columns):
DATA_YEAR             311477 non-null object
OFFENDER_ID           311477 non-null object
INCIDENT_ID           311477 non-null object
OFFENDER_SEQ_NUM      311477 non-null object
AGE_ID                311477 non-null object
AGE_NUM               311477 non-null object
S                     311477 non-null object
RACE_ID               311477 non-null object
ETHNICITY_ID          311477 non-null object
FF_LINE_NUMBER        311477 non-null object
AGE_RANGE_LOW_NUM     311477 non-null object
AGE_RANGE_HIGH_NUM    311477 non-null object
dtypes: object(12)
memory usage: 28.5+ MB
None

In [413]: NIBRS_OFFENDER.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[413]: 
      2017    311466
 DATA_YEAR         6
  2017             2
   2017            2
 2017              1
Name: DATA_YEAR, dtype: int64

In [414]: NIBRS_OFFENSE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_OFFENSE.csv',comment='-').rename(columns=lambda x: x.strip())

In [415]: print(NIBRS_OFFENSE.columns)
Index([u'DATA_YEAR', u'OFFENSE_ID', u'INCIDENT_ID', u'OFFENSE_TYPE_ID', u'A',
       u'LOCATION_ID', u'NUM_PREMISES_ENTERED', u'M', u'FF_LINE_NUMBER'],
      dtype='object')

In [416]: print(NIBRS_OFFENSE.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 290446 entries, 0 to 290445
Data columns (total 9 columns):
DATA_YEAR               290446 non-null object
OFFENSE_ID              290446 non-null object
INCIDENT_ID             290446 non-null object
OFFENSE_TYPE_ID         290446 non-null object
A                       290446 non-null object
LOCATION_ID             290446 non-null object
NUM_PREMISES_ENTERED    290446 non-null object
M                       290446 non-null object
FF_LINE_NUMBER          290446 non-null object
dtypes: object(9)
memory usage: 19.9+ MB
None

In [417]: NIBRS_OFFENSE.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[417]: 
      2017    262132
2017           28302
 DATA_YEAR         5
   2017            2
  2017             1
     2017          1
 2017              1
    2017           1
2017               1
Name: DATA_YEAR, dtype: int64

In [418]: NIBRS_PROPERTY_DESC=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROPERTY_DESC.csv',comment='-').rename(columns=lambda x: x.strip())

In [419]: import csv
     ...: import pandas as pd
     ...: #import re
     ...: 
     ...: #VALID_EMAIL = re.compile(r'[^@]+@[^@]+\.[^@]+')
     ...: 
     ...: def read_my_csv(file_handle):
     ...:     # build csv reader
     ...:     reader = csv.reader(file_handle)
     ...: 
     ...:     # get the header, and find the e-mail and title columns
     ...:     header = next(reader)
     ...:     #email_column = header.index('Email')
     ...:     desc_column = header.index('SORT_ORDER')
     ...: 
     ...:     # yield the header up to the e-mail column
     ...:     yield header[:desc_column+1]
     ...: 
     ...:     # for each row, go through rebuild columns
     ...:     for row in reader:
     ...: 
     ...:         # for each row, put the Company column back together
     ...:         while row[desc_column].startswith(''):
     ...:             row[desc_column-1] += ',' + row[desc_column]
     ...:             del row[desc_column]
     ...: 
     ...:         # for each row, put the Title column back together
     ...:        # while not VALID_EMAIL.match(row[email_column]):
     ...:            # row[email_column-1] += ',' + row[email_column]
     ...:            # del row[email_column]
     ...:         yield row[:desc_column+1]
     ...:         

In [420]: 

In [420]: with open ('/Users/arunsingh/Downloads/TX/REF_RACE.csv') as f:
     ...:     generator = read_my_csv(f)
     ...:     columns = next(generator)
     ...:     df = pd.DataFrame(generator, columns=columns)
     ...: 
     ...: print(df)
     ...: 

---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-420-3b4874af457d> in <module>()
      1 with open ('/Users/arunsingh/Downloads/TX/REF_RACE.csv') as f:
      2     generator = read_my_csv(f)
----> 3     columns = next(generator)
      4     df = pd.DataFrame(generator, columns=columns)
      5 

<ipython-input-419-78cd3d742536> in read_my_csv(file_handle)
     12     header = next(reader)
     13     #email_column = header.index('Email')
---> 14     desc_column = header.index('SORT_ORDER')
     15 
     16     # yield the header up to the e-mail column

ValueError: 'SORT_ORDER' is not in list

In [421]: 

In [421]: NIBRS_PROPERTY_DESC=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROPERTY_DESC.csv',comment='-').rename(columns=lambda x: x.strip())

In [422]: print(NIBRS_PROPERTY_DESC.columns)
Index([u'DATA_YEAR', u'PROPERTY_ID', u'PROP_DESC_ID', u'PROPERTY_VALUE',
       u'DATE_RECO', u'NIBRS_PROP_DESC_ID'],
      dtype='object')

In [423]: print(NIBRS_PROPERTY_DESC.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 327033 entries, 0 to 327032
Data columns (total 6 columns):
DATA_YEAR             327033 non-null object
PROPERTY_ID           327033 non-null object
PROP_DESC_ID          327033 non-null object
PROPERTY_VALUE        327033 non-null object
DATE_RECO             327033 non-null object
NIBRS_PROP_DESC_ID    295106 non-null object
dtypes: object(6)
memory usage: 15.0+ MB
None

In [424]: NIBRS_PROPERTY_DESC.NIBRS_PROP_DESC_ID.value_counts(dropna=False).head(1000)
Out[424]: 
NaN                   31927
NIBRS_PROP_DESC_ID        6
           2253645        1
           5463750        1
           5054215        1
           1155294        1
           6161940        1
           5257508        1
           1346402        1
            303189        1
           1656015        1
           5054217        1
           1656014        1
           1286248        1
           3574647        1
           2428541        1
           4671482        1
           4671483        1
           5054216        1
            676391        1
           3143219        1
           3528697        1
           3249275        1
           3249274        1
           3595622        1
           5254050        1
           3249278        1
           3101182        1
           3528696        1
           2358755        1
                      ...  
            483530        1
           1341959        1
            848681        1
            848685        1
           3353601        1
           4184497        1
           1985299        1
           3014220        1
           4732590        1
            569381        1
            569380        1
           4184496        1
           4184495        1
           3062046        1
           2415376        1
           2415377        1
            248266        1
            176513        1
           2060437        1
            176511        1
           2415378        1
           3062044        1
           3608282        1
           6271658        1
           6271657        1
           6271656        1
           6271655        1
           6271654        1
            482972        1
           6271659        1
Name: NIBRS_PROP_DESC_ID, Length: 1000, dtype: int64

In [425]: NIBRS_PROPERTY=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROPERTY.csv',comment='-').rename(columns=lambda x: x.strip())

In [426]: print(NIBRS_PROPERTY.columns)
Index([u'DATA_YEAR', u'PROPERTY_ID', u'INCIDENT_ID', u'PROP_LOSS_ID',
       u'STOLEN_COUNT', u'RECOVERED_COUNT', u'FF_LINE_NUMBER'],
      dtype='object')

In [427]: print(NIBRS_PROPERTY.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 240144 entries, 0 to 240143
Data columns (total 7 columns):
DATA_YEAR          240144 non-null object
PROPERTY_ID        240144 non-null object
INCIDENT_ID        240144 non-null object
PROP_LOSS_ID       240144 non-null object
STOLEN_COUNT       240144 non-null object
RECOVERED_COUNT    240144 non-null object
FF_LINE_NUMBER     240144 non-null object
dtypes: object(7)
memory usage: 12.8+ MB
None

In [428]: NIBRS_PROPERTY_DESC.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[428]: 
      2017    327019
 DATA_YEAR         6
  2017             2
     2017          2
 2017              1
    2017           1
   2017            1
2017               1
Name: DATA_YEAR, dtype: int64

In [429]: NIBRS_PROPERTY.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[429]: 
      2017    240129
 DATA_YEAR         4
  2017             2
     2017          2
    2017           2
   2017            2
2017               2
 2017              1
Name: DATA_YEAR, dtype: int64

In [430]: NIBRS_SUSPECT_USING=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_SUSPECT_USING.csv',comment='-').rename(columns=lambda x: x.strip())

In [431]: print(NIBRS_SUSPECT_USING.columns)
Index([u'DATA_YEAR', u'SUSPECT_USING_ID', u'OFFENSE_ID'], dtype='object')

In [432]: print(NIBRS_SUSPECT_USING.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 292274 entries, 0 to 292273
Data columns (total 3 columns):
DATA_YEAR           292274 non-null object
SUSPECT_USING_ID    292274 non-null object
OFFENSE_ID          292274 non-null object
dtypes: object(3)
memory usage: 6.7+ MB
None

In [433]: NIBRS_SUSPECT_USING.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[433]: 
      2017    262132
2017           30130
 DATA_YEAR         5
2017               3
  2017             2
    2017           2
Name: DATA_YEAR, dtype: int64

In [434]: NIBRS_SUSPECTED_DRUG=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_SUSPECTED_DRUG.csv',comment='-').rename(columns=lambda x: x.strip())

In [435]: print(NIBRS_SUSPECTED_DRUG.columns)
Index([u'DATA_YEAR', u'SUSPECTED_DRUG_TYPE_ID', u'PROPERTY_ID',
       u'EST_DRUG_QTY', u'DRUG_MEASURE_TYPE_ID', u'NIBRS_SUSPECTED_DRUG_ID'],
      dtype='object')

In [436]: print(NIBRS_SUSPECTED_DRUG.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 35945 entries, 0 to 35944
Data columns (total 6 columns):
DATA_YEAR                  35945 non-null int64
SUSPECTED_DRUG_TYPE_ID     35945 non-null int64
PROPERTY_ID                35945 non-null int64
EST_DRUG_QTY               35945 non-null float64
DRUG_MEASURE_TYPE_ID       35945 non-null object
NIBRS_SUSPECTED_DRUG_ID    35945 non-null int64
dtypes: float64(1), int64(4), object(1)
memory usage: 1.6+ MB
None

In [437]: NIBRS_VICTIM_CIRCUMSTANCES=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_VICTIM_CIRCUMSTANCES.csv',comment='-').rename(columns=lambda x: x.strip())

In [438]: print(NIBRS_VICTIM_CIRCUMSTANCES.columns)
Index([u'DATA_YEAR', u'VICTIM_ID', u'CIRCUMSTANCES_ID',
       u'JUSTIFIABLE_FORCE_ID'],
      dtype='object')

In [439]: print(NIBRS_VICTIM_CIRCUMSTANCES.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 12003 entries, 0 to 12002
Data columns (total 4 columns):
DATA_YEAR               12003 non-null int64
VICTIM_ID               12003 non-null int64
CIRCUMSTANCES_ID        12003 non-null int64
JUSTIFIABLE_FORCE_ID    12003 non-null object
dtypes: int64(3), object(1)
memory usage: 375.2+ KB
None

In [440]: NIBRS_SUSPECTED_DRUG.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[440]: 
2017    35945
Name: DATA_YEAR, dtype: int64

In [441]: NIBRS_VICTIM_CIRCUMSTANCES.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[441]: 
2017    12003
Name: DATA_YEAR, dtype: int64

In [442]: NIBRS_VICTIM_INJURY=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_VICTIM_INJURY.csv',comment='-').rename(columns=lambda x: x.strip())

In [443]: print(NIBRS_VICTIM_INJURY.columns)
Index([u'DATA_YEAR', u'VICTIM_ID', u'INJURY_ID'], dtype='object')

In [444]: print(NIBRS_VICTIM_INJURY.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 66816 entries, 0 to 66815
Data columns (total 3 columns):
DATA_YEAR    66816 non-null object
VICTIM_ID    66816 non-null object
INJURY_ID    66816 non-null object
dtypes: object(3)
memory usage: 1.5+ MB
None

In [445]: NIBRS_VICTIM_INJURY.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[445]: 
      2017    66813
    2017          1
2017              1
 DATA_YEAR        1
Name: DATA_YEAR, dtype: int64

In [446]: NIBRS_VICTIM_OFFENDER_REL=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_VICTIM_OFFENDER_REL.csv',comment='-').rename(columns=lambda x: x.strip())

In [447]: print(NIBRS_VICTIM_OFFENDER_REL.columns)
Index([u'DATA_YEAR', u'VICTIM_ID', u'OFFENDER_ID', u'RELATIONSHIP_ID',
       u'NIBRS_VICTIM_OFFENDER_ID'],
      dtype='object')

In [448]: print(NIBRS_VICTIM_OFFENDER_REL.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 87278 entries, 0 to 87277
Data columns (total 5 columns):
DATA_YEAR                   87278 non-null object
VICTIM_ID                   87278 non-null object
OFFENDER_ID                 87278 non-null object
RELATIONSHIP_ID             87278 non-null object
NIBRS_VICTIM_OFFENDER_ID    87278 non-null object
dtypes: object(5)
memory usage: 3.3+ MB
None

In [449]: NIBRS_VICTIM_OFFENSE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_VICTIM_OFFENSE.csv',comment='-').rename(columns=lambda x: x.strip())

In [450]: print(NIBRS_VICTIM_OFFENSE.columns)
Index([u'DATA_YEAR', u'VICTIM_ID', u'OFFENSE_ID'], dtype='object')

In [451]: print(NIBRS_VICTIM_OFFENSE.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 313744 entries, 0 to 313743
Data columns (total 3 columns):
DATA_YEAR     313744 non-null object
VICTIM_ID     313744 non-null object
OFFENSE_ID    313744 non-null object
dtypes: object(3)
memory usage: 7.2+ MB
None

In [452]: NIBRS_VICTIM=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_VICTIM.csv',comment='-').rename(columns=lambda x: x.strip())

In [453]: print(NIBRS_VICTIM.columns)
Index([u'DATA_YEAR', u'VICTIM_ID', u'INCIDENT_ID', u'VICTIM_SEQ_NUM',
       u'VICTIM_TYPE_ID', u'ASSIGNMENT_TYPE_ID', u'ACTIVITY_TYPE_ID',
       u'OUTSIDE_AGENCY_ID', u'AGE_ID', u'AGE_NUM', u'S', u'RACE_ID',
       u'ETHNICITY_ID', u'R', u'FF_LINE_NUMBER', u'AGE_RANGE_LOW_NUM',
       u'AGE_RANGE_HIGH_NUM'],
      dtype='object')

In [454]: print(NIBRS_VICTIM.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 297052 entries, 0 to 297051
Data columns (total 17 columns):
DATA_YEAR             297052 non-null object
VICTIM_ID             297052 non-null object
INCIDENT_ID           297052 non-null object
VICTIM_SEQ_NUM        297052 non-null object
VICTIM_TYPE_ID        297052 non-null object
ASSIGNMENT_TYPE_ID    297052 non-null object
ACTIVITY_TYPE_ID      297052 non-null object
OUTSIDE_AGENCY_ID     297052 non-null object
AGE_ID                297052 non-null object
AGE_NUM               297052 non-null object
S                     297052 non-null object
RACE_ID               297052 non-null object
ETHNICITY_ID          297052 non-null object
R                     297052 non-null object
FF_LINE_NUMBER        297052 non-null object
AGE_RANGE_LOW_NUM     297052 non-null object
AGE_RANGE_HIGH_NUM    297052 non-null object
dtypes: object(17)
memory usage: 38.5+ MB
None

In [455]: NIBRS_WEAPON=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_WEAPON.csv',comment='-').rename(columns=lambda x: x.strip())

In [456]: print(NIBRS_WEAPON.columns)
Index([u'DATA_YEAR', u'WEAPON_ID', u'OFFENSE_ID', u'NIBRS_WEAPON_ID'], dtype='object')

In [457]: print(NIBRS_WEAPON.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 63632 entries, 0 to 63631
Data columns (total 4 columns):
DATA_YEAR          63632 non-null object
WEAPON_ID          63632 non-null object
OFFENSE_ID         63632 non-null object
NIBRS_WEAPON_ID    63632 non-null object
dtypes: object(4)
memory usage: 1.9+ MB
None

In [458]: REF_STATE=pd.read_csv('/Users/arunsingh/Downloads/TX/REF_STATE.csv',comment='-').rename(columns=lambda x: x.strip())

In [459]: print(REF_STATE.columns)
Index([u'STATE_ID', u'DIVISION_ID', u'STATE_NAME', u'ST', u'ST.1', u'ST.2',
       u'ST.3', u'STATE_PUB_FREQ_MONTHS', u'CHANGE_USER'],
      dtype='object')

In [460]: print(REF_STATE.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 59 entries, 0 to 58
Data columns (total 9 columns):
STATE_ID                 59 non-null int64
DIVISION_ID              59 non-null int64
STATE_NAME               59 non-null object
ST                       59 non-null int64
ST.1                     59 non-null object
ST.2                     59 non-null object
ST.3                     59 non-null object
STATE_PUB_FREQ_MONTHS    59 non-null int64
CHANGE_USER              59 non-null object
dtypes: int64(4), object(5)
memory usage: 4.2+ KB
None

In [461]: REF_RACE = pd.read_csv('/Users/arunsingh/Downloads/TX/REF_RACE.csv', sep=r',(?!\s,)',comment='-',engine='python').rename(columns=lambda x: x.strip())
---------------------------------------------------------------------------
ParserError                               Traceback (most recent call last)
<ipython-input-461-91fd86eefa28> in <module>()
----> 1 REF_RACE = pd.read_csv('/Users/arunsingh/Downloads/TX/REF_RACE.csv', sep=r',(?!\s,)',comment='-',engine='python').rename(columns=lambda x: x.strip())

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)
    676                     skip_blank_lines=skip_blank_lines)
    677 
--> 678         return _read(filepath_or_buffer, kwds)
    679 
    680     parser_f.__name__ = name

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _read(filepath_or_buffer, kwds)
    444 
    445     try:
--> 446         data = parser.read(nrows)
    447     finally:
    448         parser.close()

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1034                 raise ValueError('skipfooter not supported for iteration')
   1035 
-> 1036         ret = self._engine.read(nrows)
   1037 
   1038         # May alter columns / col_dict

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, rows)
   2264             content = content[1:]
   2265 
-> 2266         alldata = self._rows_to_cols(content)
   2267         data = self._exclude_implicit_index(alldata)
   2268 

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _rows_to_cols(self, content)
   2907                     msg += '. ' + reason
   2908 
-> 2909                 self._alert_malformed(msg, row_num + 1)
   2910 
   2911         # see gh-13320

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _alert_malformed(self, msg, row_num)
   2674 
   2675         if self.error_bad_lines:
-> 2676             raise ParserError(msg)
   2677         elif self.warn_bad_lines:
   2678             base = 'Skipping line {row_num}: '.format(row_num=row_num)

ParserError: Expected 7 fields in line 9, saw 9. Error could possibly be due to quotes being ignored when a multi-char delimiter is used.

In [462]: REF_RACE = pd.read_csv('/Users/arunsingh/Downloads/TX/REF_RACE.csv', sep=r',(?!\s,)',engine='python')
---------------------------------------------------------------------------
ParserError                               Traceback (most recent call last)
<ipython-input-462-6528e76eb913> in <module>()
----> 1 REF_RACE = pd.read_csv('/Users/arunsingh/Downloads/TX/REF_RACE.csv', sep=r',(?!\s,)',engine='python')

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)
    676                     skip_blank_lines=skip_blank_lines)
    677 
--> 678         return _read(filepath_or_buffer, kwds)
    679 
    680     parser_f.__name__ = name

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _read(filepath_or_buffer, kwds)
    444 
    445     try:
--> 446         data = parser.read(nrows)
    447     finally:
    448         parser.close()

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1034                 raise ValueError('skipfooter not supported for iteration')
   1035 
-> 1036         ret = self._engine.read(nrows)
   1037 
   1038         # May alter columns / col_dict

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, rows)
   2264             content = content[1:]
   2265 
-> 2266         alldata = self._rows_to_cols(content)
   2267         data = self._exclude_implicit_index(alldata)
   2268 

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _rows_to_cols(self, content)
   2907                     msg += '. ' + reason
   2908 
-> 2909                 self._alert_malformed(msg, row_num + 1)
   2910 
   2911         # see gh-13320

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _alert_malformed(self, msg, row_num)
   2674 
   2675         if self.error_bad_lines:
-> 2676             raise ParserError(msg)
   2677         elif self.warn_bad_lines:
   2678             base = 'Skipping line {row_num}: '.format(row_num=row_num)

ParserError: Expected 7 fields in line 9, saw 9. Error could possibly be due to quotes being ignored when a multi-char delimiter is used.

In [463]: df = pd.read_csv('/Users/arunsingh/Downloads/TX/REF_RACE.csv', sep=r',(?!\s)',engine='python')

In [464]: REF_RACE = pd.read_csv('/Users/arunsingh/Downloads/TX/REF_RACE.csv', sep=r',(?!\s,)',engine='python')
---------------------------------------------------------------------------
ParserError                               Traceback (most recent call last)
<ipython-input-464-6528e76eb913> in <module>()
----> 1 REF_RACE = pd.read_csv('/Users/arunsingh/Downloads/TX/REF_RACE.csv', sep=r',(?!\s,)',engine='python')

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)
    676                     skip_blank_lines=skip_blank_lines)
    677 
--> 678         return _read(filepath_or_buffer, kwds)
    679 
    680     parser_f.__name__ = name

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _read(filepath_or_buffer, kwds)
    444 
    445     try:
--> 446         data = parser.read(nrows)
    447     finally:
    448         parser.close()

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, nrows)
   1034                 raise ValueError('skipfooter not supported for iteration')
   1035 
-> 1036         ret = self._engine.read(nrows)
   1037 
   1038         # May alter columns / col_dict

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in read(self, rows)
   2264             content = content[1:]
   2265 
-> 2266         alldata = self._rows_to_cols(content)
   2267         data = self._exclude_implicit_index(alldata)
   2268 

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _rows_to_cols(self, content)
   2907                     msg += '. ' + reason
   2908 
-> 2909                 self._alert_malformed(msg, row_num + 1)
   2910 
   2911         # see gh-13320

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _alert_malformed(self, msg, row_num)
   2674 
   2675         if self.error_bad_lines:
-> 2676             raise ParserError(msg)
   2677         elif self.warn_bad_lines:
   2678             base = 'Skipping line {row_num}: '.format(row_num=row_num)

ParserError: Expected 7 fields in line 9, saw 9. Error could possibly be due to quotes being ignored when a multi-char delimiter is used.

In [465]: REF_RACE = pd.read_csv('/Users/arunsingh/Downloads/TX/REF_RACE.csv', sep=r',(?!\s)',engine='python')

In [466]: REF_RACE = pd.read_csv('/Users/arunsingh/Downloads/TX/REF_RACE.csv', sep=r',(?!\s)',engine='python',comment='-').rename(columns=lambda x: x.strip())

In [467]: REF_RACE.RACE_DESC = [x.replace(',','/') for x in REF_RACE.RACE_DESC]

In [468]: REF_RACE.head()
Out[468]: 
   RACE_ID  RA                                          RACE_DESC                  SORT_ORDER  START_YEAR,  END_YEAR  NOTES
0        0  U   Unknown                                       ...  Race is explicitly unknown                    NaN    NaN
1        1  W   White                                         ...                         NaN                    NaN    NaN
2        2  B   Black or African American                     ...                         NaN                    NaN    NaN
3        3  I   American Indian or Alaska Native              ...                         NaN                    NaN    NaN
4        4  A   Asian                                         ...       Includes Asian Indian                    NaN    NaN

In [469]: REF_RACE.head(100)
Out[469]: 
    RACE_ID  RA                                          RACE_DESC                                         SORT_ORDER  START_YEAR,  END_YEAR  NOTES
0         0  U   Unknown                                       ...                         Race is explicitly unknown                    NaN    NaN
1         1  W   White                                         ...                                                NaN                    NaN    NaN
2         2  B   Black or African American                     ...                                                NaN                    NaN    NaN
3         3  I   American Indian or Alaska Native              ...                                                NaN                    NaN    NaN
4         4  A   Asian                                         ...                              Includes Asian Indian                    NaN    NaN
5         5  AP  Asian/ Native Hawaiian/ or Other Pacific Islan...                              Includes Asian Indian                    NaN    NaN
6         6  C   Chinese                                       ...                                                NaN                    NaN    NaN
7         7  J   Japanese                                      ...                                                NaN                    NaN    NaN
8         8  P   Native Hawaiian or Other Pacific Islander     ...                                                NaN                    NaN    NaN
9         9  O   Other                                         ...  Includes Native Hawaiian or Other Pacific Isla...                    NaN    NaN
10       98  M   Multiple                                      ...                Used for groups with multiple races                    NaN    NaN
11       99  NS  Not Specified                                 ...                              Race is not specified                    NaN    NaN

In [470]: print(REF_RACE.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 12 entries, 0 to 11
Data columns (total 6 columns):
RACE_ID                  12 non-null int64
RA                       12 non-null object
RACE_DESC                12 non-null object
SORT_ORDER               6 non-null object
START_YEAR,  END_YEAR    0 non-null float64
NOTES                    0 non-null float64
dtypes: float64(2), int64(1), object(3)
memory usage: 648.0+ bytes
None

In [471]: print(REF_RACE.columns)
Index([u'RACE_ID', u'RA', u'RACE_DESC', u'SORT_ORDER',
       u'START_YEAR,  END_YEAR', u'NOTES'],
      dtype='object')

In [472]: REF_RACE = pd.read_csv('/Users/arunsingh/Downloads/TX/REF_RACE.csv', sep=r',(?!\s)',engine='python').rename(columns=lambda x: x.strip())

In [473]: print(REF_RACE.columns)
Index([u'RACE_ID', u'RA', u'RACE_DESC', u'SORT_ORDER',
       u'START_YEAR,  END_YEAR', u'NOTES'],
      dtype='object')

In [474]: print(REF_RACE[3])
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
<ipython-input-474-118147206d18> in <module>()
----> 1 print(REF_RACE[3])

/usr/local/lib/python2.7/site-packages/pandas/core/frame.pyc in __getitem__(self, key)
   2686             return self._getitem_multilevel(key)
   2687         else:
-> 2688             return self._getitem_column(key)
   2689 
   2690     def _getitem_column(self, key):

/usr/local/lib/python2.7/site-packages/pandas/core/frame.pyc in _getitem_column(self, key)
   2693         # get column
   2694         if self.columns.is_unique:
-> 2695             return self._get_item_cache(key)
   2696 
   2697         # duplicate columns & possible reduce dimensionality

/usr/local/lib/python2.7/site-packages/pandas/core/generic.pyc in _get_item_cache(self, item)
   2487         res = cache.get(item)
   2488         if res is None:
-> 2489             values = self._data.get(item)
   2490             res = self._box_item_values(item, values)
   2491             cache[item] = res

/usr/local/lib/python2.7/site-packages/pandas/core/internals.pyc in get(self, item, fastpath)
   4113 
   4114             if not isna(item):
-> 4115                 loc = self.items.get_loc(item)
   4116             else:
   4117                 indexer = np.arange(len(self.items))[isna(self.items)]

/usr/local/lib/python2.7/site-packages/pandas/core/indexes/base.pyc in get_loc(self, key, method, tolerance)
   3078                 return self._engine.get_loc(key)
   3079             except KeyError:
-> 3080                 return self._engine.get_loc(self._maybe_cast_indexer(key))
   3081 
   3082         indexer = self.get_indexer([key], method=method, tolerance=tolerance)

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

KeyError: 3

In [475]: print(REF_RACE[:3])
           RACE_ID                                                 RA                        ...                         START_YEAR,  END_YEAR                                              NOTES
----------      --  ----------------------------------------------...                        ...                                    ----------  ----------------------------------------------...
0               U   Unknown                                       ...                        ...                                          None                                               None
1               W   White                                         ...                        ...                                          None                                               None

[3 rows x 6 columns]

In [476]: print(REF_RACE[1:3])
  RACE_ID                                                 RA                   RACE_DESC SORT_ORDER START_YEAR,  END_YEAR NOTES
0      U   Unknown                                       ...  Race is explicitly unknown       None                  None  None
1      W   White                                         ...                         NaN       None                  None  None

In [477]: print(REF_RACE[1:])
   RACE_ID                                                 RA                                          RACE_DESC SORT_ORDER START_YEAR,  END_YEAR NOTES
0       U   Unknown                                       ...                         Race is explicitly unknown       None                  None  None
1       W   White                                         ...                                                NaN       None                  None  None
2       B   Black or African American                     ...                                                NaN       None                  None  None
3       I   American Indian or Alaska Native              ...                                                NaN       None                  None  None
4       A   Asian                                         ...                              Includes Asian Indian       None                  None  None
5       AP  Asian, Native Hawaiian, or Other Pacific Islan...                              Includes Asian Indian       None                  None  None
6       C   Chinese                                       ...                                                NaN       None                  None  None
7       J   Japanese                                      ...                                                NaN       None                  None  None
8       P   Native Hawaiian or Other Pacific Islander     ...                                                NaN       None                  None  None
9       O   Other                                         ...  Includes Native Hawaiian or Other Pacific Isla...       None                  None  None
98      M   Multiple                                      ...                Used for groups with multiple races       None                  None  None
99      NS  Not Specified                                 ...                              Race is not specified       None                  None  None

In [478]: print(REF_RACE.START_YEAR)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-478-74d8b08a9e27> in <module>()
----> 1 print(REF_RACE.START_YEAR)

/usr/local/lib/python2.7/site-packages/pandas/core/generic.pyc in __getattr__(self, name)
   4374             if self._info_axis._can_hold_identifiers_and_holds_name(name):
   4375                 return self[name]
-> 4376             return object.__getattribute__(self, name)
   4377 
   4378     def __setattr__(self, name, value):

AttributeError: 'DataFrame' object has no attribute 'START_YEAR'

In [479]: print(REF_RACE.RA)
----------    ----------------------------------------------...
0             Unknown                                       ...
1             White                                         ...
2             Black or African American                     ...
3             American Indian or Alaska Native              ...
4             Asian                                         ...
5             Asian, Native Hawaiian, or Other Pacific Islan...
6             Chinese                                       ...
7             Japanese                                      ...
8             Native Hawaiian or Other Pacific Islander     ...
9             Other                                         ...
98            Multiple                                      ...
99            Not Specified                                 ...
Name: RA, dtype: object

In [480]: print(REF_RACE.RACE_DESC)
----------                                           ----------
0                                    Race is explicitly unknown
1                                                           NaN
2                                                           NaN
3                                                           NaN
4                                         Includes Asian Indian
5                                         Includes Asian Indian
6                                                           NaN
7                                                           NaN
8                                                           NaN
9             Includes Native Hawaiian or Other Pacific Isla...
98                          Used for groups with multiple races
99                                        Race is not specified
Name: RACE_DESC, dtype: object

In [481]: df = pd.read_csv('/Users/arunsingh/Downloads/TX/REF_RACE.csv', names=[RACE_ID,RA,RACE_DESC,SORT_ORDER,START_YEAR,END_YEAR,NOTES])
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-481-ded7cb96c2ce> in <module>()
----> 1 df = pd.read_csv('/Users/arunsingh/Downloads/TX/REF_RACE.csv', names=[RACE_ID,RA,RACE_DESC,SORT_ORDER,START_YEAR,END_YEAR,NOTES])

NameError: name 'RACE_ID' is not defined

In [482]: df = pd.read_csv('/Users/arunsingh/Downloads/TX/REF_RACE.csv',column names=[RACE_ID,RA,RACE_DESC,SORT_ORDER,START_YEAR,END_YEAR,NOTES])
  File "<ipython-input-482-2e23ef1d587a>", line 1
    df = pd.read_csv('/Users/arunsingh/Downloads/TX/REF_RACE.csv',column names=[RACE_ID,RA,RACE_DESC,SORT_ORDER,START_YEAR,END_YEAR,NOTES])
                                                                             ^
SyntaxError: invalid syntax


In [483]: df = pd.read_csv('/Users/arunsingh/Downloads/TX/REF_RACE.csv',columnnames=[RACE_ID,RA,RACE_DESC,SORT_ORDER,START_YEAR,END_YEAR,NOTES])
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-483-07c034328d92> in <module>()
----> 1 df = pd.read_csv('/Users/arunsingh/Downloads/TX/REF_RACE.csv',columnnames=[RACE_ID,RA,RACE_DESC,SORT_ORDER,START_YEAR,END_YEAR,NOTES])

NameError: name 'RACE_ID' is not defined

In [484]: df = pd.read_csv('/Users/arunsingh/Downloads/TX/REF_RACE.csv',columnnames=[ RACE_ID,RA,RACE_DESC,SORT_ORDER,START_YEAR,END_YEAR,NOTES])
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-484-4f4ce94b2224> in <module>()
----> 1 df = pd.read_csv('/Users/arunsingh/Downloads/TX/REF_RACE.csv',columnnames=[ RACE_ID,RA,RACE_DESC,SORT_ORDER,START_YEAR,END_YEAR,NOTES])

NameError: name 'RACE_ID' is not defined

In [485]: NIBRS_PROP_DESC_TYPE = pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv', sep=r',(?!\s)',engine='python').rename(columns=lambda x: x.strip())

In [486]: print(NIBRS_PROP_DESC_TYPE.columns)
Index([u'PROP_DESC_ID', u'PR', u'PROP_DESC_NAME'], dtype='object')

In [487]: print(NIBRS_PROP_DESC_TYPE.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 69 entries, 0 to 68
Data columns (total 3 columns):
PROP_DESC_ID      69 non-null object
PR                69 non-null object
PROP_DESC_NAME    69 non-null object
dtypes: object(3)
memory usage: 1.7+ KB
None

In [488]: print(NIBRS_PROP_DESC_TYPE.head(100))
    PROP_DESC_ID  PR                                     PROP_DESC_NAME
0   ------------  --  ----------------------------------------------...
1              1  01                                           Aircraft
2              2  02                                            Alcohol
3              3  03                                         Automobile
4              4  04                                           Bicycles
5              5  05                                              Buses
6              6  06                                      Clothes/ Furs
7              7  07                            Computer Hard/ Software
8              8  08                                   Consumable Goods
9              9  09                                Credit/ Debit cards
10            10  10                                   Drugs/ Narcotics
11            11  11                                     Drug Equipment
12            12  12                                     Farm Equipment
13            13  13                                           Firearms
14            14  14                                 Gambling Equipment
15            15  15                               Industrial Equipment
16            16  16                                    Household Goods
17            17  17                           Jewelry/ Precious Metals
18            18  18                                          Livestock
19            19  19                                        Merchandise
20            20  20                                              Money
21            21  21                             Negotiable Instruments
22            22  22                         Non Negotiable Instruments
23            23  23                                   Office Equipment
24            24  24                               Other Motor Vehicles
25            25  25                                      Purse/ Wallet
26            26  26                                     Radio/ TV/ VCR
27            27  27                                         Recordings
28            28  28                              Recreational Vehicles
29            29  29                         Structure/ Single dwelling
..           ...  ..                                                ...
39            39  39                                         Watercraft
40            40  41                        Aircraft Parts/ Accessories
41            41  42                     Artistic Supplies/ Accessories
42            42  43                                 Building Materials
43            43  44      Camping/ Hunting/ Fishing Equipment/ Supplies
44            44  45                                          Chemicals
45            45  46                          Collections/ Collectibles
46            46  47                                              Crops
47            47  48                    Documents/ Personal or Business
48            48  49                                         Explosives
49            49  59                                Firearm Accessories
50            50  64                                               Fuel
51            51  65                                 Identity Documents
52            52  66                                Identity-Intangible
53            53  67                          Law Enforcement Equipment
54            54  68                       Lawn/ Yard/ Garden Equipment
55            55  69                                  Logging Equipment
56            56  70                     Medical/ Medical Lab Equipment
57            57  71                               Metals, Non-Precious
58            58  72                                Musical Instruments
59            59  73                                               Pets
60            60  74                    Photographic/ Optical Equipment
61            61  75                 Portable Electronic Communications
62            62  76                     Recreational/ Sports Equipment
63            63  77                                              Other
64            64  78                                           Trailers
65            65  79           Watercraft Equipment/ Parts/ Accessories
66            66  80                                      Weapons-Other
67            67  88                                  Pending Inventory
68            68  99                                            Special

[69 rows x 3 columns]

In [489]: NIBRS_PROP_DESC_TYPE.PROP_DESC_NAME = [x.replace(',','/') for x in NIBRS_PROP_DESC_TYPE.PROP_DESC_NAME,inplace=True]
  File "<ipython-input-489-7e93247a7fff>", line 1
    NIBRS_PROP_DESC_TYPE.PROP_DESC_NAME = [x.replace(',','/') for x in NIBRS_PROP_DESC_TYPE.PROP_DESC_NAME,inplace=True]
                                                                                                                  ^
SyntaxError: invalid syntax


In [490]: NIBRS_PROP_DESC_TYPE.PROP_DESC_NAME = [x.replace(',','/') for x in NIBRS_PROP_DESC_TYPE.PROP_DESC_NAME]

In [491]: print(NIBRS_PROP_DESC_TYPE.head(100))
    PROP_DESC_ID  PR                                     PROP_DESC_NAME
0   ------------  --  ----------------------------------------------...
1              1  01                                           Aircraft
2              2  02                                            Alcohol
3              3  03                                         Automobile
4              4  04                                           Bicycles
5              5  05                                              Buses
6              6  06                                      Clothes/ Furs
7              7  07                            Computer Hard/ Software
8              8  08                                   Consumable Goods
9              9  09                                Credit/ Debit cards
10            10  10                                   Drugs/ Narcotics
11            11  11                                     Drug Equipment
12            12  12                                     Farm Equipment
13            13  13                                           Firearms
14            14  14                                 Gambling Equipment
15            15  15                               Industrial Equipment
16            16  16                                    Household Goods
17            17  17                           Jewelry/ Precious Metals
18            18  18                                          Livestock
19            19  19                                        Merchandise
20            20  20                                              Money
21            21  21                             Negotiable Instruments
22            22  22                         Non Negotiable Instruments
23            23  23                                   Office Equipment
24            24  24                               Other Motor Vehicles
25            25  25                                      Purse/ Wallet
26            26  26                                     Radio/ TV/ VCR
27            27  27                                         Recordings
28            28  28                              Recreational Vehicles
29            29  29                         Structure/ Single dwelling
..           ...  ..                                                ...
39            39  39                                         Watercraft
40            40  41                        Aircraft Parts/ Accessories
41            41  42                     Artistic Supplies/ Accessories
42            42  43                                 Building Materials
43            43  44      Camping/ Hunting/ Fishing Equipment/ Supplies
44            44  45                                          Chemicals
45            45  46                          Collections/ Collectibles
46            46  47                                              Crops
47            47  48                    Documents/ Personal or Business
48            48  49                                         Explosives
49            49  59                                Firearm Accessories
50            50  64                                               Fuel
51            51  65                                 Identity Documents
52            52  66                                Identity-Intangible
53            53  67                          Law Enforcement Equipment
54            54  68                       Lawn/ Yard/ Garden Equipment
55            55  69                                  Logging Equipment
56            56  70                     Medical/ Medical Lab Equipment
57            57  71                               Metals/ Non-Precious
58            58  72                                Musical Instruments
59            59  73                                               Pets
60            60  74                    Photographic/ Optical Equipment
61            61  75                 Portable Electronic Communications
62            62  76                     Recreational/ Sports Equipment
63            63  77                                              Other
64            64  78                                           Trailers
65            65  79           Watercraft Equipment/ Parts/ Accessories
66            66  80                                      Weapons-Other
67            67  88                                  Pending Inventory
68            68  99                                            Special

[69 rows x 3 columns]

In [492]: NIBRS_PROP_DESC_TYPE.toCSV('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE_NEW.csv',sep=',')
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-492-a8b1369e8e93> in <module>()
----> 1 NIBRS_PROP_DESC_TYPE.toCSV('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE_NEW.csv',sep=',')

/usr/local/lib/python2.7/site-packages/pandas/core/generic.pyc in __getattr__(self, name)
   4374             if self._info_axis._can_hold_identifiers_and_holds_name(name):
   4375                 return self[name]
-> 4376             return object.__getattribute__(self, name)
   4377 
   4378     def __setattr__(self, name, value):

AttributeError: 'DataFrame' object has no attribute 'toCSV'

In [493]: NIBRS_PROP_DESC_TYPE.to_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE_NEW.csv',sep=',')

In [494]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE_NEW.csv',comment='-').rename(columns=lambda x: x.strip())

In [495]: print(NIBRS_PROP_DESC_TYPE.columns)
Index([u'Unnamed: 0', u'PROP_DESC_ID', u'PR', u'PROP_DESC_NAME'], dtype='object')

In [496]: print(NIBRS_PROP_DESC_TYPE.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 69 entries, 0 to 68
Data columns (total 4 columns):
Unnamed: 0        69 non-null int64
PROP_DESC_ID      68 non-null float64
PR                68 non-null float64
PROP_DESC_NAME    68 non-null object
dtypes: float64(2), int64(1), object(1)
memory usage: 2.2+ KB
None

In [497]: print(NIBRS_PROP_DESC_TYPE.head(100))
    Unnamed: 0  PROP_DESC_ID    PR                                 PROP_DESC_NAME
0            0           NaN   NaN                                            NaN
1            1           1.0   1.0                                       Aircraft
2            2           2.0   2.0                                        Alcohol
3            3           3.0   3.0                                     Automobile
4            4           4.0   4.0                                       Bicycles
5            5           5.0   5.0                                          Buses
6            6           6.0   6.0                                  Clothes/ Furs
7            7           7.0   7.0                        Computer Hard/ Software
8            8           8.0   8.0                               Consumable Goods
9            9           9.0   9.0                            Credit/ Debit cards
10          10          10.0  10.0                               Drugs/ Narcotics
11          11          11.0  11.0                                 Drug Equipment
12          12          12.0  12.0                                 Farm Equipment
13          13          13.0  13.0                                       Firearms
14          14          14.0  14.0                             Gambling Equipment
15          15          15.0  15.0                           Industrial Equipment
16          16          16.0  16.0                                Household Goods
17          17          17.0  17.0                       Jewelry/ Precious Metals
18          18          18.0  18.0                                      Livestock
19          19          19.0  19.0                                    Merchandise
20          20          20.0  20.0                                          Money
21          21          21.0  21.0                         Negotiable Instruments
22          22          22.0  22.0                     Non Negotiable Instruments
23          23          23.0  23.0                               Office Equipment
24          24          24.0  24.0                           Other Motor Vehicles
25          25          25.0  25.0                                  Purse/ Wallet
26          26          26.0  26.0                                 Radio/ TV/ VCR
27          27          27.0  27.0                                     Recordings
28          28          28.0  28.0                          Recreational Vehicles
29          29          29.0  29.0                     Structure/ Single dwelling
..         ...           ...   ...                                            ...
39          39          39.0  39.0                                     Watercraft
40          40          40.0  41.0                    Aircraft Parts/ Accessories
41          41          41.0  42.0                 Artistic Supplies/ Accessories
42          42          42.0  43.0                             Building Materials
43          43          43.0  44.0  Camping/ Hunting/ Fishing Equipment/ Supplies
44          44          44.0  45.0                                      Chemicals
45          45          45.0  46.0                      Collections/ Collectibles
46          46          46.0  47.0                                          Crops
47          47          47.0  48.0                Documents/ Personal or Business
48          48          48.0  49.0                                     Explosives
49          49          49.0  59.0                            Firearm Accessories
50          50          50.0  64.0                                           Fuel
51          51          51.0  65.0                             Identity Documents
52          52          52.0  66.0                                       Identity
53          53          53.0  67.0                      Law Enforcement Equipment
54          54          54.0  68.0                   Lawn/ Yard/ Garden Equipment
55          55          55.0  69.0                              Logging Equipment
56          56          56.0  70.0                 Medical/ Medical Lab Equipment
57          57          57.0  71.0                                    Metals/ Non
58          58          58.0  72.0                            Musical Instruments
59          59          59.0  73.0                                           Pets
60          60          60.0  74.0                Photographic/ Optical Equipment
61          61          61.0  75.0             Portable Electronic Communications
62          62          62.0  76.0                 Recreational/ Sports Equipment
63          63          63.0  77.0                                          Other
64          64          64.0  78.0                                       Trailers
65          65          65.0  79.0       Watercraft Equipment/ Parts/ Accessories
66          66          66.0  80.0                                        Weapons
67          67          67.0  88.0                              Pending Inventory
68          68          68.0  99.0                                        Special

[69 rows x 4 columns]

In [498]: NIBRS_PROP_DESC_TYPE.reset_index()
Out[498]: 
    index  Unnamed: 0  PROP_DESC_ID    PR                                 PROP_DESC_NAME
0       0           0           NaN   NaN                                            NaN
1       1           1           1.0   1.0                                       Aircraft
2       2           2           2.0   2.0                                        Alcohol
3       3           3           3.0   3.0                                     Automobile
4       4           4           4.0   4.0                                       Bicycles
5       5           5           5.0   5.0                                          Buses
6       6           6           6.0   6.0                                  Clothes/ Furs
7       7           7           7.0   7.0                        Computer Hard/ Software
8       8           8           8.0   8.0                               Consumable Goods
9       9           9           9.0   9.0                            Credit/ Debit cards
10     10          10          10.0  10.0                               Drugs/ Narcotics
11     11          11          11.0  11.0                                 Drug Equipment
12     12          12          12.0  12.0                                 Farm Equipment
13     13          13          13.0  13.0                                       Firearms
14     14          14          14.0  14.0                             Gambling Equipment
15     15          15          15.0  15.0                           Industrial Equipment
16     16          16          16.0  16.0                                Household Goods
17     17          17          17.0  17.0                       Jewelry/ Precious Metals
18     18          18          18.0  18.0                                      Livestock
19     19          19          19.0  19.0                                    Merchandise
20     20          20          20.0  20.0                                          Money
21     21          21          21.0  21.0                         Negotiable Instruments
22     22          22          22.0  22.0                     Non Negotiable Instruments
23     23          23          23.0  23.0                               Office Equipment
24     24          24          24.0  24.0                           Other Motor Vehicles
25     25          25          25.0  25.0                                  Purse/ Wallet
26     26          26          26.0  26.0                                 Radio/ TV/ VCR
27     27          27          27.0  27.0                                     Recordings
28     28          28          28.0  28.0                          Recreational Vehicles
29     29          29          29.0  29.0                     Structure/ Single dwelling
..    ...         ...           ...   ...                                            ...
39     39          39          39.0  39.0                                     Watercraft
40     40          40          40.0  41.0                    Aircraft Parts/ Accessories
41     41          41          41.0  42.0                 Artistic Supplies/ Accessories
42     42          42          42.0  43.0                             Building Materials
43     43          43          43.0  44.0  Camping/ Hunting/ Fishing Equipment/ Supplies
44     44          44          44.0  45.0                                      Chemicals
45     45          45          45.0  46.0                      Collections/ Collectibles
46     46          46          46.0  47.0                                          Crops
47     47          47          47.0  48.0                Documents/ Personal or Business
48     48          48          48.0  49.0                                     Explosives
49     49          49          49.0  59.0                            Firearm Accessories
50     50          50          50.0  64.0                                           Fuel
51     51          51          51.0  65.0                             Identity Documents
52     52          52          52.0  66.0                                       Identity
53     53          53          53.0  67.0                      Law Enforcement Equipment
54     54          54          54.0  68.0                   Lawn/ Yard/ Garden Equipment
55     55          55          55.0  69.0                              Logging Equipment
56     56          56          56.0  70.0                 Medical/ Medical Lab Equipment
57     57          57          57.0  71.0                                    Metals/ Non
58     58          58          58.0  72.0                            Musical Instruments
59     59          59          59.0  73.0                                           Pets
60     60          60          60.0  74.0                Photographic/ Optical Equipment
61     61          61          61.0  75.0             Portable Electronic Communications
62     62          62          62.0  76.0                 Recreational/ Sports Equipment
63     63          63          63.0  77.0                                          Other
64     64          64          64.0  78.0                                       Trailers
65     65          65          65.0  79.0       Watercraft Equipment/ Parts/ Accessories
66     66          66          66.0  80.0                                        Weapons
67     67          67          67.0  88.0                              Pending Inventory
68     68          68          68.0  99.0                                        Special

[69 rows x 5 columns]

In [499]: NIBRS_PROP_DESC_TYPE = pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv', sep=r',(?!\s)',engine='python').rename(columns=lambda x: x.strip())

In [500]: NIBRS_PROP_DESC_TYPE.reset_index()
Out[500]: 
    index  PROP_DESC_ID  PR                                     PROP_DESC_NAME
0       0  ------------  --  ----------------------------------------------...
1       1             1  01                                           Aircraft
2       2             2  02                                            Alcohol
3       3             3  03                                         Automobile
4       4             4  04                                           Bicycles
5       5             5  05                                              Buses
6       6             6  06                                      Clothes/ Furs
7       7             7  07                            Computer Hard/ Software
8       8             8  08                                   Consumable Goods
9       9             9  09                                Credit/ Debit cards
10     10            10  10                                   Drugs/ Narcotics
11     11            11  11                                     Drug Equipment
12     12            12  12                                     Farm Equipment
13     13            13  13                                           Firearms
14     14            14  14                                 Gambling Equipment
15     15            15  15                               Industrial Equipment
16     16            16  16                                    Household Goods
17     17            17  17                           Jewelry/ Precious Metals
18     18            18  18                                          Livestock
19     19            19  19                                        Merchandise
20     20            20  20                                              Money
21     21            21  21                             Negotiable Instruments
22     22            22  22                         Non Negotiable Instruments
23     23            23  23                                   Office Equipment
24     24            24  24                               Other Motor Vehicles
25     25            25  25                                      Purse/ Wallet
26     26            26  26                                     Radio/ TV/ VCR
27     27            27  27                                         Recordings
28     28            28  28                              Recreational Vehicles
29     29            29  29                         Structure/ Single dwelling
..    ...           ...  ..                                                ...
39     39            39  39                                         Watercraft
40     40            40  41                        Aircraft Parts/ Accessories
41     41            41  42                     Artistic Supplies/ Accessories
42     42            42  43                                 Building Materials
43     43            43  44      Camping/ Hunting/ Fishing Equipment/ Supplies
44     44            44  45                                          Chemicals
45     45            45  46                          Collections/ Collectibles
46     46            46  47                                              Crops
47     47            47  48                    Documents/ Personal or Business
48     48            48  49                                         Explosives
49     49            49  59                                Firearm Accessories
50     50            50  64                                               Fuel
51     51            51  65                                 Identity Documents
52     52            52  66                                Identity-Intangible
53     53            53  67                          Law Enforcement Equipment
54     54            54  68                       Lawn/ Yard/ Garden Equipment
55     55            55  69                                  Logging Equipment
56     56            56  70                     Medical/ Medical Lab Equipment
57     57            57  71                               Metals, Non-Precious
58     58            58  72                                Musical Instruments
59     59            59  73                                               Pets
60     60            60  74                    Photographic/ Optical Equipment
61     61            61  75                 Portable Electronic Communications
62     62            62  76                     Recreational/ Sports Equipment
63     63            63  77                                              Other
64     64            64  78                                           Trailers
65     65            65  79           Watercraft Equipment/ Parts/ Accessories
66     66            66  80                                      Weapons-Other
67     67            67  88                                  Pending Inventory
68     68            68  99                                            Special

[69 rows x 4 columns]

In [501]: NIBRS_PROP_DESC_TYPE.PROP_DESC_NAME = [x.replace(',','/') for x in NIBRS_PROP_DESC_TYPE.PROP_DESC_NAME]

In [502]: NIBRS_PROP_DESC_TYPE.to_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE_NEW.csv',sep=',')

In [503]: print(NIBRS_PROP_DESC_TYPE.head(100))
    PROP_DESC_ID  PR                                     PROP_DESC_NAME
0   ------------  --  ----------------------------------------------...
1              1  01                                           Aircraft
2              2  02                                            Alcohol
3              3  03                                         Automobile
4              4  04                                           Bicycles
5              5  05                                              Buses
6              6  06                                      Clothes/ Furs
7              7  07                            Computer Hard/ Software
8              8  08                                   Consumable Goods
9              9  09                                Credit/ Debit cards
10            10  10                                   Drugs/ Narcotics
11            11  11                                     Drug Equipment
12            12  12                                     Farm Equipment
13            13  13                                           Firearms
14            14  14                                 Gambling Equipment
15            15  15                               Industrial Equipment
16            16  16                                    Household Goods
17            17  17                           Jewelry/ Precious Metals
18            18  18                                          Livestock
19            19  19                                        Merchandise
20            20  20                                              Money
21            21  21                             Negotiable Instruments
22            22  22                         Non Negotiable Instruments
23            23  23                                   Office Equipment
24            24  24                               Other Motor Vehicles
25            25  25                                      Purse/ Wallet
26            26  26                                     Radio/ TV/ VCR
27            27  27                                         Recordings
28            28  28                              Recreational Vehicles
29            29  29                         Structure/ Single dwelling
..           ...  ..                                                ...
39            39  39                                         Watercraft
40            40  41                        Aircraft Parts/ Accessories
41            41  42                     Artistic Supplies/ Accessories
42            42  43                                 Building Materials
43            43  44      Camping/ Hunting/ Fishing Equipment/ Supplies
44            44  45                                          Chemicals
45            45  46                          Collections/ Collectibles
46            46  47                                              Crops
47            47  48                    Documents/ Personal or Business
48            48  49                                         Explosives
49            49  59                                Firearm Accessories
50            50  64                                               Fuel
51            51  65                                 Identity Documents
52            52  66                                Identity-Intangible
53            53  67                          Law Enforcement Equipment
54            54  68                       Lawn/ Yard/ Garden Equipment
55            55  69                                  Logging Equipment
56            56  70                     Medical/ Medical Lab Equipment
57            57  71                               Metals/ Non-Precious
58            58  72                                Musical Instruments
59            59  73                                               Pets
60            60  74                    Photographic/ Optical Equipment
61            61  75                 Portable Electronic Communications
62            62  76                     Recreational/ Sports Equipment
63            63  77                                              Other
64            64  78                                           Trailers
65            65  79           Watercraft Equipment/ Parts/ Accessories
66            66  80                                      Weapons-Other
67            67  88                                  Pending Inventory
68            68  99                                            Special

[69 rows x 3 columns]

In [504]: NIBRS_PROP_DESC_TYPE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE_NEW.csv',comment='-').rename(columns=lambda x: x.strip())

In [505]: print(NIBRS_PROP_DESC_TYPE.head(100))
    Unnamed: 0  PROP_DESC_ID    PR                                 PROP_DESC_NAME
0            0           NaN   NaN                                            NaN
1            1           1.0   1.0                                       Aircraft
2            2           2.0   2.0                                        Alcohol
3            3           3.0   3.0                                     Automobile
4            4           4.0   4.0                                       Bicycles
5            5           5.0   5.0                                          Buses
6            6           6.0   6.0                                  Clothes/ Furs
7            7           7.0   7.0                        Computer Hard/ Software
8            8           8.0   8.0                               Consumable Goods
9            9           9.0   9.0                            Credit/ Debit cards
10          10          10.0  10.0                               Drugs/ Narcotics
11          11          11.0  11.0                                 Drug Equipment
12          12          12.0  12.0                                 Farm Equipment
13          13          13.0  13.0                                       Firearms
14          14          14.0  14.0                             Gambling Equipment
15          15          15.0  15.0                           Industrial Equipment
16          16          16.0  16.0                                Household Goods
17          17          17.0  17.0                       Jewelry/ Precious Metals
18          18          18.0  18.0                                      Livestock
19          19          19.0  19.0                                    Merchandise
20          20          20.0  20.0                                          Money
21          21          21.0  21.0                         Negotiable Instruments
22          22          22.0  22.0                     Non Negotiable Instruments
23          23          23.0  23.0                               Office Equipment
24          24          24.0  24.0                           Other Motor Vehicles
25          25          25.0  25.0                                  Purse/ Wallet
26          26          26.0  26.0                                 Radio/ TV/ VCR
27          27          27.0  27.0                                     Recordings
28          28          28.0  28.0                          Recreational Vehicles
29          29          29.0  29.0                     Structure/ Single dwelling
..         ...           ...   ...                                            ...
39          39          39.0  39.0                                     Watercraft
40          40          40.0  41.0                    Aircraft Parts/ Accessories
41          41          41.0  42.0                 Artistic Supplies/ Accessories
42          42          42.0  43.0                             Building Materials
43          43          43.0  44.0  Camping/ Hunting/ Fishing Equipment/ Supplies
44          44          44.0  45.0                                      Chemicals
45          45          45.0  46.0                      Collections/ Collectibles
46          46          46.0  47.0                                          Crops
47          47          47.0  48.0                Documents/ Personal or Business
48          48          48.0  49.0                                     Explosives
49          49          49.0  59.0                            Firearm Accessories
50          50          50.0  64.0                                           Fuel
51          51          51.0  65.0                             Identity Documents
52          52          52.0  66.0                                       Identity
53          53          53.0  67.0                      Law Enforcement Equipment
54          54          54.0  68.0                   Lawn/ Yard/ Garden Equipment
55          55          55.0  69.0                              Logging Equipment
56          56          56.0  70.0                 Medical/ Medical Lab Equipment
57          57          57.0  71.0                                    Metals/ Non
58          58          58.0  72.0                            Musical Instruments
59          59          59.0  73.0                                           Pets
60          60          60.0  74.0                Photographic/ Optical Equipment
61          61          61.0  75.0             Portable Electronic Communications
62          62          62.0  76.0                 Recreational/ Sports Equipment
63          63          63.0  77.0                                          Other
64          64          64.0  78.0                                       Trailers
65          65          65.0  79.0       Watercraft Equipment/ Parts/ Accessories
66          66          66.0  80.0                                        Weapons
67          67          67.0  88.0                              Pending Inventory
68          68          68.0  99.0                                        Special

[69 rows x 4 columns]

In [506]: NIBRS_PROP_DESC_TYPE = pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv', sep=r',(?!\s)',engine='python').rename(columns=lambda x: x.strip())

In [507]: print(NIBRS_PROP_DESC_TYPE.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 69 entries, 0 to 68
Data columns (total 3 columns):
PROP_DESC_ID      69 non-null object
PR                69 non-null object
PROP_DESC_NAME    69 non-null object
dtypes: object(3)
memory usage: 1.7+ KB
None

In [508]: NIBRS_PROP_DESC_TYPE.PROP_DESC_NAME = [x.replace(',','/') for x in NIBRS_PROP_DESC_TYPE.PROP_DESC_NAME]

In [509]: print(NIBRS_PROP_DESC_TYPE.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 69 entries, 0 to 68
Data columns (total 3 columns):
PROP_DESC_ID      69 non-null object
PR                69 non-null object
PROP_DESC_NAME    69 non-null object
dtypes: object(3)
memory usage: 1.7+ KB
None

In [510]: NIBRS_PROP_DESC_TYPE.to_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE_NEW.csv')

In [511]: NIBRS_PROPERTY.PROPERTY_ID.value_counts(dropna=False).head(1000)
Out[511]: 
PROPERTY_ID    4
     768404    1
    4989289    1
    2357149    1
    3767050    1
    1283314    1
    2357142    1
    2357143    1
    2357140    1
    2357141    1
    2357146    1
    2357147    1
    2357144    1
    2357145    1
    4989288    1
    4989282    1
    4852854    1
      30165    1
      30166    1
    4989281    1
    4989286    1
    4989287    1
    4989284    1
    4989285    1
    2219752    1
    2219753    1
    2219750    1
    2219751    1
    2219756    1
    2357148    1
              ..
    1920591    1
    3001390    1
    2754050    1
     289672    1
    1204209    1
    4400713    1
    3884876    1
    3884877    1
    3884874    1
    3884875    1
    1892026    1
    3884879    1
     289671    1
     482539    1
    1125939    1
    1125938    1
    3770955    1
     289677    1
    1125933    1
    1125932    1
    1125931    1
    2220121    1
    4037281    1
    1125936    1
    1125935    1
    1890062    1
    1331168    1
     989126    1
    1575088    1
    2773403    1
Name: PROPERTY_ID, Length: 1000, dtype: int64

In [512]: NIBRS_PROPERTY.INCIDENT_ID.value_counts(dropna=False).head(1000)
Out[512]: 
    3563505    5
    3552452    5
    2593959    5
    2945644    4
    3548237    4
    3405374    4
    4211103    4
    2961576    4
    4169227    4
    1107119    4
    1054632    4
    5421043    4
    4200887    4
     514634    4
    2658634    4
    2956622    4
    1506051    4
    3734688    4
     483320    4
    4178404    4
    2728981    4
    4983150    4
    5035258    4
    5036510    4
INCIDENT_ID    4
    5420669    4
     320558    4
     415296    4
    3559493    4
    3559496    4
              ..
    3553436    3
     478065    3
    2741744    3
     914568    3
    3406864    3
    4171363    3
     478061    3
    4142174    3
    2602633    3
    5370092    3
    2588796    3
    1515017    3
    4594920    3
    3410619    3
    3388600    3
    2396289    3
    3576236    3
    4506307    3
    5360549    3
    2783831    3
     384021    3
     901009    3
     611428    3
    2669028    3
     595340    3
    1113565    3
    2392145    3
    2654401    3
    1058980    3
    2802519    3
Name: INCIDENT_ID, Length: 1000, dtype: int64

In [513]: NIBRS_PROPERTY.FF_LINE_NUMBER.value_counts(dropna=False).head(1000)
Out[513]: 
                  240140
FF_LINE_NUMBER         4
Name: FF_LINE_NUMBER, dtype: int64

In [514]: NIBRS_PROPERTY['FF_LINE_NUMBER'].replace('', np.NaN)
Out[514]: 
0                       
1                       
2                       
3                       
4                       
5                       
6                       
7                       
8                       
9                       
10                      
11                      
12                      
13                      
14                      
15                      
16                      
17                      
18                      
19                      
20                      
21                      
22                      
23                      
24                      
25                      
26                      
27                      
28                      
29                      
               ...      
240114                  
240115                  
240116                  
240117                  
240118                  
240119                  
240120                  
240121                  
240122                  
240123                  
240124                  
240125                  
240126                  
240127                  
240128                  
240129                  
240130                  
240131                  
240132                  
240133                  
240134                  
240135                  
240136                  
240137                  
240138                  
240139                  
240140                  
240141                  
240142                  
240143                  
Name: FF_LINE_NUMBER, Length: 240144, dtype: object

In [515]: NIBRS_PROPERTY['FF_LINE_NUMBER']..apply(lambda x: x.strip(' ')).replace('', np.NaN)
  File "<ipython-input-515-3f1119a49f15>", line 1
    NIBRS_PROPERTY['FF_LINE_NUMBER']..apply(lambda x: x.strip(' ')).replace('', np.NaN)
                                     ^
SyntaxError: invalid syntax


In [516]: NIBRS_PROPERTY['FF_LINE_NUMBER'].apply(lambda x: x.strip(' ')).replace('', np.NaN)
Out[516]: 
0         NaN
1         NaN
2         NaN
3         NaN
4         NaN
5         NaN
6         NaN
7         NaN
8         NaN
9         NaN
10        NaN
11        NaN
12        NaN
13        NaN
14        NaN
15        NaN
16        NaN
17        NaN
18        NaN
19        NaN
20        NaN
21        NaN
22        NaN
23        NaN
24        NaN
25        NaN
26        NaN
27        NaN
28        NaN
29        NaN
         ... 
240114    NaN
240115    NaN
240116    NaN
240117    NaN
240118    NaN
240119    NaN
240120    NaN
240121    NaN
240122    NaN
240123    NaN
240124    NaN
240125    NaN
240126    NaN
240127    NaN
240128    NaN
240129    NaN
240130    NaN
240131    NaN
240132    NaN
240133    NaN
240134    NaN
240135    NaN
240136    NaN
240137    NaN
240138    NaN
240139    NaN
240140    NaN
240141    NaN
240142    NaN
240143    NaN
Name: FF_LINE_NUMBER, Length: 240144, dtype: object

In [517]: NIBRS_PROPERTY['FF_LINE_NUMBER'].fillna('missing')
Out[517]: 
0                       
1                       
2                       
3                       
4                       
5                       
6                       
7                       
8                       
9                       
10                      
11                      
12                      
13                      
14                      
15                      
16                      
17                      
18                      
19                      
20                      
21                      
22                      
23                      
24                      
25                      
26                      
27                      
28                      
29                      
               ...      
240114                  
240115                  
240116                  
240117                  
240118                  
240119                  
240120                  
240121                  
240122                  
240123                  
240124                  
240125                  
240126                  
240127                  
240128                  
240129                  
240130                  
240131                  
240132                  
240133                  
240134                  
240135                  
240136                  
240137                  
240138                  
240139                  
240140                  
240141                  
240142                  
240143                  
Name: FF_LINE_NUMBER, Length: 240144, dtype: object

In [518]: NIBRS_PROPERTY['FF_LINE_NUMBER'].apply(lambda x: x.strip(' ')).fillna('missing')
Out[518]: 
0          
1          
2          
3          
4          
5          
6          
7          
8          
9          
10         
11         
12         
13         
14         
15         
16         
17         
18         
19         
20         
21         
22         
23         
24         
25         
26         
27         
28         
29         
         ..
240114     
240115     
240116     
240117     
240118     
240119     
240120     
240121     
240122     
240123     
240124     
240125     
240126     
240127     
240128     
240129     
240130     
240131     
240132     
240133     
240134     
240135     
240136     
240137     
240138     
240139     
240140     
240141     
240142     
240143     
Name: FF_LINE_NUMBER, Length: 240144, dtype: object

In [519]: NIBRS_PROPERTY['FF_LINE_NUMBER'].apply(lambda x: x.strip(' ')).replace('', np.NaN)
Out[519]: 
0         NaN
1         NaN
2         NaN
3         NaN
4         NaN
5         NaN
6         NaN
7         NaN
8         NaN
9         NaN
10        NaN
11        NaN
12        NaN
13        NaN
14        NaN
15        NaN
16        NaN
17        NaN
18        NaN
19        NaN
20        NaN
21        NaN
22        NaN
23        NaN
24        NaN
25        NaN
26        NaN
27        NaN
28        NaN
29        NaN
         ... 
240114    NaN
240115    NaN
240116    NaN
240117    NaN
240118    NaN
240119    NaN
240120    NaN
240121    NaN
240122    NaN
240123    NaN
240124    NaN
240125    NaN
240126    NaN
240127    NaN
240128    NaN
240129    NaN
240130    NaN
240131    NaN
240132    NaN
240133    NaN
240134    NaN
240135    NaN
240136    NaN
240137    NaN
240138    NaN
240139    NaN
240140    NaN
240141    NaN
240142    NaN
240143    NaN
Name: FF_LINE_NUMBER, Length: 240144, dtype: object

In [520]: NIBRS_PROPERTY['FF_LINE_NUMBER'] = NIBRS_PROPERTY['FF_LINE_NUMBER'].apply(lambda x: x.strip(' ')).replace('', np.NaN).fillna('missing')

In [521]: NIBRS_PROPERTY.FF_LINE_NUMBER.value_counts(dropna=False).head(1000)
Out[521]: 
missing           240140
FF_LINE_NUMBER         4
Name: FF_LINE_NUMBER, dtype: int64

In [522]: NIBRS_PROPERTY.RECOVERED_COUNT.value_counts(dropna=False).head(1000)
Out[522]: 
                   233586
              1      5526
              0       945
              2        77
RECOVERED_COUNT         4
              4         3
              3         2
              5         1
Name: RECOVERED_COUNT, dtype: int64

In [523]: NIBRS_SUSPECTED_DRUG.EST_DRUG_QTY.value_counts(dropna=False).head(1000)
Out[523]: 
0.000      2250
1.000      1823
0.100       907
0.200       829
0.500       723
2.000       672
0.300       668
0.400       630
0.010       534
0.600       484
0.800       419
3.000       380
0.700       377
0.900       359
0.020       346
0.050       335
0.040       312
0.030       312
1.100       280
4.000       274
1.500       270
1.400       262
0.070       248
1.200       243
1.300       240
0.060       237
5.000       228
0.080       226
0.001       210
0.150       191
           ... 
0.511         3
15.900        3
13.020        3
4.620         3
5.980         3
0.281         3
0.538         3
3.820         3
0.159         3
0.365         3
4.730         3
46.900        3
41.900        3
5.220         3
3.660         3
24.300        3
5.130         3
6.220         3
23.700        3
5.670         3
147.000       3
26.200        3
4.410         3
15.750        3
0.119         3
0.386         3
0.427         3
5.470         3
24.800        3
97.000        3
Name: EST_DRUG_QTY, Length: 1000, dtype: int64

In [524]: NIBRS_VICTIM_OFFENDER_REL.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[524]: 
      2017    87275
    2017          1
 DATA_YEAR        1
2017              1
Name: DATA_YEAR, dtype: int64

In [525]: NIBRS_VICTIM_OFFENSE.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[525]: 
      2017    313729
 DATA_YEAR         6
  2017             3
    2017           3
2017               3
Name: DATA_YEAR, dtype: int64

In [526]: NIBRS_VICTIM.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[526]: 
      2017    163831
2017          133212
 DATA_YEAR         5
     2017          1
    2017           1
   2017            1
2017               1
Name: DATA_YEAR, dtype: int64

In [527]: NIBRS_VICTIM.FF_LINE_NUMBER.value_counts(dropna=False).head(1000)
Out[527]: 
                  297047
FF_LINE_NUMBER         5
Name: FF_LINE_NUMBER, dtype: int64

In [528]: NIBRS_WEAPON.DATA_YEAR.value_counts(dropna=False).head(1000)
Out[528]: 
      2017    63630
2017              1
 DATA_YEAR        1
Name: DATA_YEAR, dtype: int64

In [529]: [39] REF_STATE=pd.read_csv('/Users/arunsingh/Downloads/TX/REF_STATE.csv',comment='-').rename(columns=lambda x: x.strip().replace('.','_'))
  File "<ipython-input-529-d97d37669862>", line 1
    [39] REF_STATE=pd.read_csv('/Users/arunsingh/Downloads/TX/REF_STATE.csv',comment='-').rename(columns=lambda x: x.strip().replace('.','_'))
                 ^
SyntaxError: invalid syntax


In [530]: REF_STATE=pd.read_csv('/Users/arunsingh/Downloads/TX/REF_STATE.csv',comment='-').rename(columns=lambda x: x.strip().replace('.','_'))

In [531]: print(REF_STATE.columns)
Index([u'STATE_ID', u'DIVISION_ID', u'STATE_NAME', u'ST', u'ST_1', u'ST_2',
       u'ST_3', u'STATE_PUB_FREQ_MONTHS', u'CHANGE_USER'],
      dtype='object')

In [532]: agencies=pd.read_csv('/Users/arunsingh/Downloads/TX/agencies.csv',comment='-').rename(columns=lambda x: x.strip())

In [533]: print(agencies.columns)
Index([u'yearly_agency_id', u'agency_id', u'data_year', u'ori', u'legacy_ori',
       u'covered_by_legacy_ori', u'direct_contributor_flag', u'dormant_flag',
       u'dormant_year', u'reporting_type', u'ucr_agency_name',
       u'ncic_agency_name', u'pub_agency_name', u'pub_agency_unit',
       u'agency_status', u'state_id', u'state_name', u'state_abbr',
       u'state_postal_abbr', u'division_code', u'division_name',
       u'region_code', u'region_name', u'region_desc', u'agency_type_name',
       u'population', u'submitting_agency_id', u'sai',
       u'submitting_agency_name', u'suburban_area_flag',
       u'population_group_id', u'population_group_code',
       u'population_group_desc', u'parent_pop_group_code',
       u'parent_pop_group_desc', u'mip_flag', u'pop_sort_order',
       u'summary_rape_def', u'pe_reported_flag', u'male_officer',
       u'male_civilian', u'male_total', u'female_officer', u'female_civilian',
       u'female_total', u'officer_rate', u'employee_rate', u'nibrs_cert_date',
       u'nibrs_start_date', u'nibrs_leoka_start_date', u'nibrs_ct_start_date',
       u'nibrs_multi_bias_start_date', u'nibrs_off_eth_start_date',
       u'covered_flag', u'county_name', u'msa_name', u'publishable_flag',
       u'participated', u'nibrs_participated'],
      dtype='object')

In [534]: print(agencies.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 24267 entries, 0 to 24266
Data columns (total 59 columns):
yearly_agency_id               24267 non-null int64
agency_id                      24267 non-null int64
data_year                      24267 non-null int64
ori                            24267 non-null object
legacy_ori                     24267 non-null object
covered_by_legacy_ori          4297 non-null object
direct_contributor_flag        24267 non-null object
dormant_flag                   24267 non-null object
dormant_year                   1486 non-null float64
reporting_type                 24267 non-null object
ucr_agency_name                24267 non-null object
ncic_agency_name               23514 non-null object
pub_agency_name                24267 non-null object
pub_agency_unit                3268 non-null object
agency_status                  24267 non-null object
state_id                       24267 non-null int64
state_name                     24267 non-null object
state_abbr                     24267 non-null object
state_postal_abbr              24267 non-null object
division_code                  24267 non-null int64
division_name                  24267 non-null object
region_code                    24267 non-null int64
region_name                    24267 non-null object
region_desc                    24267 non-null object
agency_type_name               24267 non-null object
population                     24267 non-null int64
submitting_agency_id           24263 non-null float64
sai                            24263 non-null object
submitting_agency_name         24263 non-null object
suburban_area_flag             22755 non-null object
population_group_id            24267 non-null int64
population_group_code          24267 non-null object
population_group_desc          24267 non-null object
parent_pop_group_code          24267 non-null int64
parent_pop_group_desc          24267 non-null object
mip_flag                       24267 non-null object
pop_sort_order                 24267 non-null int64
summary_rape_def               19970 non-null object
pe_reported_flag               24267 non-null object
male_officer                   13614 non-null float64
male_civilian                  13614 non-null float64
male_total                     13614 non-null float64
female_officer                 13614 non-null float64
female_civilian                13614 non-null float64
female_total                   13614 non-null float64
officer_rate                   13612 non-null float64
employee_rate                  13612 non-null float64
nibrs_cert_date                16424 non-null object
nibrs_start_date               8317 non-null object
nibrs_leoka_start_date         6452 non-null object
nibrs_ct_start_date            5350 non-null object
nibrs_multi_bias_start_date    3383 non-null object
nibrs_off_eth_start_date       3998 non-null object
covered_flag                   24267 non-null object
county_name                    22073 non-null object
msa_name                       24267 non-null object
publishable_flag               24267 non-null object
participated                   24267 non-null object
nibrs_participated             24267 non-null object
dtypes: float64(10), int64(10), object(39)
memory usage: 10.9+ MB
None

In [535]: NIBRS_AGE=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_AGE.csv',comment='-').rename(columns=lambda x: x.strip())

In [536]: print(NIBRS_AGE.columns)
Index([u'AGE_ID', u'AG', u'AGE_NAME'], dtype='object')

In [537]: print(NIBRS_AGE.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 6 entries, 0 to 5
Data columns (total 3 columns):
AGE_ID      6 non-null int64
AG          6 non-null object
AGE_NAME    6 non-null object
dtypes: int64(1), object(2)
memory usage: 216.0+ bytes
None

In [538]: NIBRS_AGE.AGE_ID.value_counts(dropna=False).head(1000)
Out[538]: 
6    1
5    1
4    1
3    1
2    1
1    1
Name: AGE_ID, dtype: int64

In [539]: NIBRS_PROP_DESC_TYPE = pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv', sep=r',(?!\s)',engine='python',comment='-').rename(columns=lambda x: x.strip())

In [540]: print(NIBRS_PROP_DESC_TYPE.head(100))
    PROP_DESC_ID  PR                                 PROP_DESC_NAME
0              1   1                                       Aircraft
1              2   2                                        Alcohol
2              3   3                                     Automobile
3              4   4                                       Bicycles
4              5   5                                          Buses
5              6   6                                  Clothes/ Furs
6              7   7                        Computer Hard/ Software
7              8   8                               Consumable Goods
8              9   9                            Credit/ Debit cards
9             10  10                               Drugs/ Narcotics
10            11  11                                 Drug Equipment
11            12  12                                 Farm Equipment
12            13  13                                       Firearms
13            14  14                             Gambling Equipment
14            15  15                           Industrial Equipment
15            16  16                                Household Goods
16            17  17                       Jewelry/ Precious Metals
17            18  18                                      Livestock
18            19  19                                    Merchandise
19            20  20                                          Money
20            21  21                         Negotiable Instruments
21            22  22                     Non Negotiable Instruments
22            23  23                               Office Equipment
23            24  24                           Other Motor Vehicles
24            25  25                                  Purse/ Wallet
25            26  26                                 Radio/ TV/ VCR
26            27  27                                     Recordings
27            28  28                          Recreational Vehicles
28            29  29                     Structure/ Single dwelling
29            30  30                     Structure/ Other residence
..           ...  ..                                            ...
38            39  39                                     Watercraft
39            40  41                    Aircraft Parts/ Accessories
40            41  42                 Artistic Supplies/ Accessories
41            42  43                             Building Materials
42            43  44  Camping/ Hunting/ Fishing Equipment/ Supplies
43            44  45                                      Chemicals
44            45  46                      Collections/ Collectibles
45            46  47                                          Crops
46            47  48                Documents/ Personal or Business
47            48  49                                     Explosives
48            49  59                            Firearm Accessories
49            50  64                                           Fuel
50            51  65                             Identity Documents
51            52  66                                       Identity
52            53  67                      Law Enforcement Equipment
53            54  68                   Lawn/ Yard/ Garden Equipment
54            55  69                              Logging Equipment
55            56  70                 Medical/ Medical Lab Equipment
56            57  71                                    Metals, Non
57            58  72                            Musical Instruments
58            59  73                                           Pets
59            60  74                Photographic/ Optical Equipment
60            61  75             Portable Electronic Communications
61            62  76                 Recreational/ Sports Equipment
62            63  77                                          Other
63            64  78                                       Trailers
64            65  79       Watercraft Equipment/ Parts/ Accessories
65            66  80                                        Weapons
66            67  88                              Pending Inventory
67            68  99                                        Special

[68 rows x 3 columns]

In [541]: NIBRS_PROP_DESC_TYPE = pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv', sep=r',(?!\s)',engine='python',comment='-')

In [542]: print(NIBRS_PROP_DESC_TYPE.head(100))
    PROP_DESC_ID  PR                                 PROP_DESC_NAME
0              1   1                                       Aircraft
1              2   2                                        Alcohol
2              3   3                                     Automobile
3              4   4                                       Bicycles
4              5   5                                          Buses
5              6   6                                  Clothes/ Furs
6              7   7                        Computer Hard/ Software
7              8   8                               Consumable Goods
8              9   9                            Credit/ Debit cards
9             10  10                               Drugs/ Narcotics
10            11  11                                 Drug Equipment
11            12  12                                 Farm Equipment
12            13  13                                       Firearms
13            14  14                             Gambling Equipment
14            15  15                           Industrial Equipment
15            16  16                                Household Goods
16            17  17                       Jewelry/ Precious Metals
17            18  18                                      Livestock
18            19  19                                    Merchandise
19            20  20                                          Money
20            21  21                         Negotiable Instruments
21            22  22                     Non Negotiable Instruments
22            23  23                               Office Equipment
23            24  24                           Other Motor Vehicles
24            25  25                                  Purse/ Wallet
25            26  26                                 Radio/ TV/ VCR
26            27  27                                     Recordings
27            28  28                          Recreational Vehicles
28            29  29                     Structure/ Single dwelling
29            30  30                     Structure/ Other residence
..           ...  ..                                            ...
38            39  39                                     Watercraft
39            40  41                    Aircraft Parts/ Accessories
40            41  42                 Artistic Supplies/ Accessories
41            42  43                             Building Materials
42            43  44  Camping/ Hunting/ Fishing Equipment/ Supplies
43            44  45                                      Chemicals
44            45  46                      Collections/ Collectibles
45            46  47                                          Crops
46            47  48                Documents/ Personal or Business
47            48  49                                     Explosives
48            49  59                            Firearm Accessories
49            50  64                                           Fuel
50            51  65                             Identity Documents
51            52  66                                       Identity
52            53  67                      Law Enforcement Equipment
53            54  68                   Lawn/ Yard/ Garden Equipment
54            55  69                              Logging Equipment
55            56  70                 Medical/ Medical Lab Equipment
56            57  71                                    Metals, Non
57            58  72                            Musical Instruments
58            59  73                                           Pets
59            60  74                Photographic/ Optical Equipment
60            61  75             Portable Electronic Communications
61            62  76                 Recreational/ Sports Equipment
62            63  77                                          Other
63            64  78                                       Trailers
64            65  79       Watercraft Equipment/ Parts/ Accessories
65            66  80                                        Weapons
66            67  88                              Pending Inventory
67            68  99                                        Special

[68 rows x 3 columns]

In [543]: NIBRS_PROP_DESC_TYPE = pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv', sep=r',(?!\s)',engine='python',comment='--').rename(columns=lambda x: x.strip())

In [544]: print(NIBRS_PROP_DESC_TYPE.head(100))
    PROP_DESC_ID  PR                                 PROP_DESC_NAME
0              1   1                                       Aircraft
1              2   2                                        Alcohol
2              3   3                                     Automobile
3              4   4                                       Bicycles
4              5   5                                          Buses
5              6   6                                  Clothes/ Furs
6              7   7                        Computer Hard/ Software
7              8   8                               Consumable Goods
8              9   9                            Credit/ Debit cards
9             10  10                               Drugs/ Narcotics
10            11  11                                 Drug Equipment
11            12  12                                 Farm Equipment
12            13  13                                       Firearms
13            14  14                             Gambling Equipment
14            15  15                           Industrial Equipment
15            16  16                                Household Goods
16            17  17                       Jewelry/ Precious Metals
17            18  18                                      Livestock
18            19  19                                    Merchandise
19            20  20                                          Money
20            21  21                         Negotiable Instruments
21            22  22                     Non Negotiable Instruments
22            23  23                               Office Equipment
23            24  24                           Other Motor Vehicles
24            25  25                                  Purse/ Wallet
25            26  26                                 Radio/ TV/ VCR
26            27  27                                     Recordings
27            28  28                          Recreational Vehicles
28            29  29                     Structure/ Single dwelling
29            30  30                     Structure/ Other residence
..           ...  ..                                            ...
38            39  39                                     Watercraft
39            40  41                    Aircraft Parts/ Accessories
40            41  42                 Artistic Supplies/ Accessories
41            42  43                             Building Materials
42            43  44  Camping/ Hunting/ Fishing Equipment/ Supplies
43            44  45                                      Chemicals
44            45  46                      Collections/ Collectibles
45            46  47                                          Crops
46            47  48                Documents/ Personal or Business
47            48  49                                     Explosives
48            49  59                            Firearm Accessories
49            50  64                                           Fuel
50            51  65                             Identity Documents
51            52  66                            Identity-Intangible
52            53  67                      Law Enforcement Equipment
53            54  68                   Lawn/ Yard/ Garden Equipment
54            55  69                              Logging Equipment
55            56  70                 Medical/ Medical Lab Equipment
56            57  71                           Metals, Non-Precious
57            58  72                            Musical Instruments
58            59  73                                           Pets
59            60  74                Photographic/ Optical Equipment
60            61  75             Portable Electronic Communications
61            62  76                 Recreational/ Sports Equipment
62            63  77                                          Other
63            64  78                                       Trailers
64            65  79       Watercraft Equipment/ Parts/ Accessories
65            66  80                                  Weapons-Other
66            67  88                              Pending Inventory
67            68  99                                        Special

[68 rows x 3 columns]

In [545]: df.apply[x.replace(',','/') for x in NIBRS_PROP_DESC_TYPE.PROP_DESC_NAME]
  File "<ipython-input-545-846380ceaac0>", line 1
    df.apply[x.replace(',','/') for x in NIBRS_PROP_DESC_TYPE.PROP_DESC_NAME]
                                  ^
SyntaxError: invalid syntax


In [546]: df.apply[x.replace(',','/') for x in NIBRS_PROP_DESC_TYPE]]
  File "<ipython-input-546-48eb497aace1>", line 1
    df.apply[x.replace(',','/') for x in NIBRS_PROP_DESC_TYPE]]
                                  ^
SyntaxError: invalid syntax


In [547]: [x.replace(',','/') for x in NIBRS_PROP_DESC_TYPE]]
  File "<ipython-input-547-218481488a53>", line 1
    [x.replace(',','/') for x in NIBRS_PROP_DESC_TYPE]]
                                                      ^
SyntaxError: invalid syntax


In [548]: df.PROP_DESC_NAME = [x.replace(',','/') for x in NIBRS_PROP_DESC_TYPE.PROP_DESC_NAME]
/usr/local/bin/ipython:1: UserWarning: Pandas doesn't allow columns to be created via a new attribute name - see https://pandas.pydata.org/pandas-docs/stable/indexing.html#attribute-access
  #!/usr/local/opt/python@2/bin/python2.7

In [549]: NIBRS_PROP_DESC_TYPE = [x.replace(',','/') for x in NIBRS_PROP_DESC_TYPE]

In [550]: print(NIBRS_PROP_DESC_TYPE.head(100))
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-550-000d9ed7e750> in <module>()
----> 1 print(NIBRS_PROP_DESC_TYPE.head(100))

AttributeError: 'list' object has no attribute 'head'

In [551]: print(NIBRS_PROP_DESC_TYPE.columns)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-551-71d4e464fd90> in <module>()
----> 1 print(NIBRS_PROP_DESC_TYPE.columns)

AttributeError: 'list' object has no attribute 'columns'

In [552]: NIBRS_PROP_DESC_TYPE = pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv', sep=r',(?!\s)',engine='python',comment='--').rename(columns=lambda x: x.strip())

In [553]: agency=pd.read_csv('/Users/arunsingh/Downloads/TX/agency_participation.csv',comment='-').rename(columns=lambda x: x.strip())

In [554]: print(agency.columns)
Index([u'data_year', u'state_id', u'state_abbr', u'ori', u'population',
       u'active', u'published', u'covered', u'nibrs_submitting',
       u'nibrs_start_date', u'leoka_submitting', u'leoka_start_date',
       u'pe_reported_flag', u'srs_submitting'],
      dtype='object')

In [555]: print(agency.info())
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 24251 entries, 0 to 24250
Data columns (total 14 columns):
data_year           24251 non-null int64
state_id            24251 non-null int64
state_abbr          24251 non-null object
ori                 24251 non-null object
population          24251 non-null int64
active              24251 non-null object
published           24251 non-null object
covered             24251 non-null object
nibrs_submitting    24251 non-null object
nibrs_start_date    8314 non-null object
leoka_submitting    24251 non-null object
leoka_start_date    6447 non-null object
pe_reported_flag    24251 non-null object
srs_submitting      24251 non-null object
dtypes: int64(3), object(11)
memory usage: 2.6+ MB
None

In [556]: df.apply(lambda x: x.strip(' ')).replace('', np.NaN).fillna('mi
  File "<ipython-input-556-996ddc49e065>", line 1
    df.apply(lambda x: x.strip(' ')).replace('', np.NaN).fillna('mi
                                                                  ^
SyntaxError: EOL while scanning string literal


In [557]: df=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_AGE.csv',comment='--').rename(columns=lambda x: x.strip().replace('.','_'))
     ...: 
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-557-cf474ecf643d> in <module>()
----> 1 df=pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_AGE.csv',comment='--').rename(columns=lambda x: x.strip().replace('.','_'))

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)
    676                     skip_blank_lines=skip_blank_lines)
    677 
--> 678         return _read(filepath_or_buffer, kwds)
    679 
    680     parser_f.__name__ = name

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _read(filepath_or_buffer, kwds)
    438 
    439     # Create the parser.
--> 440     parser = TextFileReader(filepath_or_buffer, **kwds)
    441 
    442     if chunksize or iterator:

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in __init__(self, f, engine, **kwds)
    785             self.options['has_index_names'] = kwds['has_index_names']
    786 
--> 787         self._make_engine(self.engine)
    788 
    789     def close(self):

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in _make_engine(self, engine)
   1012     def _make_engine(self, engine='c'):
   1013         if engine == 'c':
-> 1014             self._engine = CParserWrapper(self.f, **self.options)
   1015         else:
   1016             if engine == 'python':

/usr/local/lib/python2.7/site-packages/pandas/io/parsers.pyc in __init__(self, src, **kwds)
   1706         kwds['usecols'] = self.usecols
   1707 
-> 1708         self._reader = parsers.TextReader(src, **kwds)
   1709 
   1710         passed_names = self.names is None

pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.__cinit__()

ValueError: Only length-1 comment characters supported

In [558]: NIBRS_PROP_DESC_TYPE = pd.read_csv('/Users/arunsingh/Downloads/TX/NIBRS_PROP_DESC_TYPE.csv', sep=r',(?!\s)',engine='python',comment='--').rename(columns=lambda x: x.strip())

In [559]: 
